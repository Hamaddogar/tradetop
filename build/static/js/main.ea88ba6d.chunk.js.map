{"version":3,"sources":["store/Reducers/dropdownReducers.js","store/Reducers/loginReducers.js","store/Reducers/dataReducers.js","utlities.js","store/Reducers/companiesReducer.js","store/Reducers/supplierReducer.js","store/Reducers/customerReducer.js","store/Reducers/productReducer.js","store/Reducers/userReducer.js","store/Reducers/categoryReducers.js","store/Reducers/areas.js","store/Reducers/salesReducer.js","store/Reducers/purchaseReducer.js","store/Reducers/expensesReducer.js","store/Reducers/storeReducer.js","store/Reducers/attendanceReducer.js","store/store.js","historyProvider.js","component/loginForm/loginform.js","store/Middleware/middleware.js","store/Action/actionCreater.js","store/Action/AllactionTypes.js","component/navbar/navbar.js","component/dasboard/dashboard.js","message.js","store/Middleware/suppliers.js","component/accounts/addSupplier.js","component/accounts/supplier.js","store/Middleware/products.js","component/settings/products/addProduct.js","component/settings/products/product.js","store/Middleware/company.js","component/settings/companies/addCompany.js","component/settings/companies/companySettings.js","store/Middleware/category.js","component/settings/categories/addCategory.js","component/settings/categories/categories.js","store/Middleware/area.js","component/settings/areas/addArea.js","component/settings/areas/areas.js","store/Middleware/attendance.js","component/autocompletion/autocompletion.js","component/attendance/attendance.js","store/Middleware/store.js","component/settings/store/settings.js","component/sales/sales.js","component/deleteItem/deleteItem.js","component/Payment/paymentDetails.js","store/Middleware/sales.js","component/sales/newSale.js","store/Middleware/users.js","component/settings/salary/addSalary.js","component/settings/salary/salary.js","store/Middleware/expenses.js","component/expenses/addExpenses.js","component/expenses/expenses.js","component/addPayment/addPayment.js","component/accounts/supplierDetails.js","store/Middleware/customers.js","component/accounts/customersledgers.js","component/settings/addCustomer.js","component/settings/customers.js","component/settings/users/addUser.js","component/settings/users/users.js","store/Middleware/purchases.js","component/purchases/newPurchases.js","component/purchases/purchases.js","component/recovery/recovery.js","component/Maincomponent.js","App.js","serviceWorker.js","index.js"],"names":["initialData","loadedMenu","MainMenuItemNames","home","accounts","sales","Purchase","reporting","setting","recovery","Expires","Expenses","salary","profit","return","stock","nestedItem","name","hint","icon","link","settings","dropDown","state","action","type","payload","initialState","loggedInUser","loginReducers","newState","JSON","parse","stringify","user","supplierAccounts","_id","totalPayable","amountPaid","date","Date","suppliers","id","code","fullName","company","phone","address","dataReducer","push","toast","success","getRange","start","end","this","time","getDayName","weekdays","Array","getDay","getMonthDays","month","getMonthFromName","monthName","indexOf","getMonthName","getMonth","getID","suffix","prop","myList","noSuffix","lastItem","length","toString","match","replace","companies","customers","products","salaryRecord","users","categories","areas","purchases","expenses","store","offdays","attendance","persistConfig","key","storage","middleware","thunk","allStore","combineReducers","attendanceReducer","storeReducer","expensesReducer","expCode","utlities","purchaseReducer","purchaseCode","salesReducer","forEach","sale","status","saleCode","areaReducers","target","model","find","item","console","log","categoryReducers","category","__id","categCode","customerReducer","customer","supplierReducer","supplier","supplierCode","dropdownReducers","dataReducers","productReducers","product","productCode","userReducer","userCode","companyReducers","persistedReducer","persistReducer","createStore","compose","applyMiddleware","window","persistStore","createBrowserHistory","Login","email","password","handleValue","evt","setState","value","signupUser","preventDefault","props","updatedSignup","history","location","path","className","onSubmit","onChange","placeholder","React","Component","connect","dispatch","data","fetch","method","headers","body","then","resp","json","localStorage","setItem","token","actionCreater","mypurchases","Header","showMenu","render","nestdropdown","accountitem","reportingItem","MainMenuItemName","settingItems","Menu","SubMenu","map","Item","justify","span","style","color","href","onClick","bind","to","withRouter","auth","settingItem","Dashboard","activated","deActivated","created","updated","error","cannotCreate","saved","purchase","area","cannotUpdate","salaryCreated","cannotCreateSalary","unknown","messages","createSupplier","middleWare","useState","updateState","class","display","opacity","stack","limit","readOnly","required","concat","firstName","lastName","supplierGender","zip","supplierProvince","agency","comments","undefined","Alert","position","effect","timeout","test","Object","keys","showAddSupplier","Supplier","openSupplierForm","activePage","itemPerPage","pageNumber","indexOfLastitem","indexOfFirstitem","renderedsuppliers","slice","targetSupplier","src","onchange","for","showAddBtn","i","title","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange","AddProduct","cost","margin","saveCustomer","shopkeeperPrice","customerPrice","quantityType","productQty","cartonSize","description","createCustomer","showAddProduct","customerMiddleWare","Product","targetProduct","openProductForm","renderedproducts","createCompany","showAddCompany","Company","toggleStatus","toggleState","targetCompany","openCompanyForm","rendercompanies","args","createCategory","showAddCategory","Category","renderedCategories","openCategoryForm","targetCategory","toggleCompanyState","createArea","showAddArea","Area","targetArea","openAreaForm","renderedProjects","lastUpdated","toDateString","ComboBox","Autocomplete","options","getOptionLabel","option","property","width","renderInput","params","TextField","label","variant","fullWidth","TabPanel","children","index","other","Typography","component","role","hidden","aria-labelledby","Box","p","a11yProps","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","Attendance","searched","selectedUser","tabNo","handleChange","event","newValue","fetchUserAttendance","componentDidMount","componentWillUpdate","newProps","oldProps","markAttendance","warn","toLocaleTimeString","getDate","year","getFullYear","newDate","daysInMonth","isWorkingDay","utilities","AppBar","Tabs","aria-label","Tab","FormControl","minWidth","InputLabel","Select","labelId","MenuItem","updatedStore","StoreSettings","that","$","refs","offDays","chips","tag","onChipAdd","chip","chipsData","onChipDelete","autocompleteOptions","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Infinity","minLength","componentDidUpdate","oldprops","newprops","saveStore","startTiming","endingTiming","saveSettings","utils","DateFnsUtils","marginTop","KeyboardButtonProps","ref","billNo","total","discount","salesDate","deliveryDate","DeletePrompt","payment","visible","onYes","onCancel","PaymentDetails","amount","setPayment","useEffect","payments","onPaymentAdded","Sales","onProductUpdate","bill","uPrice","putNewOrder","crtn","units","fUnit","discountPerc","unitDisc","discountedAmt","net","deleted","inProcess","updateBill","deleteItem","selectedBill","deleteDialog","restoreItem","getItem","notes","salesDatePicker","datepicker","onSelect","deliveryDatePicker","minDate","saveSale","bills","defaultAction","clear","activeBills","filter","totalBill","totalDiscount","totalUnitDiscount","Math","round","totalPayment","addingPayment","defaultValue","cartons","split","iBill","stockDemanded","issueAvaiableStock","disabled","readonly","onInput","onKeyDown","userID","useStyles","fetchSalaries","updateUser","createSalary","createRef","records","record","setRecord","classes","monthDropDown","useRef","current","dropdown","setValue","paymentType","setPaymentType","selectedMonth","setSelectedMonth","attendanceDays","days","leaves","payableSalary","height","formControl","FormLabel","RadioGroup","FormControlLabel","control","Radio","data-target","innerText","border","quantity","currency","showAddUser","Salary","targetUser","openUserForm","join","expense","createExpense","AddPayment","toggleMenu","addPaymentToSupplier","open","paymentAmount","supplierID","supplierAcc","Customersledgers","filterdCustomer","renderedCustomer","useSelector","gender","maxlength","province","city","showAddCustomer","Customer","openCustomerForm","renderedcustomers","targetCustomer","flag","createUser","areaBox","chipsContainer","currentAreas","transformAreasToChipsData","list","obj","append","each","e","User","rendereduser","Purchases","savePurchase","Recovery","Main","getitemALL","SupplierDetails","NewSale","NewPurchase","Store","CompanySettings","CategorySettings","UserSettings","AreaSettings","menuReducers","App","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qnCAAA,IAAIA,EAAc,CACdC,WAAW,GACXC,kBAAkB,CACbC,KAAK,OACLC,SAAS,WACTC,MAAM,QACNC,SAAS,WACTC,UAAU,YACVC,QAAQ,UACRC,SAAS,WACTC,QAAQ,UACRC,SAAS,WACTC,OAAO,SACPC,OAAO,cACPC,OAAO,SACPC,MAAM,SAEXC,WAAY,CAAC,QAAQ,SACrBZ,SAAS,CACL,CAACa,KAAK,WAAYC,KAAK,GAAIC,KAAK,sBAAuBC,KAAK,uBAC5D,CAACH,KAAK,mBAAoBC,KAAK,GAAIC,KAAK,6BAA8BC,KAAK,+BAC/Eb,UAAU,CACN,CAACU,KAAK,aAAcC,KAAK,GAAIC,KAAK,wBAAyBC,KAAK,eAChE,CAACH,KAAK,QAASC,KAAK,GAAIC,KAAK,kBAAmBC,KAAK,UACrD,CAACH,KAAK,YAAaC,KAAK,GAAIC,KAAK,uBAAwBC,KAAK,wBAC9D,CAACH,KAAK,uBAAwBC,KAAK,GAAIC,KAAK,0BAA2BC,KAAK,2BAC5E,CAACH,KAAK,eAAgBC,KAAK,GAAIC,KAAK,yBAA0BC,KAAK,0BACnE,CAACH,KAAK,YAAaC,KAAK,GAAIC,KAAK,uBAAwBC,KAAK,wBAC9D,CAACH,KAAK,YAAaC,KAAK,GAAIC,KAAK,gCAAiCC,KAAK,wBACvE,CAACH,KAAK,mBAAoBC,KAAK,GAAIC,KAAK,6BAA8BC,KAAK,8BAC3E,CAACH,KAAK,QAASC,KAAK,GAAIC,KAAK,mBAAoBC,KAAK,oBACtD,CAACH,KAAK,6BAA8BC,KAAK,GAAIC,KAAK,2BAA2BC,KAAK,0BAClF,CAACH,KAAK,aAAcC,KAAK,GAAIC,KAAK,sBAAuBC,KAAK,yBAC9D,CAACH,KAAK,iBAAkBC,KAAK,GAAIC,KAAK,qBAAsBC,KAAK,sBACjE,CAACH,KAAK,kBAAmBC,KAAK,GAAIC,KAAK,4BAA6BC,KAAK,6BAE7EC,SAAS,CACL,CAACJ,KAAK,iBAAkBC,KAAK,wCAAyCE,KAAK,iBAAkBD,KAAK,6BAClG,CAACF,KAAK,oBAAqBC,KAAK,wCAAyCC,KAAK,gCAC9E,CAACF,KAAK,QAASC,KAAK,+BAAgCC,KAAK,2BAA4BC,KAAK,mBAC1F,CAACH,KAAK,YAAaC,KAAK,mBAAoBC,KAAK,uBAAwBC,KAAK,uBAC9E,CAACH,KAAK,YAAaC,KAAK,mBAAoBC,KAAK,sBAAuBC,KAAK,uBAC7E,CAACH,KAAK,WAAYC,KAAK,2BAA4BC,KAAK,8BAA8BC,KAAK,sBAC3F,CAACH,KAAK,UAAWC,KAAK,yBAA0BC,KAAK,+BACrD,CAACF,KAAK,aAAcC,KAAK,iCAAkCC,KAAK,iCAAiCC,KAAK,wBACtG,CAACH,KAAK,QAASC,KAAK,2BAA4BC,KAAK,4BAA4BC,KAAK,mBACtF,CAACH,KAAK,YAAaC,KAAK,2BAA4BC,KAAK,8BAA+BC,KAAK,yBAqBtFE,EAhBE,WAAkC,IAAjCC,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAC9C,OAAQA,EAAOC,MAEX,IAAK,YACD,OAAO,EAAP,GACOF,EADP,CAEItB,WAAYsB,EAAMC,EAAOE,UAAY,KAG7C,IAAK,oBACD,OAAO,EAAP,GACOH,GAGf,OAAOA,GChEPI,EAAe,CACfC,aAAa,IAaFC,EAVO,WAAiC,IAAhCN,EAA+B,uDAAzBI,EAAaH,EAAY,uCAC9CM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IACzC,OAAQC,EAAOC,MACX,IAAK,QAED,OADAK,EAASF,aAAeJ,EAAOE,QAAQQ,KAChCJ,EAGnB,OAAOP,G,QCVDvB,EAAc,CAChBmC,iBAAiB,CACb,CAAGC,IAAI,EAAGC,aAAa,KAAMC,WAAW,KAAMC,KAAK,IAAIC,MACvD,CAAGJ,IAAI,EAAGC,aAAa,KAAMC,WAAW,KAAMC,KAAK,IAAIC,MACvD,CAAGJ,IAAI,EAAGC,aAAa,KAAMC,WAAW,KAAMC,KAAK,IAAIC,MACvD,CAAGJ,IAAI,EAAGC,aAAa,KAAMC,WAAW,KAAMC,KAAK,IAAIC,MACvD,CAAGJ,IAAI,EAAGC,aAAa,KAAMC,WAAW,KAAMC,KAAK,IAAIC,OAE3DC,UAAU,CACN,CAACC,GAAG,EAAGC,KAAK,WAAYC,SAAS,GAAIC,QAAQ,SAAUC,MAAM,eAAeC,QAAQ,+DACpF,CAACL,GAAG,EAAEC,KAAK,WAAYC,SAAS,GAAIC,QAAQ,SAAUC,MAAM,GAAGC,QAAQ,IACvE,CAACL,GAAG,EAAEC,KAAK,WAAYC,SAAS,GAAIC,QAAQ,YAAaC,MAAM,GAAGC,QAAQ,IAC1E,CAACL,GAAG,EAAEC,KAAK,WAAYC,SAAS,GAAIC,QAAQ,UAAWC,MAAM,GAAGC,QAAQ,IACxE,CAACL,GAAG,EAAEC,KAAK,WAAYC,SAAS,GAAIC,QAAQ,UAAWC,MAAM,GAAGC,QAAQ,IACxE,CAACL,GAAG,EAAEC,KAAK,WAAYC,SAAS,GAAIC,QAAQ,SAAUC,MAAM,GAAGC,QAAQ,IACvE,CAACL,GAAG,EAAEC,KAAK,WAAYC,SAAS,GAAIC,QAAQ,SAAUC,MAAM,GAAGC,QAAQ,IACvE,CAACL,GAAG,EAAEC,KAAK,WAAYC,SAAS,GAAIC,QAAQ,aAAcC,MAAM,GAAGC,QAAQ,IAC3E,CAACL,GAAG,EAAEC,KAAK,WAAYC,SAAS,GAAIC,QAAQ,UAAWC,MAAM,GAAGC,QAAQ,IACxE,CAACL,GAAG,GAAGC,KAAK,YAAaC,SAAS,GAAIC,QAAQ,aAAcC,MAAM,GAAGC,QAAQ,MA6BtEC,EAxBK,WAAgC,IAA/BzB,EAA8B,uDAAtBvB,EAAawB,EAAS,uCAE3CM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAOC,EAAOC,MAEV,IAAK,kBAKL,OAHQK,EAASK,iBAAiBc,KAAKzB,EAAOE,SAEtCwB,IAAMC,QAAQ,kBACfrB,EAEP,IAAK,iBAEL,OAAOA,EAKf,OAAOA,G,QC9CQ,GACXsB,SADW,SACFC,EAAOC,GACZ,OAAID,IAAUC,EAAY,CAACD,GACrB,CAAEA,GAAR,mBAAkBE,KAAKH,SAASC,EAAQ,EAAGC,MAE/CE,KAAM,CACFC,WADE,SACSlB,GAGP,IAAImB,EAAW,IAAIC,MAAM,GAQzB,OAPAD,EAAS,GAAK,SACdA,EAAS,GAAK,SACdA,EAAS,GAAK,UACdA,EAAS,GAAK,YACdA,EAAS,GAAK,WACdA,EAAS,GAAK,SACdA,EAAS,GAAK,WACPA,EAASnB,EAAKqB,WAEzBC,aAdE,SAcWC,GAiBT,MAfmB,CACf,QAAW,GACX,MAAS,GACT,IAAO,GACP,KAAQ,GACR,OAAU,GACV,QAAW,GACX,SAAY,GACZ,SAAY,GACZ,MAAS,GACT,KAAQ,GACR,UAAa,GACb,SAAY,IAGEA,IAGtBC,iBAlCE,SAkCeC,GAEd,MAAO,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OACvD,OAAQ,SAAU,YAAa,UAAW,WAAY,YACxDC,QAAQD,IAMVE,aA5CE,WAmDE,MALmB,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAChE,OAAQ,SAAU,YAAa,UAAW,WAAY,aAGhD,IAAI1B,MACM2B,cAO5BC,MA/DW,SA+DLC,EAAQC,EAAMC,EAAQC,GAExB,IAAIC,EAAWF,EAAOA,EAAOG,OAAS,GAEtC,OAAKD,GAQDA,EAASH,IAKLE,EAAW,GAAKH,EAAS,OADhBI,EAASH,GAAMK,WAAWC,MAAM,UAAU,GAAGC,QAAQ,KAAM,IACrB,KAZ3CL,EAAW,GAAKH,EAAS,KAAO,MClEhDrE,EAAc,CACd8E,UAAW,ICAX9E,EAAc,CACdyC,UAAW,ICFXzC,EAAc,CAChB+E,UAAW,ICAT/E,EAAc,CACdgF,SAAU,ICDVhF,EAAc,CACdiF,aAAa,GACbC,MAAO,ICHPlF,EAAc,CACdmF,WAAY,ICDZnF,EAAc,CAChBoF,MAAO,ICDLpF,EAAc,CAChBK,MAAO,ICDLL,EAAc,CACdqF,UAAW,ICDXrF,EAAc,CACdsF,SAAU,ICAVtF,EAAc,CAEduF,MAAO,CAACC,QAAQ,KCLhBC,EAAa,CACbA,WAAY,ICqBVC,EAAgB,CAClBC,IAAK,OACLC,aAGEC,EAAa,CAACC,KAEhBC,EAAWC,YAAgB,CAACC,kBDxBjB,WAAiC,IAAhC1E,EAA+B,uDAAvBkE,EAAYjE,EAAW,uCAEvCM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAOC,EAAOC,MAEV,IAAK,oBACGK,EAAS2D,WAAajE,EAAOE,QACjC,MAEJ,IAAK,qBACGI,EAAS2D,WAAWxC,KAAKzB,EAAOE,SAM5C,OAAOI,GCOwCoE,aFpBpC,WAAkC,IAAjC3E,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAExCM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MAEX,IAAK,oBACL,IAAK,gBACL,IAAK,eACDK,EAASyD,MAAQ/D,EAAOE,SAAW,CAAC8D,QAAQ,IAC5C,MAGJ,IAAK,oBACDhE,EAAOE,UAAYI,EAASyD,MAAQ/D,EAAOE,QAAQwE,aAAaX,OAAS,CAACC,QAAQ,KAK1F,OAAO1D,GECsDqE,gBHhBlD,WAAkC,IAAjC5E,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAExCM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MAEX,IAAK,oBACDD,EAAOE,UAAYI,EAASwD,SAAW9D,EAAOE,QAAQyE,gBAAgBb,UAAY,IAClF,MAEJ,IAAK,kBACDxD,EAASwD,SAAW9D,EAAOE,QAC3B,MAEJ,IAAK,kBACDI,EAASwD,SAASrC,KAAKzB,EAAOE,SAQtC,OAHAI,EAASsE,QAAUC,EAASjC,MAAM,MAAO,OAAQtC,EAASwD,UAGnDxD,GGPuEwE,gBJjBnE,WAAkC,IAAjC/E,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAExCM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MAEX,IAAK,oBACDD,EAAOE,UAAYI,EAASuD,UAAY7D,EAAOE,QAAQ4E,gBAAgBjB,WAAa,IACpF,MAEJ,IAAK,mBACDvD,EAASuD,UAAY7D,EAAOE,QAC5B,MAEJ,IAAK,mBACDI,EAASuD,UAAUpC,KAAKzB,EAAOE,SAoBvC,OAFAI,EAASyE,aAAeF,EAASjC,MAAM,MAAO,SAAUtC,EAASuD,WAAW,GAErEvD,GIlBwF0E,aLjBpF,WAAkC,IAAjCjF,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAC1CM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MACb,IAAK,oBACHD,EAAOE,UAAYI,EAASzB,MAAQmB,EAAOE,QAAQ8E,aAAanG,OAChE,MAEF,IAAK,eACHyB,EAASzB,MAAQmB,EAAOE,QACxB,MAEF,IAAK,eACHI,EAASzB,MAAM4C,KAAKzB,EAAOE,SAC3B,MAUF,IAAK,sBACHI,EAASzB,MAAMoG,SAAQ,SAAAC,GACrB,GAAIA,EAAKtE,KAAOZ,EAAOE,QAAQU,IAE7B,OADAsE,EAAKC,OAASnF,EAAOE,QAAQiF,QACtB,KAQf,OAFA7E,EAAS8E,SAAWP,EAASjC,MAAM,MAAO,SAAUtC,EAASzB,OAAO,GAE7DyB,GKnBwG+E,aNjBlG,WAAkC,IAAjCtF,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAC1CM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MACb,IAAK,oBACHD,EAAOE,UAAYI,EAASsD,MAAQ5D,EAAOE,QAAQmF,aAAazB,OAChE,MAEF,IAAK,eACH,IAAI0B,EAAShF,EAASN,EAAOuF,OAAOC,MAAK,SAAAC,GACvC,OAAOA,EAAK7E,KAAOZ,EAAOE,QAAQU,OAEpCN,EAASN,EAAOuF,OAAOjF,EAASN,EAAOuF,OAAO9C,QAAQ6C,IACpDtF,EAAOE,QACT,MAEF,IAAK,eACHI,EAASsD,MAAQ5D,EAAOE,QACxB,MAEF,IAAK,eACHI,EAASsD,MAAMnC,KAAKzB,EAAOE,SAmB/B,OAJAI,EAASa,KAAO0D,EAASjC,MAAM,OAAQ,OAAQtC,EAASsD,OAExD8B,QAAQC,IAAIrF,GAELA,GMvBsHsF,iBPhBhH,WAAkC,IAAjC7F,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAExCM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MAEX,IAAK,oBACDD,EAAOE,UAAYI,EAASqD,WAAa3D,EAAOE,QAAQ0F,iBAAiBjC,YACzE,MAEJ,IAAK,mBACD,IAAI2B,EAAShF,EAASN,EAAOuF,OAAOC,MAAK,SAACC,GACtC,OAAOA,EAAK7E,KAAOZ,EAAOE,QAAQU,OAEtCN,EAASN,EAAOuF,OAAOjF,EAASN,EAAOuF,OAAO9C,QAAQ6C,IAAWtF,EAAOE,QACxE,MAGJ,IAAK,oBACDI,EAASqD,WAAa3D,EAAOE,QAC7B,MAEJ,IAAK,mBACDI,EAASqD,WAAWlC,KAAKzB,EAAOE,SAChC,MAEJ,IAAK,4BACDI,EAASqD,WAAWsB,SAAQ,SAACY,GAEzB,GAAIA,EAASC,MAAQ9F,EAAOE,QAAQ4F,KAEhC,OADAD,EAASV,OAASnF,EAAOE,QAAQiF,QAC1B,KAavB,OAHA7E,EAASyF,UAAYlB,EAASjC,MAAM,QAAS,OAAQtC,EAASqD,YAGvDrD,GO5BsI0F,gBVvBlI,WAAkC,IAAjCjG,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAC1CM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MACb,IAAK,oBACHD,EAAOE,UACJI,EAASiD,UAAYvD,EAAOE,QAAQ8F,gBAAgBzC,WACvD,MAEF,IAAK,mBACH,IAAI+B,EAAShF,EAASN,EAAOuF,OAAOC,MAAK,SAAAC,GACvC,OAAOA,EAAK7E,KAAOZ,EAAOE,QAAQU,OAEpCN,EAASN,EAAOuF,OAAOjF,EAASN,EAAOuF,OAAO9C,QAAQ6C,IACpDtF,EAAOE,QACT,MAEF,IAAK,mBACHI,EAASiD,UAAYvD,EAAOE,QAC5B,MAEF,IAAK,mBACHI,EAASiD,UAAU9B,KAAKzB,EAAOE,SAC/B,MAEF,IAAK,0BACHI,EAASiD,UAAU0B,SAAQ,SAAAgB,GACzB,GAAIA,EAASrF,KAAOZ,EAAOE,QAAQU,IAEjC,OADAqF,EAASd,OAASnF,EAAOE,QAAQiF,QAC1B,KASf,OAFA7E,EAASa,KAAO0D,EAASjC,MAAM,OAAQ,OAAQtC,EAASiD,WAEjDjD,GUfyJ4F,gBXfnJ,WAAkC,IAAjCnG,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAExCM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MAEX,IAAK,oBACDD,EAAOE,UAAYI,EAASW,UAAYjB,EAAOE,QAAQgG,gBAAgBjF,WACvE,MAEJ,IAAK,mBACDX,EAASW,UAAYjB,EAAOE,QAC5B,MAEJ,IAAK,mBACD,IAAIoF,EAAShF,EAASN,EAAOuF,OAAOC,MAAK,SAACC,GAClC,OAAOA,EAAK7E,KAAOZ,EAAOE,QAAQU,OAE1CN,EAASN,EAAOuF,OAAOjF,EAASN,EAAOuF,OAAO9C,QAAQ6C,IAAWtF,EAAOE,QACxE,MAEJ,IAAK,mBACDI,EAASW,UAAUQ,KAAKzB,EAAOE,SAC/B,MAEJ,IAAK,0BACDI,EAASW,UAAUgE,SAAQ,SAACkB,GAExB,GAAIA,EAASvF,KAAOZ,EAAOE,QAAQU,IAE/B,OADAuF,EAAShB,OAASnF,EAAOE,QAAQiF,QAC1B,KAavB,OAHA7E,EAAS8F,aAAevB,EAASjC,MAAM,QAAQ,OAAQtC,EAASW,WAGzDX,GW5BwK+F,mBAAkBhG,gBAAeiG,eAAcC,gBTVnN,WAAkC,IAAjCxG,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAExCM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MAEX,IAAK,oBACDD,EAAOE,UAAYI,EAASkD,SAAWxD,EAAOE,QAAQqG,gBAAgB/C,UACtE,MAEJ,IAAK,kBACDlD,EAASkD,SAAWxD,EAAOE,QAC3B,MAEJ,IAAK,kBACD,IAAIoF,EAAShF,EAASN,EAAOuF,OAAOC,MAAK,SAACC,GACtC,OAAOA,EAAK7E,KAAOZ,EAAOE,QAAQU,OAEtCN,EAASN,EAAOuF,OAAOjF,EAASN,EAAOuF,OAAO9C,QAAQ6C,IAAWtF,EAAOE,QACxE,MAIJ,IAAK,kBACDI,EAASkD,SAAS/B,KAAKzB,EAAOE,SAE9B,MAEA,IAAK,yBACDI,EAASkD,SAASyB,SAAQ,SAACuB,GAEvB,GAAIA,EAAQ5F,KAAOZ,EAAOE,QAAQU,IAE9B,OADA4F,EAAQrB,OAASnF,EAAOE,QAAQiF,QACzB,KAWnB,OADA7E,EAASmG,YAAc5B,EAASjC,MAAM,MAAO,OAAQtC,EAASkD,UACvDlD,GSlCgOoG,YRqBpO,WAAkC,IAAjC3G,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAExCM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MAEX,IAAK,uBACDK,EAASmD,aAAezD,EAAOE,QAC/B,MAGJ,IAAK,oBACDF,EAAOE,UAAYI,EAASoD,MAAQ1D,EAAOE,QAAQwG,YAAYhD,OAC/D,MAEJ,IAAK,eACDpD,EAASoD,MAAQ1D,EAAOE,QACxB,MAGJ,IAAK,eACD,IAAIoF,EAAShF,EAASN,EAAOuF,OAAOC,MAAK,SAACC,GACtC,OAAOA,EAAK7E,KAAOZ,EAAOE,QAAQU,OAEtCN,EAASN,EAAOuF,OAAOjF,EAASN,EAAOuF,OAAO9C,QAAQ6C,IAAWtF,EAAOE,QACxE,MAEJ,IAAK,eACDI,EAASoD,MAAMjC,KAAKzB,EAAOE,SAC3B,MAEJ,IAAK,uBACDI,EAASoD,MAAMuB,SAAQ,SAACvE,GAEpB,GAAIA,EAAKE,KAAOZ,EAAOE,QAAQU,IAE3B,OADAF,EAAKyE,OAASnF,EAAOE,QAAQiF,QACtB,KAavB,OAHA7E,EAASqG,SAAW9B,EAASjC,MAAM,OAAQ,OAAQtC,EAASoD,OAGrDpD,GQtEqPsG,gBZhBjP,WAAkC,IAAjC7G,EAAgC,uDAAxBvB,EAAawB,EAAW,uCAExCM,EAAWC,KAAKC,MAAMD,KAAKE,UAAUV,IAEzC,OAAQC,EAAOC,MAEX,IAAK,mBACDK,EAASgD,UAAYtD,EAAOE,QAC5B,MAEJ,IAAK,kBACD,IAAIoF,EAAShF,EAASN,EAAOuF,OAAOC,MAAK,SAACC,GACtC,OAAOA,EAAK7E,KAAOZ,EAAOE,QAAQU,OAEtCN,EAASN,EAAOuF,OAAOjF,EAASN,EAAOuF,OAAO9C,QAAQ6C,IAAWtF,EAAOE,QACxE,MAEJ,IAAK,kBACDI,EAASgD,UAAU7B,KAAKzB,EAAOE,SAqBvC,OAHAI,EAASa,KAAO0D,EAASjC,MAAM,OAAO,OAAQtC,EAASgD,WAGhDhD,KYrBLuG,EAAmBC,YAAe5C,EAAeK,GAE1CR,EAAQgD,YAAYF,EAAkBG,YAAQC,IAAe,WAAf,EAAmB5C,KAC9E6C,OAAOnD,MAAQgD,YAAYF,GACFM,YAAapD,GAA/B,I,QCjCQqD,gB,kOCMTC,E,2MACJtH,MAAQ,CAENuH,MAAO,GAEPC,SAAU,I,EAEZC,YAAc,SAAAC,GACZ,EAAKC,SAAL,eACGD,EAAInC,OAAO7F,KAAOgI,EAAInC,OAAOqC,S,EAIlCC,WAAa,SAAAH,GACXA,EAAII,iBACJ,EAAKC,MAAMC,cAAc,EAAKhI,Q,wEAa9B,OAPEgC,KAAK+F,MAAM1H,aAAac,IACY,UAApCa,KAAK+F,MAAME,QAAQC,SAASC,MAE5BnG,KAAK+F,MAAME,QAAQvG,KAAK,cAKxB,yBAAK0G,UAAU,aAOb,yBAAKA,UAAU,aAAf,SAEA,0BAAMC,SAAUrG,KAAK6F,YACnB,2BACE3H,KAAK,QACLR,KAAK,QACL4I,SAAUtG,KAAKyF,YACfc,YAAY,UAEd,2BACErI,KAAK,WACLR,KAAK,WACL4I,SAAUtG,KAAKyF,YACfc,YAAY,aAEd,6BACE,4BAAQH,UAAU,WAAlB,gB,GApDQI,IAAMC,WAkEXC,eAAQ,SAAA1E,GACrB,O,yVAAO,IACFA,EAAM1D,kBATc,SAAAqI,GACzB,MAAO,CACLX,cAAe,SAAAY,GACbD,ECjE0B,SAACC,GAE/B,OADAjD,QAAQC,IAAIgD,GACL,SAAAD,GAELE,MAAM,SAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAAC,GACJE,aAAaC,QAAQ,QAASH,EAAKI,OACnC3D,QAAQC,IAAIsD,GACZP,ECrBa,SAACC,GACtB,MAAO,CACH1I,KCHiB,QDIjBC,QAASyI,GDkBIW,CAAoBL,IACzBA,EAAKvI,KAAKQ,IAEZ6C,EAAM2E,SAAS,CACbzI,KAAM,mBACNC,QAAS+I,EAAKN,KAAKrF,YAGrBS,EAAM2E,SAAS,CACbzI,KAAM,oBACNC,QAAS+I,EAAKN,KAAKhF,aAGrBI,EAAM2E,SAAS,CACbzI,KAAM,oBACNC,QAAS+I,EAAKN,KAAK1E,aAGrBF,EAAM2E,SAAS,CACbzI,KAAM,kBACNC,QAAS+I,EAAKN,KAAKnF,WAGrBO,EAAM2E,SAAS,CACbzI,KAAM,eACNC,QAAS+I,EAAKN,KAAK/E,QAIrBG,EAAM2E,SAAS,CACbzI,KAAM,mBACNC,QAAS+I,EAAKN,KAAK1H,YAGrB8C,EAAM2E,SAAS,CACbzI,KAAM,mBACNC,QAAS+I,EAAKN,KAAKpF,YAGrBQ,EAAM2E,SAAS,CACbzI,KAAM,mBACNC,QAAS+I,EAAKN,KAAKY,cAGrBxF,EAAM2E,SAAS,CACbzI,KAAM,kBACNC,QAAS+I,EAAKN,KAAK7E,WAGrBC,EAAM2E,SAAS,CACbzI,KAAM,eACNC,QAAS+I,EAAKN,KAAK9J,QAIrBkF,EAAM2E,SAAS,CACbzI,KAAM,eACNC,QAAS+I,EAAKN,KAAKjF,QAIrBK,EAAM2E,SAAS,CACbzI,KAAM,eACNC,QAAS+I,EAAKN,KAAK5E,QAGrBiE,EAAQvG,KAAK,cACbiE,QAAQC,IAAI,mBAGZD,QAAQC,IAAI,0BDtBPtB,CAA4BsE,QAI5BF,CAIQpB,G,8EIvEjBmC,G,2MACJC,SAAW,SAAAxJ,GACT,EAAK6H,MAAME,QAAQvG,KAAK,KAExBsC,EAAM2E,SAAS,CACbzI,KAAM,YACNC,QAASD,K,EAIbyJ,OAAS,WAAO,IACNC,EAAiB,EAAK7B,MAAtB6B,aACRjE,QAAQC,IAAIgE,GAFC,IAGLC,EAAgB,EAAK9B,MAArB8B,YACRlE,QAAQC,IAAIiE,GAJC,IAMLC,EAAkB,EAAK/B,MAAvB+B,cACAC,EAAqB,EAAKhC,MAA1BgC,iBACRpE,QAAQC,IAAImE,GARC,IASLC,EAAiB,EAAKjC,MAAtBiC,aACRrE,QAAQC,IAAIoE,GACQC,KAAZC,QAEN,kBAAC,KAAD,KACGL,EAAYM,KAAI,SAAAzE,GAAI,OACnB,kBAAC,KAAD,CAAMtB,IAAKsB,GACT,kBAAC,KAAK0E,KAAN,KAAY1E,QAQlB,kBAAC,KAAD,KACGoE,EAAcK,KAAI,SAAAzE,GAAI,OACrB,kBAAC,KAAD,CAAMtB,IAAKsB,GACT,kBAAC,KAAK0E,KAAN,KAAY1E,QAQlB,kBAAC,KAAD,MAQF,OACE,yBAAK0C,UAAU,UACb,kBAAC,KAAD,CAAKlI,KAAK,OAAOmK,QAAQ,UACvB,kBAAC,KAAD,CAAKC,KAAM,GACR,IACD,uBACElC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBC,KAAK,KAEJV,EAAiBnL,OAGtB,kBAAC,KAAD,CAAK0L,KAAM,EAAGI,QAAS,EAAKhB,SAASiB,KAAK,KAAM,aAC9C,uBACEvC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBC,KAAK,KAEJV,EAAiBlL,SAClB,kBAAC,KAAD,CAAMqB,KAAK,WAGf,kBAAC,KAAD,CAAKoK,KAAM,EAAGC,MAAO,CAAEC,MAAO,UAC3B,IACD,kBAAC,IAAD,CACEpC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBI,GAAG,UAEFb,EAAiBjL,QAGtB,kBAAC,KAAD,CAAKwL,KAAM,EAAGC,MAAO,CAAEC,MAAO,UAC5B,kBAAC,IAAD,CACEpC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBI,GAAG,cAEFb,EAAiBhL,WAItB,kBAAC,KAAD,CACEuL,KAAM,EACNI,QAAS,EAAKhB,SAASiB,KAAK,KAAM,aAClCJ,MAAO,CAAEC,MAAO,UAEhB,uBACEpC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBC,KAAK,KAEJV,EAAiB/K,UAClB,kBAAC,KAAD,CAAMkB,KAAK,WAGf,kBAAC,KAAD,CACEoK,KAAM,EACNI,QAAS,EAAKhB,SAASiB,KAAK,KAAM,YAClCJ,MAAO,CAAEC,MAAO,UAEhB,uBACEpC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBC,KAAK,KAHP,WAME,kBAAC,KAAD,CAAMvK,KAAK,WAGf,kBAAC,KAAD,CAAKoK,KAAM,GACT,kBAAC,IAAD,CACElC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBI,GAAG,aAEFb,EAAiB7K,SALpB,MAQF,kBAAC,KAAD,CAAKoL,KAAM,GACT,kBAAC,IAAD,CACElC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBI,GAAG,aAEFb,EAAiB3K,WAItB,kBAAC,KAAD,CAAKkL,KAAM,GACT,kBAAC,IAAD,CACElC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBI,GAAG,WAEFb,EAAiB1K,SAGtB,kBAAC,KAAD,CAAKiL,KAAM,GACT,uBACElC,UAAU,oBACVmC,MAAO,CAAEC,MAAO,SAChBC,KAAK,KAEJV,EAAiBzK,SAItB,kBAAC,KAAD,CAAKgL,KAAM,GACT,kBAAC,IAAD,CAAMM,GAAG,eAAeb,EAAiBxK,Y,6BAnKhCkJ,aAiMNoC,eAAWnC,aAVF,SAAA1I,GACtB,MAAO,CACL8K,KAAM9K,EAAMM,cACZsJ,aAAc5J,EAAMsG,iBAAiB7G,WACrCoK,YAAa7J,EAAMsG,iBAAiBzH,SACpCiL,cAAe9J,EAAMsG,iBAAiBtH,UACtCgL,aAAchK,EAAMsG,iBAAiByE,YACrChB,iBAAkB/J,EAAMsG,iBAAiB3H,qBAGnB+J,CAAyBe,KCpLpCuB,G,iLATP,OAAO,6BAEH,yBAAK5C,UAAU,6B,GAPFI,IAAMC,W,SCNhB,IACXjF,UAAW,CACPyH,UAAW,sBACXC,YAAa,wBACbC,QAAS,oBACTC,QAAS,oBACTC,MAAO,CACHC,aAAc,4CAGtBpH,WAAY,CACRiH,QAAS,sBACTC,QAAS,sBACTC,MAAO,CACHC,aAAc,uDAGtBtH,MAAO,CACHmH,QAAS,iBACTC,QAAS,iBACTC,MAAO,CACHC,aAAc,kDAGtBxM,MAAO,CACHyM,MAAO,oBACPH,QAAS,sBACTC,MAAO,CACHC,aAAc,iDAGtBE,SAAU,CACND,MAAO,wBACPH,QAAS,0BACTC,MAAO,CACHC,aAAc,iDAGtBG,KAAM,CACFR,UAAW,kBACXC,YAAa,oBAEbE,QAAS,gBACTC,MAAO,CACHK,aAAa,4BAIrB9H,WAAY,CACRqH,UAAW,sBACXC,YAAa,wBAEbE,QAAS,oBACTC,MAAO,CACHC,aAAc,4CAGtB7H,SAAU,CACNwH,UAAW,qBACXC,YAAa,uBACbC,QAAS,mBACTC,QAAS,mBACTC,MAAO,CACHC,aAAc,4CAGtBpK,UAAW,CACP+J,UAAW,sBACXC,YAAa,wBACbC,QAAS,oBACTC,QAAS,oBACTC,MAAO,CACHC,aAAc,6CAGtBvH,SAAU,CAGNoH,QAAS,mBACTC,QAAS,mBACTC,MAAO,CACHC,aAAc,4CAItB3H,MAAO,CACHsH,UAAW,kBACXC,YAAa,oBAEbE,QAAS,gBACTO,cAAc,kBACdN,MAAO,CACHO,mBAAmB,2CAI3BtK,QAAS,CACL2J,UAAW,qBACXC,YAAa,uBAEbE,QAAS,oBAKbC,MAAO,CACHQ,QAAS,KCrGF,YA+BIjD,GAEX,OAAO,SAACD,GAGJE,MAAM,wBAAyB,CAC3BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAAC7C,GAEFA,EAASvF,KACR8H,EAAS,CACLzI,KAAM0I,EAAK/H,IAAM,mBAAqB,mBACtCV,QAAQiG,EACRZ,MAAM,cAEV7D,IAAMC,QAAQkK,GAAS5K,UAAU0H,EAAK/H,IAAM,UAAY,aAExDc,IAAM0J,MAAMS,GAAS5K,UAAUmK,MAAMC,mB,qmBCnD7D,IA2Te5C,gBACb,SAAA1E,GACE,MAAO,CACL4E,KAAK,MAAM5E,EAAMmC,gBAAb,GAAiCnC,EAAM6C,qBAG/C,SAAA8B,GACE,MAAO,CACLoD,eADK,SACUnD,GACb,OAAOD,EAASqD,GAA0BpD,QATnCF,EA3TK,SAAAX,GAAU,IAAD,EACHkE,mBAAS,IAC/B7K,KAAM0D,EAASjC,MAAM,QAAS,OAAQkF,EAAMa,KAAK1H,YAC9C6G,EAAM3B,WAHgB,oBACtBpG,EADsB,KACf2H,EADe,KAM3B,SAASuE,EAAYxE,GACnB1H,EAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MAClCD,EAAS,MAAK3H,IA6FhB,OACE,yBAAKoI,UAAU,gBACb,yBACE+D,MAAM,gBACN5B,MAAO,CAAE,UAAW,KAAM6B,QAAS,QAASC,QAAS,MAEvD,yBACElL,GAAG,SACHgL,MAAM,wBACN5B,MAAO,CAAE6B,QAAS,UAElB,yBAAKD,MAAM,iBACT,yBAAK/D,UAAU,YAAf,gBAEA,yBAAKA,UAAU,cACb,kBAAC,KAAD,CAAOkE,MAAO,CAAEC,MAAO,KACvB,2BACEnE,UAAU,gBACVG,YAAY,gBACZX,MAAO5H,EAAMa,IAAMb,EAAMoB,KAAO2G,EAAMa,KAAKvC,aAC3CmG,UAAQ,EACRrL,GAAG,OACHjB,KAAK,OACLuM,UAAQ,IAGV,yBAAKrE,UAAU,OAEb,yBAAK+D,MAAM,sBACT,4BACEvE,MAAO5H,EAAMsB,QAAQT,IACrByH,SAAU4D,EACV/K,GAAG,UACHiH,UAAU,SACVqE,UAAQ,GAEP,CAAC,CAAE/M,KAAM,mBACPgN,OAAO3E,EAAMa,KAAKrF,WAClB4G,KAAI,SAAA7I,GACH,OACE,4BAAQsG,MAAOtG,EAAQT,KAAMS,EAAQ5B,WAQ/C,yBAAKyM,MAAM,sBACT,2BACEvE,MAAO5H,EAAMuB,MACb+G,SAAU4D,EACV3D,YAAY,QACZpH,GAAG,QACHjB,KAAK,SACLiM,MAAM,WACNM,UAAQ,MAMd,yBAAKrE,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAM2M,UACbrE,SAAU4D,EACV3D,YAAY,aACZpH,GAAG,YACHjB,KAAK,OACLiM,MAAM,WACNM,UAAQ,KAIZ,yBAAKN,MAAM,sBACT,2BACEvE,MAAO5H,EAAM4M,SACbtE,SAAU4D,EACV3D,YAAY,YACZpH,GAAG,WACHjB,KAAK,OACLiM,MAAM,WACNM,UAAQ,MAMd,yBAAKrE,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAMuH,MACbe,SAAU4D,EACV3D,YAAY,QACZpH,GAAG,QACHjB,KAAK,QACLiM,MAAM,WACNM,UAAQ,KAKZ,yBAAKN,MAAM,sBACT,4BACEvE,MAAO5H,EAAM6M,eACbvE,SAAU4D,EACV9D,UAAU,SACVjH,GAAG,iBACHsL,UAAQ,GAER,0CACA,wCACA,6CAKN,yBAAKrE,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAM8M,IACbxE,SAAU4D,EACV3D,YAAY,MACZpH,GAAG,MACHjB,KAAK,SACLiM,MAAM,WACNM,UAAQ,KAKZ,yBAAKN,MAAM,sBACT,4BACEvE,MAAO5H,EAAM+M,iBACbzE,SAAU4D,EACV9D,UAAU,SACVjH,GAAG,mBACHsL,UAAQ,GAER,4CACA,0CACA,yCACA,+CACA,uCACA,uDAKN,yBAAKrE,UAAU,OACb,yBAAK+D,MAAM,sBACT,8BACEvE,MAAO5H,EAAMwB,QACb8G,SAAU4D,EACV3D,YAAY,SACZpH,GAAG,UACHgL,MAAM,uBACNM,UAAQ,KAKZ,yBAAKN,MAAM,sBACT,2BACEvE,MAAO5H,EAAMgN,OACb1E,SAAU4D,EACV3D,YAAY,cACZpH,GAAG,SACHjB,KAAK,OACLiM,MAAM,WACNM,UAAQ,MAMd,yBAAKrE,UAAU,OACb,yBAAK+D,MAAM,sBACT,8BACEvE,MAAO5H,EAAMiN,SACb3E,SAAU4D,EACV3D,YAAY,WACZpH,GAAG,WACHgL,MAAM,uBACNM,UAAQ,QAOlB,yBAAKN,MAAM,gBACT,4BACE/D,UAAU,0CACVsC,QA7RV,WACE1K,EAAMoB,KAAOpB,EAAMa,IAAMb,EAAMoB,KAAO2G,EAAMa,KAAKvC,kBAKxB6G,IAApBlN,EAAM2M,WAA6C,KAAlB3M,EAAM2M,UAC1CQ,KAAM9B,MAAM,+BAAgC,CAC1C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEkBJ,IAAnBlN,EAAM4M,UAA2C,KAAjB5M,EAAM4M,SAChDO,KAAM9B,MAAM,oCAAqC,CAC/C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEeJ,IAAhBlN,EAAMuH,OAAqC,KAAdvH,EAAMuH,MAC7C4F,KAAM9B,MAAM,0CAA2C,CACrD+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAE4B,IAtB3B,wGAsBKC,KAAKvN,EAAMuH,OAC5B4F,KAAM9B,MAAM,mCAAoC,CAC9C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEwBJ,IAAzBlN,EAAM6M,gBAAuD,WAAvB7M,EAAM6M,eACtDM,KAAM9B,MAAM,kCAAmC,CAC7C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEaJ,IAAdlN,EAAM8M,KAAiC,KAAZ9M,EAAM8M,IAC3CK,KAAM9B,MAAM,mCAAoC,CAC9C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAE0BJ,IAA3BlN,EAAM+M,kBAA2D,aAAzB/M,EAAM+M,iBACxDI,KAAM9B,MAAM,oCAAqC,CAC/C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEiBJ,IAAlBlN,EAAMwB,SAAyC,KAAhBxB,EAAMwB,QAC/C2L,KAAM9B,MAAM,iCAAkC,CAC5C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEgBJ,IAAjBlN,EAAMgN,QAAuC,KAAfhN,EAAMgN,OAC9CG,KAAM9B,MAAM,wCAAyC,CACnD+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEkBJ,IAAnBlN,EAAMiN,UAA2C,KAAjBjN,EAAMiN,SAChDE,KAAM9B,MAAM,0BAA2B,CACrC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEeJ,IAAhBlN,EAAMuB,OAAqC,KAAdvB,EAAMuB,MAC7C4L,KAAM9B,MAAM,sCAAuC,CACjD+B,SAAU,YACVC,OAAQ,QACRC,QAAS,MAEqC,IAAtCE,OAAOC,KAAKzN,EAAMsB,SAAS6B,QAAgC,mBAAhBnD,EAAMsB,QAC3D6L,KAAM9B,MAAM,oCAAqC,CAC/C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAGXH,KAAMvL,QAAQ,sCAAuC,CACnDwL,SAAU,YACVC,OAAQ,QACRC,QAAS,MAGX3H,QAAQC,IAAI5F,GACZ+H,EAAMgE,eAAe/L,MAyMf,uBAAGmM,MAAM,mBAJX,QAMA,4BACE/D,UAAU,4CACVsC,QAAS,WAEP3C,EAAM2F,iBAAgB,KAGxB,uBAAGvB,MAAM,mBAPX,gB,oBC/SJwB,G,YAEJ,WAAY5F,GAAQ,IAAD,8BACjB,4CAAMA,KAOR/H,MAAQ,CACN4N,kBAAkB,EAClB1M,UAAW,EAAK6G,MAAMa,KAAK1H,WAR3B,EAAKlB,MAAQ,CACX6N,WAAY,EACZC,YAAa,IAJE,E,2HAyBFC,GACfpI,QAAQC,IAAR,yBAA8BmI,IAC9B/L,KAAK2F,SAAS,CAAEkG,WAAYE,M,+BAEpB,IAAD,OACHC,EAAkBhM,KAAKhC,MAAM6N,WAAa7L,KAAKhC,MAAM8N,YACrDG,EAAmBD,EAAkBhM,KAAKhC,MAAM8N,YAChDI,EAAoBlM,KAAK+F,MAAMa,KAAK1H,UAAUiN,MAChDF,EACAD,GAEF,OACE,6BAAS5F,UAAU,eAChBpG,KAAKhC,MAAM4N,iBACV,kBAAC,GAAD,CACExH,SAAUpE,KAAKhC,MAAMoO,eACrBV,gBAAiB,WACf,EAAK/F,SAAS,CACZiG,kBAAkB,OAItB,KACJ,yBAAKxF,UAAU,cACb,yBAAKiG,IAAI,2BACT,0CAEF,yBAAKjG,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEhL,GAAG,aACHjB,KAAK,OACLiM,MAAM,WACN7D,SAAUtG,KAAKsM,WAEjB,2BAAOlG,UAAU,iBAAiBmG,IAAI,cAAtC,sBAMJ,6BACE,+BACE,+BACE,4BACE,mCACA,oCACA,yCACA,uCACA,wBAAInG,UAAU,UAAd,SACA,wBAAIA,UAAU,UAAd,WACA,4BACGpG,KAAK+F,MAAMyG,YACV,yBACE9D,QAAS,WACP,EAAK/C,SAAS,CACZiG,kBAAkB,EAClBQ,eAAgB,CACd9M,QAAS,OAIf8G,UAAU,gBACViG,IAAI,4BAMd,+BACGH,EAAkB/D,KAAI,SAAC/D,EAAUqI,GAChC,OACE,4BACE,4BACE,2BAAIA,EAAI,IAEV,4BAAKrI,EAAShF,MACd,4BACGgF,EAASuG,UAAY,KAAOvG,EAASwG,UAAY,KAEpD,4BAAKxG,EAAS9E,QAAQ5B,MACtB,wBAAI0I,UAAU,UAAUhC,EAAS7E,OACjC,wBAAI6G,UAAU,UAAUhC,EAAS5E,SACjC,4BACA,yBAAKkN,MAAM,OAAOhE,QAAS,WACP,EAAK/C,SAAS,CACVyG,eAAgBhI,EAChBwH,kBAAkB,KAGxBxF,UAAU,eAAeiG,IAAI,sCAC7C,kBAAC,IAAD,CAAMzD,GAAI,oBAAsBxE,EAASvF,KACvC,yBAAKuH,UAAU,OAAOiG,IAAI,sCAS1C,gCACI,kBAAC,KAAD,CACER,WAAY7L,KAAKhC,MAAM6N,WACvBc,kBAAmBT,EAAkB/K,OACrCyL,gBAAiB5M,KAAK+F,MAAMa,KAAK1H,UAAUiC,OAC3C0L,mBAAoBX,EAAkB/K,OACtCmF,SAAU,SAAAyF,GAAU,OAAI,EAAKe,iBAAiBf,Y,GAtIrCvF,IAAMC,WA6IdC,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAM5E,EAAMmC,mBAFDuC,CAIZiF,ICnJY,YA2BC/E,GACZ,OAAO,SAAAD,GACLE,MAAM,uBAAwB,CAC5BC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAAxC,GACJd,QAAQC,IAAI,eAAgBa,GACxBA,EAAQ5F,KACV8H,EAAS,CACPzI,KAAM0I,EAAK/H,IAAM,kBAAoB,kBACrCV,QAASsG,EACTjB,MAAO,aAET7D,IAAMC,QAAQkK,GAASrI,SAASmF,EAAK/H,IAAM,UAAY,aAEvDc,IAAM0J,MAAMS,GAASrI,SAAS4H,MAAMC,mB,ikBC3C1CyD,G,2MAOJ/O,M,MAGK,EAAK+H,MAAMtB,S,EAGhByF,YAAc,SAAAxE,GACZ,EAAK1H,MAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MACtB,mBAAjBF,EAAInC,OAAOpE,IACT,EAAKnB,MAAMgP,OACV,EAAKhP,MAAMiP,OAAS,EAAKjP,MAAMgP,KAAOtH,EAAInC,OAAOqC,OACpD,EAAKD,SAAS,EAAK3H,Q,EAGrBkP,aAAe,WAEb,EAAKlP,MAAMoB,KAAO,EAAKpB,MAAMa,IACzB,EAAKb,MAAMoB,KACX,EAAK2G,MAAMa,KAAKlC,YAEpBf,QAAQC,IAAI,EAAK5F,MAAM8F,eACEoH,IAApB,EAAKlN,MAAMN,MAA4C,KAApB,EAAKM,MAAMN,KACjDyN,KAAM9B,MAAM,8BAA+B,CACzC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEmBJ,IAApB,EAAKlN,MAAMgP,MAA4C,KAApB,EAAKhP,MAAMgP,KACxD7B,KAAM9B,MAAM,+BAAgC,CAC1C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGoBJ,IAA/B,EAAKlN,MAAMmP,iBACoB,KAA/B,EAAKnP,MAAMmP,gBAEXhC,KAAM9B,MAAM,oCAAqC,CAC/C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGmBJ,IAA7B,EAAKlN,MAAMoP,eACkB,KAA7B,EAAKpP,MAAMoP,cAEZjC,KAAM9B,MAAM,iCAAkC,CAC5C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGkBJ,IAA5B,EAAKlN,MAAMqP,cACiB,KAA5B,EAAKrP,MAAMqP,aAEZlC,KAAM9B,MAAM,wCAAyC,CACnD+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGcJ,IAAxB,EAAKlN,MAAM8F,UACa,oBAAxB,EAAK9F,MAAM8F,SAEZqH,KAAM9B,MAAM,kCAAmC,CAC7C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGeJ,IAA1B,EAAKlN,MAAMsP,YACe,KAA1B,EAAKtP,MAAMsP,WAEXnC,KAAM9B,MAAM,mCAAoC,CAC9C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGeJ,IAA1B,EAAKlN,MAAMuP,YACe,KAA1B,EAAKvP,MAAMuP,WAEXpC,KAAM9B,MAAM,+BAAgC,CAC1C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGgBJ,IAA3B,EAAKlN,MAAMwP,aACgB,KAA3B,EAAKxP,MAAMwP,YAEXrC,KAAM9B,MAAM,+BAAgC,CAC1C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,MAGgC,IAA3CE,OAAOC,KAAK,EAAKzN,MAAMsB,SAAS6B,QACT,mBAAvB,EAAKnD,MAAMsB,QAEX6L,KAAM9B,MAAM,kCAAmC,CAC7C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAGXH,KAAMvL,QAAQ,iCAAkC,CAC9CwL,SAAU,YACVC,OAAQ,QACRC,QAAS,MAEX,EAAKvF,MAAM0H,eAAe,EAAKzP,S,wEAIzB,IAAD,OACP,OACE,yBAAKoI,UAAU,gBACb,yBACE+D,MAAM,gBACN5B,MAAO,CAAE,UAAW,KAAM6B,QAAS,QAASC,QAAS,MAEvD,yBACElL,GAAG,SACHgL,MAAM,QACN5B,MAAO,CACL6B,QAAS,QACT,aAAc,gBAOhB,yBAAKD,MAAM,iBACT,yBAAK/D,UAAU,YAAf,eACA,kBAAC,KAAD,CAAOkE,MAAO,CAAEC,MAAO,KAEvB,yBAAKnE,UAAU,cACb,2BACEA,UAAU,gBACVG,YAAY,eACZX,MACE5F,KAAKhC,MAAMa,IAAMmB,KAAKhC,MAAMoB,KAAOY,KAAK+F,MAAMa,KAAKlC,YAErD8F,UAAQ,EACRrL,GAAG,OACHjB,KAAK,SAGP,yBAAKkI,UAAU,OAEb,yBAAK+D,MAAM,sBACT,4BACEvE,MAAO5F,KAAKhC,MAAMsB,QAAQT,IAC1ByH,SAAUtG,KAAKkK,YACf/K,GAAG,UACHiH,UAAU,UAET,CAAC,CAAE1I,KAAM,mBACPgN,OAAO1K,KAAK+F,MAAMa,KAAKrF,WACvB4G,KAAI,SAAA7I,GACH,OACE,4BAAQsG,MAAOtG,EAAQT,KAAMS,EAAQ5B,WAQ/C,yBAAKyM,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMN,KAClB4I,SAAUtG,KAAKkK,YACf3D,YAAY,OACZpH,GAAG,OACHjB,KAAK,OACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMgP,KAClB1G,SAAUtG,KAAKkK,YACf3D,YAAY,OACZpH,GAAG,OACHjB,KAAK,SACLiM,MAAM,cAIV,yBAAKA,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMmP,gBAClB7G,SAAUtG,KAAKkK,YACf3D,YAAY,mBACZpH,GAAG,kBACHjB,KAAK,SACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMiP,OAClB1G,YAAY,SACZpH,GAAG,SACHjB,KAAK,SACLsM,UAAQ,KAKZ,yBAAKL,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMoP,cAClB9G,SAAUtG,KAAKkK,YACf3D,YAAY,iBACZpH,GAAG,gBACHjB,KAAK,SACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,4BACEvE,MAAO5F,KAAKhC,MAAMqP,aAClB/G,SAAUtG,KAAKkK,YACf9D,UAAU,SACVjH,GAAG,gBAEH,4BAAQyG,MAAM,QAAd,iBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,YAIJ,yBAAKuE,MAAM,sBACT,4BACEnM,MAAOgC,KAAKhC,MAAM8F,SAClBwC,SAAUtG,KAAKkK,YACf/K,GAAG,WACHiH,UAAU,UAET,CAAC,CAAE1I,KAAM,oBACPgN,OAAO1K,KAAK+F,MAAMa,KAAKhF,YACvBuG,KAAI,SAAArE,GACH,OACE,4BAAQ8B,MAAO9B,EAASjF,KAAMiF,EAASpG,YASnD,yBAAK0I,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMsP,WAClBhH,SAAUtG,KAAKkK,YACf3D,YAAY,WACZpH,GAAG,aACHjB,KAAK,SACLiM,MAAM,cAKV,yBAAKA,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMuP,WAClBjH,SAAUtG,KAAKkK,YACf3D,YAAY,cACZpH,GAAG,aACHjB,KAAK,SACLiM,MAAM,eAKZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,8BACEvE,MAAO5F,KAAKhC,MAAMwP,YAClBlH,SAAUtG,KAAKkK,YACf3D,YAAY,cACZpH,GAAG,cACHgL,MAAM,6BAMhB,yBAAKA,MAAM,gBACT,4BACE/D,UAAU,0CACVsC,QAAS1I,KAAKkN,cAEd,uBAAG/C,MAAM,mBAJX,QAMA,4BACE/D,UAAU,4CACVsC,QAAS,WAEP,EAAK3C,MAAM2H,gBAAe,KAG5B,uBAAGvD,MAAM,mBAPX,iB,GAhUa3D,IAAMC,WAuVhBC,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAK,MACA5E,EAAM6B,iBADP,GAEC7B,EAAMwC,gBAFP,GAGCxC,EAAM6C,qBAZY,SAAA8B,GACzB,MAAO,CACL8G,eAAgB,SAAA7G,GACdD,EAASgH,GAAiC/G,QAIjCF,CAQQqG,IClWjBa,G,YACC,WAAY7H,GACX,IAAD,8BACI,4CAAMA,KACF/H,MAAM,CACV6N,WAAY,EACZC,YAAa,GACb+B,cAAe,CACdvO,QAAS,GACTwE,SAAU,IAEdgK,iBAAiB,GATlB,E,8EAYiB/B,GAChBpI,QAAQC,IAAR,yBAA8BmI,IAC9B/L,KAAK2F,SAAS,CAAEkG,WAAYE,M,+BAGtB,IAAD,OAEDC,EAAkBhM,KAAKhC,MAAM6N,WAAa7L,KAAKhC,MAAM8N,YACrDG,EAAmBD,EAAkBhM,KAAKhC,MAAM8N,YAChDiC,EAAmB/N,KAAK+F,MAAMa,KAAKnF,SAAS0K,MAC9CF,EACAD,GAMF,OAAO,6BAAS5F,UAAU,eACrBpG,KAAKhC,MAAM8P,gBAAkB,kBAAC,GAAD,CAAYrJ,QAASzE,KAAKhC,MAAM6P,cAAeH,eAAgB,WACzF,EAAK/H,SAAS,CACVkI,cAAe,CACXvO,QAAS,GACTwE,SAAU,IAEdgK,iBAAiB,OAEjB,KACR,yBAAK1H,UAAU,cACX,yBAAKiG,IAAI,2BACT,yCAEJ,yBAAKjG,UAAU,OACX,yBAAK+D,MAAM,sBACP,2BAAO5D,YAAY,cAAcpH,GAAG,YAAYjB,KAAK,OAAOiM,MAAM,aAClE,2BAAO/D,UAAU,iBAAiBmG,IAAI,aAAtC,qBAIR,6BAEI,+BACI,+BACI,4BACI,wBAAInG,UAAU,SAAd,OACA,oCACA,wBAAIA,UAAU,UAAd,QACA,wCACA,oCACA,iDACA,sCACA,8CACA,mCACA,oCACA,4BAEI,yBAAKsC,QAAS,WAEV,EAAK/C,SAAS,CACVkI,cAAc,CACVvO,QAAS,GACTwE,SAAU,IAEdgK,iBAAgB,KAErB1H,UAAU,gBAAgBiG,IAAI,4BAK7C,+BAIKrM,KAAK+F,MAAMa,KAAKnF,SAAS0G,KAAI,SAAC1D,EAASgI,GACpC,OAAO,4BACH,wBAAIrG,UAAU,SAAQ,2BAAKqG,EAAI,IAC/B,4BAAKhI,EAAQrF,MACb,wBAAIgH,UAAU,UAAU3B,EAAQ/G,MAEhC,4BAAK+G,EAAQnF,QAAQ5B,MACrB,4BAAK+G,EAAQuI,MACb,4BAAKvI,EAAQ0I,iBACb,4BAAK1I,EAAQwI,QACb,4BAAKxI,EAAQ2I,eACb,4BAAK3I,EAAQ6I,YACb,4BAAK7I,EAAQxE,MACb,4BACA,yBAAKyM,MAAM,OAAOhE,QAAS,WACnB,EAAK/C,SAAS,CACVkI,cAAepJ,EACfqJ,iBAAiB,KAGvB1H,UAAU,eAAeiG,IAAI,sCAC/B,kBAAC,IAAD,CAAMzD,GAAI,oBAAsBnE,EAAQtF,IACpC,yBAAKiH,UAAU,OAAOiG,IAAI,sCAStD,gCACA,kBAAC,KAAD,CACER,WAAY7L,KAAKhC,MAAM6N,WACvBc,kBAAmBoB,EAAiB5M,OACpCyL,gBAAiB5M,KAAK+F,MAAMa,KAAKnF,SAASN,OAC1C0L,mBAAoBkB,EAAiB5M,OACrCmF,SAAU,SAAAyF,GAAU,OAAI,EAAKe,iBAAiBf,Y,GA5HtCvF,IAAMC,WAqITC,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAM5E,EAAMwC,mBAFLkC,CAIXkH,IC3IO,IA+BXI,cA/BW,SA+BGpH,GAEV,OAAO,SAACD,GAGJE,MAAM,wBAAyB,CAC3BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAAC3H,GAEFA,EAAQT,KACP8H,EAAS,CACLzI,KAAM0I,EAAK/H,IAAM,kBAAoB,kBACrCV,QAAQmB,EACRkE,MAAM,cAEV7D,IAAMC,QAAQkK,GAASxK,QAAQsH,EAAK/H,IAAM,UAAY,aAEtDc,IAAM0J,MAAMS,GAASxK,QAAQ+J,MAAMC,oB,6jBClD3D,IA2Ie5C,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAM5E,EAAM6C,oBATW,SAAA8B,GACzB,MAAO,CACLqH,cAAe,SAAApH,GACbD,EAASrE,GAAW0L,cAAcpH,QAIzBF,EA3II,SAAAX,GAAU,IAAD,EACFkE,mBAAS,MAE5BlE,EAAMzG,UAHe,oBACrBtB,EADqB,KACd2H,EADc,KAO1B,SAASuE,EAAYxE,GACnB1H,EAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MAClCD,EAAS,MAAK3H,IAsChB,OA1CA2F,QAAQC,IAAI5F,EAAMoB,MA2ChB,yBAAKgH,UAAU,gBACb,yBACE+D,MAAM,gBACN5B,MAAO,CAAE,UAAW,KAAM6B,QAAS,QAASC,QAAS,MAEvD,yBAAKlL,GAAG,SAASgL,MAAM,oBAAoB5B,MAAO,CAAE6B,QAAS,UAC3D,yBAAKD,MAAM,iBACT,yBAAK/D,UAAU,YAAf,eACA,kBAAC,KAAD,CAAOkE,MAAO,CAAEC,MAAO,KACvB,2BACEnE,UAAU,gBACVG,YAAY,eACZX,MAAO5H,EAAMa,IAAMb,EAAMoB,KAAO2G,EAAMa,KAAKxH,KAC3CoL,UAAQ,EACRrL,GAAG,OACHjB,KAAK,SAGP,yBAAKkI,UAAU,yCACb,yBAAKA,UAAU,OACb,yBAAK+D,MAAM,uBACT,2BACEvE,MAAO5H,EAAMN,KACb4I,SAAU4D,EACV3D,YAAY,eACZpH,GAAG,OACHjB,KAAK,OACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,uBACT,2BACEvE,MAAO5H,EAAMuB,MACb+G,SAAU4D,EACV3D,YAAY,gBACZpH,GAAG,QACHjB,KAAK,SACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,uBACT,2BACEvE,MAAO5H,EAAMwB,QACb8G,SAAU4D,EACV3D,YAAY,kBACZpH,GAAG,UACHjB,KAAK,OACLiM,MAAM,iBAOhB,yBAAKA,MAAM,gBACT,4BACE/D,UAAU,0CACVsC,QArGV,WACE1K,EAAMoB,KAAOpB,EAAMa,IAAMb,EAAMoB,KAAO2G,EAAMa,KAAKxH,UAE7B8L,IAAflN,EAAMN,MAAmC,KAAbM,EAAMN,KACrCyN,KAAM9B,MAAM,+BAAgC,CAC1C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEeJ,IAAhBlN,EAAMuB,OAAqC,KAAdvB,EAAMuB,MAC7C4L,KAAM9B,MAAM,sCAAuC,CACjD+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEiBJ,IAAlBlN,EAAMwB,SAAyC,KAAhBxB,EAAMwB,QAC/C2L,KAAM9B,MAAM,gCAAiC,CAC3C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAGXvF,EAAMiI,cAAchQ,GACpBmN,KAAMvL,QAAQ,iCAAkC,CAC9CwL,SAAU,YACVC,OAAQ,QACRC,QAAS,SA6EL,uBAAGnB,MAAM,mBAJX,QAMA,4BACE/D,UAAU,4CACVsC,QAAS,WAEP3C,EAAMkI,gBAAe,KAGvB,uBAAG9D,MAAM,mBAPX,gBCvHJ+D,G,YACA,WAAYnI,GACX,IAAD,8BACI,4CAAMA,KAUZoI,aAAe,SAAC7O,GAEZA,EAAQ8D,QAAU9D,EAAQ8D,OAC1B,EAAK2C,MAAMqI,YAAY9O,IAZ7B,EAAKtB,MAAQ,CACPqQ,cAAe,GACfC,iBAAiB,EACjBzC,WAAY,EACdC,YAAa,IANb,E,8EAiBeC,GACbpI,QAAQC,IAAR,yBAA8BmI,IAC9B/L,KAAK2F,SAAS,CAAEkG,WAAYE,M,+BAEtB,IAAD,OACDC,EAAkBhM,KAAKhC,MAAM6N,WAAa7L,KAAKhC,MAAM8N,YACzDG,EAAmBD,EAAkBhM,KAAKhC,MAAM8N,YAChDyC,EAAiBvO,KAAK+F,MAAMa,KAAKrF,UAAU4K,MAC7CF,EACAD,GAGE,OAAO,6BAAS5F,UAAU,eACrBpG,KAAKhC,MAAMsQ,gBAAkB,kBAAC,GAAD,CAAYhP,QAAWU,KAAKhC,MAAMqQ,cAAeJ,eAAgB,WAC3F,EAAKtI,SAAS,CACV0I,cAAc,GACdC,iBAAgB,OAEhB,KACR,yBAAKlI,UAAU,cACX,yBAAKiG,IAAI,2BACT,0CAEJ,yBAAKjG,UAAU,OACX,yBAAK+D,MAAM,sBACP,2BAAO5D,YAAY,cAAcpH,GAAG,aAAajB,KAAK,OAAOiM,MAAM,aACnE,2BAAO/D,UAAU,iBAAiBmG,IAAI,cAAtC,sBAIR,6BAEI,+BACI,+BACI,4BACI,mCACA,oCACA,oCACA,qCACA,wBAAInG,UAAU,UAAd,WACA,4BACI,yBAAKsC,QAAS,WACV,EAAK/C,SAAS,CAAC2I,iBAAgB,KAChClI,UAAU,gBAAgBiG,IAAI,4BAI7C,+BAEKkC,EAAgBpG,KAAI,SAAC7I,EAASmN,GAC3B,OAAO,4BACH,4BAAI,2BAAKA,EAAI,IACb,4BAAKnN,EAAQF,MACb,4BAAKE,EAAQ5B,MACb,4BAAK4B,EAAQC,OACb,wBAAI6G,UAAU,UAAU9G,EAAQE,SAChC,4BACI,yBAAKkN,MAAM,OAAOhE,QAAS,WACvB,EAAK/C,SAAS,CACV0I,cAAe/O,EACfgP,iBAAiB,KAGvBlI,UAAU,eAAeiG,IAAI,sCAC/B,4BAAQ3D,QAAS,EAAKyF,aAAaxF,KAAK,KAAMrJ,GAAU8G,UAAW9G,EAAQ8D,OAAS,cAAgB,4BAA6B9D,EAAQ8D,OAAS,aAAe,oBAYzL,gCACA,kBAAC,KAAD,CACEyI,WAAY7L,KAAKhC,MAAM6N,WACvBc,kBAAmB4B,EAAgBpN,OACnCyL,gBAAiB5M,KAAK+F,MAAMa,KAAKrF,UAAUJ,OAC3C0L,mBAAoB0B,EAAgBpN,OACpCmF,SAAU,SAAAyF,GAAU,OAAI,EAAKe,iBAAiBf,Y,GArGtCvF,IAAMC,WA+GbC,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAM5E,EAAM6C,oBAEjB,SAAC8B,GAEA,MAAO,CACHyH,YAAa,SAACI,GAEV7H,EAASrE,GAAW0L,cAAcQ,QAT/B9H,CAeZwH,ICjIY,YA+BItH,GAEX,OAAO,SAACD,GAGJE,MAAM,yBAA0B,CAC5BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAAC3H,GAEFA,EAAQT,KACP8H,EAAS,CACLzI,KAAK0I,EAAK/H,IAAM,mBAAqB,mBACrCV,QAAQmB,EACRkE,MAAM,eAEV7D,IAAMC,QAAQkK,GAASlI,WAAWgF,EAAK/H,IAAM,UAAY,aAEzDc,IAAM0J,MAAMS,GAASlI,WAAWyH,MAAMC,mB,6jBCnD9D,IA+Fe5C,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAM5E,EAAM6B,qBATW,SAAA8C,GACzB,MAAO,CACL8H,eAAgB,SAAA7H,GACdD,EAASrE,GAA0BsE,QAI1BF,EA/FK,SAAAX,GAAU,IAAD,EACHkE,mBAAS,MAC5BlE,EAAMjC,WAFgB,oBACtB9F,EADsB,KACf2H,EADe,KA+B3B,OA1BAhC,QAAQC,IAAI5F,EAAMoB,MA2BhB,yBAAKgH,UAAU,gBACb,yBACE+D,MAAM,gBACN5B,MAAO,CAAE,UAAW,KAAM6B,QAAS,QAASC,QAAS,MAEvD,yBAAKlL,GAAG,SAASgL,MAAM,oBAAoB5B,MAAO,CAAE6B,QAAS,UAC3D,yBAAKD,MAAM,iBACT,yBAAK/D,UAAU,YAAf,eACA,kBAAC,KAAD,CAAOkE,MAAO,CAAEC,MAAO,KACvB,yBAAKnE,UAAU,yCACb,2BACEA,UAAU,gBACVG,YAAY,gBACZX,MAAO5H,EAAMa,IAAMb,EAAMoB,KAAO2G,EAAMa,KAAK5C,UAC3CwG,UAAQ,EACRrL,GAAG,OACHjB,KAAK,SAGP,yBAAKkI,UAAU,OACb,yBAAK+D,MAAM,uBACT,2BACEvE,MAAO5H,EAAMN,KACb4I,SAhDhB,SAAqBZ,GACnB1H,EAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MAClCD,EAAS,MAAK3H,KA+CAuI,YAAY,OACZpH,GAAG,OACHjB,KAAK,OACLiM,MAAM,iBAOhB,yBAAKA,MAAM,gBACT,4BACE/D,UAAU,0CACVsC,QAzDV,WACE1K,EAAMoB,KAAOpB,EAAMa,IAAMb,EAAMoB,KAAO2G,EAAMa,KAAK5C,UAE9B,KAAfhG,EAAMN,KACRyN,KAAM9B,MAAM,yBAA0B,CACpC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAGXH,KAAMvL,QAAQ,mCAAoC,CAChDwL,SAAU,YACVC,OAAQ,QACRC,QAAS,MAEXvF,EAAM0I,eAAezQ,MA4Cf,uBAAGmM,MAAM,mBAJX,QAMA,4BACE/D,UAAU,4CACVsC,QAAS,WAEP3C,EAAM2I,iBAAgB,KAGxB,uBAAGvE,MAAM,mBAPX,gBC1EJwE,G,YAGF,WAAY5I,GAAQ,IAAD,8BACf,4CAAMA,KAYVoI,aAAe,SAAC7O,GAEZA,EAAQ8D,QAAU9D,EAAQ8D,OAC1B,EAAK2C,MAAMqI,YAAY9O,IAhBR,EAwBnBqI,OAAS,WACL,IAAIqE,EAAkB,EAAKhO,MAAM6N,WAAa,EAAK7N,MAAM8N,YACrDG,EAAmBD,EAAkB,EAAKhO,MAAM8N,YAChD8C,EAAqB,EAAK7I,MAAMa,KAAKhF,WAAWuK,MAClDF,EACAD,GAGF,OAAO,6BAAS5F,UAAU,eACrB,EAAKpI,MAAM6Q,iBAAmB,kBAAC,GAAD,CAAa/K,SAAU,EAAK9F,MAAM8Q,eAAgBJ,gBAAiB,WAC9F,EAAK/I,SAAS,CACVkJ,kBAAiB,EACjBC,eAAe,CACXpR,KAAK,SAGT,KACR,yBAAK0I,UAAU,cACX,yBAAKiG,IAAI,2BACT,2CAEJ,yBAAKjG,UAAU,OACX,yBAAK+D,MAAM,sBACP,2BAAO5D,YAAY,cAAcpH,GAAG,aAAajB,KAAK,OAAOiM,MAAM,aACnE,2BAAO/D,UAAU,iBAAiBmG,IAAI,cAAtC,sBAIR,6BAEI,+BACI,+BACI,4BACI,mCACA,oCACA,0CACA,4BACI,yBAAK7D,QAAS,WAEV,EAAK/C,SAAS,CACVkJ,kBAAiB,KAEtBzI,UAAU,gBAAgBiG,IAAI,4BAI7C,+BAEKuC,EAAmBzG,KAAI,SAAC7I,EAASmN,GAC9B,OAAO,4BACH,4BAAI,2BAAKA,EAAI,IACb,4BAAKnN,EAAQF,MACb,4BAAKE,EAAQ5B,MACb,4BACI,yBAAKgP,MAAM,OAAOhE,QAAS,WACvB,EAAK/C,SAAS,CACVmJ,eAAgBxP,EAChBuP,kBAAkB,KAGxBzI,UAAU,eAAeiG,IAAI,sCAC/B,4BAAQ3D,QAAS,EAAKyF,aAAaxF,KAAK,KAAMrJ,GAAU8G,UAAW9G,EAAQ8D,OAAS,cAAgB,4BAApG,sBAYxB,gCACA,kBAAC,KAAD,CACEyI,WAAY,EAAK7N,MAAM6N,WACvBc,kBAAmBiC,EAAmBzN,OACtCyL,gBAAiB,EAAK7G,MAAMa,KAAKhF,WAAWT,OAC5C0L,mBAAoB+B,EAAmBzN,OACvCmF,SAAU,SAAAyF,GAAU,OAAI,EAAKe,iBAAiBf,SArGpD,EAAK/N,MAAQ,CACX6N,WAAY,EACZC,YAAa,GACbgD,eAAgB,CACdpR,KAAM,IAEVmR,kBAAkB,GARH,E,8EAmBF9C,GACbpI,QAAQC,IAAR,yBAA8BmI,IAC9B/L,KAAK2F,SAAS,CAAEkG,WAAYE,Q,GAxBbvF,IAAMC,WAoHdC,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAM5E,EAAM6B,qBAEjB,SAAC8C,GAEA,MAAO,CACHyH,YAAa,SAACI,GAEV7H,EAASrE,GAAWyM,mBAAmBP,QATpC9H,CAeZiI,ICtIY,YAEK/H,GAEZ,OAAO,SAACD,GAEJE,MAAM,yBAA0B,CAC5BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAACwC,GAEFA,EAAK5K,KACJ8H,EAAS,CACLzI,KAAK,eACLC,QAAQsL,IAEZ9J,IAAMC,QAAQkK,GAASL,KAAKL,UAE5BzJ,IAAM0J,MAAMS,GAASL,KAAKJ,MAAMK,mBAxBzC,YAgCA9C,GAEP,OAAO,SAACD,GAGJE,MAAM,oBAAqB,CACvBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAACwC,GAEFA,EAAK5K,KACJ8H,EAAS,CACLzI,KAAM0I,EAAK/H,IAAM,eAAiB,eAClCV,QAAQsL,EACRjG,MAAM,UAEV7D,IAAMC,QAAQkK,GAASL,KAAK7C,EAAK/H,IAAM,UAAY,aAEnDc,IAAM0J,MAAMS,GAASL,KAAKJ,MAAMC,mB,6jBCpDxD,IAiGe5C,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAM5E,EAAMsB,iBATW,SAAAqD,GACzB,MAAO,CACLqI,WAAY,SAAApI,GACVD,EAASrE,GAAsBsE,QAItBF,EAjGC,SAAAX,GAAU,IAAD,EACCkE,mBAAS,IAC/B7K,KAAM0D,EAASjC,MAAM,OAAQ,OAAQkF,EAAMa,KAAK/E,QAC7CkE,EAAM0D,OAHY,oBAClBzL,EADkB,KACX2H,EADW,KAiCvB,OA5BAhC,QAAQC,IAAI5F,EAAMoB,MA6BhB,yBAAKgH,UAAU,YACb,yBACE+D,MAAM,gBACN5B,MAAO,CAAE,UAAW,KAAM6B,QAAS,QAASC,QAAS,MAEvD,yBAAKlL,GAAG,SAASgL,MAAM,oBAAoB5B,MAAO,CAAE6B,QAAS,UAC3D,yBAAKD,MAAM,iBACT,yBAAK/D,UAAU,YAAf,YACA,kBAAC,KAAD,CAAOkE,MAAO,CAAEC,MAAO,KACvB,yBAAKnE,UAAU,yCACb,2BACEA,UAAU,gBACVG,YAAY,YACZX,MAAOG,EAAMa,KAAKxH,KAClBoL,UAAQ,EACRrL,GAAG,OACHjB,KAAK,SAGP,yBAAKkI,UAAU,OACb,yBAAK+D,MAAM,uBACT,2BACEvE,MAAO5H,EAAMN,KACb4I,SAlDhB,SAAqBZ,GACnB1H,EAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MAClCD,EAAS,MAAK3H,KAiDAuI,YAAY,OACZpH,GAAG,OACHjB,KAAK,OACLiM,MAAM,iBAOhB,yBAAKA,MAAM,gBACT,4BACE/D,UAAU,0CACVsC,QA3DV,WACE1K,EAAMoB,KAAO2G,EAAMa,KAAKxH,UAGL8L,IAAflN,EAAMN,MAAqC,KAAfM,EAAMN,KACpCyN,KAAM9B,MAAM,uBAAwB,CAClC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAGXH,KAAMvL,QAAQ,iCAAkC,CAC9CwL,SAAU,YACVC,OAAQ,QACRC,QAAS,MAGXvF,EAAMiJ,WAAWhR,MA4CX,uBAAGmM,MAAM,mBAJX,QAMA,4BACE/D,UAAU,4CACVsC,QAAS,WAEP3C,EAAMkJ,aAAY,KAGpB,uBAAG9E,MAAM,mBAPX,gBC5EJ+E,G,YAEJ,WAAYnJ,GAAQ,IAAD,8BACjB,4CAAMA,KAOR/H,MAAQ,CACNmR,WAAY,GACZC,cAAc,GAVG,EAiBnBjB,aAAe,SAAA7O,GACbA,EAAQ8D,QAAU9D,EAAQ8D,OAC1B,EAAK2C,MAAMqI,YAAY9O,IAjBvB,EAAKtB,MAAQ,CACX6N,WAAY,EACZC,YAAa,IAJE,E,8EAYFC,GACfpI,QAAQC,IAAR,yBAA8BmI,IAC9B/L,KAAK2F,SAAS,CAAEkG,WAAYE,M,+BAOpB,IAAD,OAEHC,EAAkBhM,KAAKhC,MAAM6N,WAAa7L,KAAKhC,MAAM8N,YACrDG,EAAmBD,EAAkBhM,KAAKhC,MAAM8N,YAChDuD,EAAmBrP,KAAK+F,MAAMa,KAAK/E,MAAMsK,MAC3CF,EACAD,GAEF,OACE,6BAAS5F,UAAU,eAChBpG,KAAKhC,MAAMoR,aACV,kBAAC,GAAD,CACE3F,KAAMzJ,KAAKhC,MAAMmR,WACjBF,YAAa,WACX,EAAKtJ,SAAS,CACZyJ,cAAc,OAIlB,KACJ,yBAAKhJ,UAAU,cACb,yBAAKiG,IAAI,2BACT,sCAEF,yBAAKjG,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACE5D,YAAY,cACZpH,GAAG,aACHjB,KAAK,OACLiM,MAAM,aAER,2BAAO/D,UAAU,iBAAiBmG,IAAI,cAAtC,kBAMJ,6BACE,+BACE,+BACE,8BACA,4BACE,mCACA,oCACA,wBAAInG,UAAU,UAAd,QACA,wBAAIA,UAAU,UAAd,gBACA,4BACE,yBACEsC,QAAS,WAEP,EAAK/C,SAAS,CACZwJ,WAAY,GACZC,cAAc,KAGlBhJ,UAAU,gBACViG,IAAI,4BAKZ,+BACGgD,EAAiBlH,KAAI,SAACsB,EAAMgD,GAC3B,OACE,4BACE,4BACE,2BAAIA,EAAI,IAEV,4BAAKhD,EAAKrK,MACV,wBAAIgH,UAAU,UAAUqD,EAAK/L,MAC7B,wBAAI0I,UAAU,UACX,IAAInH,KAAKwK,EAAK6F,aAAaC,gBAE9B,4BACE,yBACE7C,MAAM,OACNhE,QAAS,WACP,EAAK/C,SAAS,CACZwJ,WAAY1F,EACZ2F,cAAc,KAGlBhJ,UAAU,eACViG,IAAI,sCAEN,4BACE3D,QAAS,EAAKyF,aAAaxF,KAAK,KAAMc,GACtCrD,UACEqD,EAAKrG,OACD,cACA,4BAGLqG,EAAKrG,OAAS,WAAa,qBAe1C,gCACE,kBAAC,KAAD,CACEyI,WAAY7L,KAAKhC,MAAM6N,WACvBc,kBAAmB0C,EAAiBlO,OACpCyL,gBAAiB5M,KAAK+F,MAAMa,KAAK/E,MAAMV,OACvC0L,mBAAoBwC,EAAiBlO,OACrCmF,SAAU,SAAAyF,GAAU,OAAI,EAAKe,iBAAiBf,a,GA1IzCvF,IAAMC,WAmJVC,gBACb,SAAA1E,GACE,MAAO,CACL4E,KAAM5E,EAAMsB,iBAGhB,SAAAqD,GACE,MAAO,CACLyH,YAAa,SAAAI,GACX7H,EAASrE,GAA2BkM,QAT7B9H,CAabwI,I,QCnKa,YACItI,GAEX,OAAO,SAACD,GAGJE,MAAM,yBAA0B,CAC5BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAAC/E,GAEFA,EAAWrD,KACV8H,EAAS,CACLzI,KAAK0I,EAAK/H,IAAM,qBAAuB,qBACvCV,QAAQ+D,EACRsB,MAAM,eAEV7D,IAAMC,QAAQkK,GAAS5H,WAAW0E,EAAK/H,IAAM,UAAY,aAEzDc,IAAM0J,MAAMS,GAAS5H,WAAWmH,MAAMC,mB,6BCzB/C,SAASkG,GAASzJ,GAC7B,OACE,kBAAC0J,GAAA,EAAD,CACAnJ,SAAYP,EAAMO,SAChBnH,GAAG,iBACHuQ,QAAS3J,EAAMa,KACf+I,eAAgB,SAAAC,GAAM,OAAIA,EAAO7J,EAAM8J,WACvCtH,MAAO,CAAEuH,MAAO,KAChBC,YAAa,SAAAC,GAAM,OACjB,kBAACC,GAAA,EAAD,iBAAeD,EAAf,CAAuBE,MAAOnK,EAAMQ,YAAa4J,QAAQ,WAAWC,WAAS,QAOrF,I,iqBCEF,SAASC,GAAStK,GAAQ,IACduK,EAAqCvK,EAArCuK,SAAU1K,EAA2BG,EAA3BH,MAAO2K,EAAoBxK,EAApBwK,MAAUC,EADd,aACwBzK,EADxB,8BAGrB,OACI,kBAAC0K,GAAA,EAAD,eACIC,UAAU,MACVC,KAAK,WACLC,OAAQhL,IAAU2K,EAClBpR,GAAE,0BAAqBoR,GACvBM,kBAAA,qBAA+BN,IAC3BC,GAEJ,kBAACM,GAAA,EAAD,CAAKC,EAAG,GAAIT,IAYxB,SAASU,GAAUT,GACf,MAAO,CACHpR,GAAI,cAAgBoR,EACpB,gBAAiB,mBAAqBA,GAI5BU,cAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,EACVC,gBAAiBH,EAAMI,QAAQC,WAAWC,WAHlD,IAOMC,G,YA4DF,WAAY1L,GAAQ,IAAD,uBACf,+CA3DJ/H,MAAQ,CACJ0T,SAAU,GACVC,aAAa,GACbzP,WAAY,GACZ0P,MAAO,EACPrR,OAAQ,IAAItB,MAAQ2B,WAAa,GAqDlB,EAjDnBiR,aAAe,SAACC,EAAOC,GAEnB,EAAKpM,SAAS,CACViM,MAAOG,KA8CI,EAzCnBC,oBAAsB,SAACxD,GAEnB3H,MAAM,sBAAuB,CACzBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAU,CAEjBC,KAAM6P,EAAKmD,cAAgB,EAAK3T,MAAM2T,aAAa9S,IACnD0B,MAAOiO,EAAKjO,OAAS,EAAKvC,MAAMuC,UAGrC0G,MAAK,SAACC,GAAD,OAAUA,EAAKC,UAAQF,MAAK,SAACC,GACjC,EAAKvB,SAAS,CAAE+L,SAAUxK,QA2Bf,EArBnB+K,kBAAoB,aAqBD,EANnBC,oBAAsB,SAACC,EAAUC,GAE7BzO,QAAQC,IAAI,IACZ,EAAK5F,MAAMkE,WAAaiQ,EAASvL,KAAK1E,YAGvB,EA4BnBmQ,eAAiB,SAAC3M,GAGd,IAAI1G,EAAO,IAAIC,KAEf,GAAI,EAAKjB,MAAMkE,WAAWuB,MAAK,SAACvB,GAC5B,OAAOA,EAAWvD,MAAQ+G,EAAInC,OAAOqC,SAErC,OAAOjG,IAAM2S,KAAK,6BAGtB,EAAKvM,MAAMsM,eAAe,CACtBpS,KAAMjB,EAAKuT,qBACX5T,KAAM+G,EAAInC,OAAOqC,MACjB5G,KAAMA,EAAKwT,UACXjS,MAAOvB,EAAK4B,WACZ6R,KAAMzT,EAAK0T,iBA5CA,EAiDnBxI,YAAc,aA9CV,EAAKlM,MAAM2D,MAAQoE,EAAMa,KAAKjF,MAG9B,IAAIgR,EAAU,IAAI1T,KANH,OAQf4H,MAAM,sBAAuB,CACzBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAU,CACjBM,KAAM2T,EAAQH,UACdjS,MAAOoS,EAAQ/R,WACf6R,KAAME,EAAQD,kBAGpBzL,MAAK,SAACC,GAAD,OAAUA,EAAKC,UAAQF,MAAK,SAAC/E,GAEhC,EAAKyD,SAAS,CACVzD,WAAYA,OAtBL,E,sEAqDT,IAAD,OAEDlD,EAAO,IAAIC,KACX2T,EAAc,IAAI3T,KAAKe,KAAKhC,MAAMuC,MAAOvB,EAAK0T,cAAe,GAAGF,UAEhEK,GAA0F,GAA3E7S,KAAK+F,MAAMa,KAAK5E,MAAMC,QAAQvB,QAAQoS,EAAU7S,KAAKC,WAAWlB,IAEnF,OAAO,6BAASoH,UAAU,eAEtB,yBAAKA,UAAU,cACX,yBAAKiG,IAAI,2BACT,2CAGJ,kBAAC0G,GAAA,EAAD,CAAQ3H,SAAS,UACb,kBAAC4H,GAAA,EAAD,CAAMpN,MAAO5F,KAAKhC,MAAM4T,MAAOtL,SAAUtG,KAAK6R,aAAcoB,aAAW,uBACnE,kBAACC,GAAA,EAAD,eAAKhD,MAAM,sBAAyBc,GAAU,KAC9C,kBAACkC,GAAA,EAAD,eAAKhD,MAAM,mBAAsBc,GAAU,OAKnD,kBAACX,GAAD,CAAUzK,MAAO5F,KAAKhC,MAAM4T,MAAOrB,MAAO,GAErCsC,EACG,oCACI,yBAAKzM,UAAU,OAEX,yBAAK+D,MAAM,sBAEP,kBAAC,GAAD,CAAc0F,SAAS,WACnBvJ,SAAU,SAACZ,EAAK/G,GACZA,GAAQ,EAAK0T,eAAe,CACxB9O,OAAQ,CACJpE,GAAI,OACJyG,MAAOjH,EAAKE,QAIxB+H,KACI5G,KAAK+F,MAAMa,KAAKjF,MAClB4E,YAAY,mBAM1B,+BACI,+BACI,4BACI,mCACA,oCACA,6CACA,wCAGR,+BAEKvG,KAAK+F,MAAMa,KAAKjF,MAAMwG,KAAI,SAACxJ,EAAM8N,GAE9B,IAAIvK,EAAa,EAAKlE,MAAMkE,WAAWuB,MAAK,SAACvB,GACzC,OAAOA,EAAWvD,MAAQA,EAAKE,OAGnC,OAAO,4BACH,4BAAI,2BAAK4N,EAAI,IACb,4BAAK9N,EAAKU,UACV,6BAAM6C,GAAc,IAAIjC,MACxB,4BAEWiC,EAAa,yBAAKkE,UAAU,iBAAf,WAA+C,yBAAKA,UAAU,iBAAf,kBAWzF,yBAAKiG,IAAI,2BAA2BjG,UAAU,yBAIxD,kBAACiK,GAAD,CAAUzK,MAAO5F,KAAKhC,MAAM4T,MAAOrB,MAAO,GAEtC,yBAAKnK,UAAU,OAEX,yBAAK+D,MAAM,sBAEP,kBAAC,GAAD,CAAc0F,SAAS,WACnBvJ,SAAU,SAACZ,EAAK/G,GACZ,EAAKgH,SAAS,CACVgM,aAAchT,IAEd,EAAKX,MAAMuC,OACX,EAAKyR,oBAAoB,CAACL,aAAahT,KAG/CiI,KACI5G,KAAK+F,MAAMa,KAAKjF,MAClB4E,YAAY,iBAGtB,yBAAK4D,MAAM,sBAEP,kBAACgJ,GAAA,EAAD,CAAa/M,UAAU,aAAamC,MAAO,CAAE6K,SAAU,MACnD,kBAACC,GAAA,EAAD,CAAYlU,GAAG,4BAAf,gBACA,kBAACmU,GAAA,EAAD,CAEIC,QAAQ,2BACRpU,GAAG,qBACHyG,MAAO5F,KAAKhC,MAAMuC,MAClB+F,SAAU,SAACZ,EAAKkB,GAEZ,EAAKjB,SAAS,CAAEpF,MAAOmF,EAAInC,OAAOqC,QAE9B,EAAK5H,MAAM2T,cACX,EAAKK,oBAAoB,CAACzR,MAAOmF,EAAInC,OAAOqC,UAKpD,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,WACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,YACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,SACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,SACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,SACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,OACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,QACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,QACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,UACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,aACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,GAAjB,WACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,IAAjB,YACA,kBAAC4N,GAAA,EAAD,CAAU5N,MAAO,IAAjB,gBAShB,+BACI,+BACI,4BAEI,oCACA,6CACA,wCAGR,+BAEKkN,EAAUjT,SAAS,EAAG+S,GAAazK,KAAI,SAACnJ,EAAMyN,GAE3C,IAAIvK,EAAa,EAAKlE,MAAM0T,SAASjO,MAAK,SAACvB,GACvC,OAAOA,EAAWlD,MAAQA,GAAQkD,EAAWvD,MAAQ,EAAKX,MAAM2T,aAAa9S,OAGjF,OAAO,4BAEH,4BAAKG,GACL,6BAAMkD,GAAc,IAAIjC,MACxB,4BAEWiC,EAAa,yBAAKkE,UAAU,iBAAf,WAA+C,yBAAKA,UAAU,iBAAf,uB,GAzR9EI,IAAMC,WA2ShBC,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAK,MACE5E,EAAMW,aADT,GAEGX,EAAM2C,YAFT,GAGG3C,EAAMU,uBAGlB,SAACiE,GAEA,MAAO,CACH0L,eAAgB,SAACzL,GAEbD,EAASrE,GAA0BsE,QAbhCF,CAkBZ+K,I,SCvXY,YACD7K,GACV,OAAO,SAAAD,GACLE,MAAM,oBAAqB,CACzBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAAwM,GACJ9P,QAAQC,IAAI,gBAAiB6P,GAE7B9M,EAAS,CACPzI,KAAM0I,EAAK/H,IAAM,oBAAsB,gBACvCV,QAASsV,IAEX9T,IAAMC,QAAQkK,GAAS9H,MAAM4E,EAAK/H,IAAM,UAAY,iB,8lBCPxD6U,G,2MACJ1V,M,IACEiE,QAAS,IACN,EAAK8D,MAAMa,KAAK5E,O,EAGrBiQ,kBAAoB,WAClB,IAAI0B,EAAI,gBAER,EAAK1R,QAAU,EAAK8D,MAAMa,KAAK5E,MAAMC,QAErCkD,OAAOyO,EAAE,EAAKC,KAAKC,SAASC,MAAM,CAChCnN,MAAO,EAAKb,MAAMa,KAAK5E,MAAMC,SAAW,IAAIkG,KAAI,SAAAzE,GAC9C,MAAO,CAAEsQ,IAAKtQ,MAEhBuQ,UAJgC,SAItBC,GACRP,EAAK1R,QAAUjC,KAAKmU,UAAUhM,KAAI,SAAA+L,GAChC,OAAOA,EAAKF,QAKhBI,aAXgC,SAWnBF,GACXP,EAAK1R,QAAUjC,KAAKmU,UAAUhM,KAAI,SAAA+L,GAChC,OAAOA,EAAKF,QAGhBK,oBAAqB,CACnBF,UAAW,EAAKpO,MAAMa,KAAK5E,MAAMC,QAEjC2E,KAAM,CACJ0N,OAAQ,KACRC,OAAQ,KACRC,QAAS,KACTC,UAAW,KACXC,SAAU,KACVC,OAAQ,KACRC,SAAU,MAEZrK,MAAOsK,IACPC,UAAW,M,EASjB5K,YAAc,SAAAxE,GACZA,EAAInC,OACC,EAAKvF,MAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MACvC,EAAK5H,MAAM0H,EAAIhI,MAAQgI,EAAIkB,KAChC,EAAKjB,SAAL,MAAmB,EAAK3H,S,EAG1B+W,mBAAqB,SAACC,EAAUC,GAE9B,EAAKjX,MAAMa,IAAM,EAAKkH,MAAMa,KAAK5E,MAAMnD,K,EAGzCqW,UAAY,WACV,EAAKlX,MAAMiE,QAAU,EAAKA,QAE1B0B,QAAQC,IAAI,EAAK5F,MAAMN,WAGFwN,IAAlB,EAAKlN,MAAMN,MAAsC,KAAlB,EAAKM,MAAMN,KAE7CyN,KAAM9B,MAAM,uBAAwB,CAClC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAIgBJ,IAAnB,EAAKlN,MAAMuB,OAAwC,KAAnB,EAAKvB,MAAMuB,MAGnD4L,KAAM9B,MAAM,+BAAgC,CAC1C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEkBJ,IAAnB,EAAKlN,MAAMuH,OAAwC,KAAnB,EAAKvH,MAAMuH,MAGrD4F,KAAM9B,MAAM,iCAAkC,CAC5C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAIgC,IA7B7B,wGA6BEC,KAAK,EAAKvN,MAAMuH,OAChC4F,KAAM9B,MAAM,kCAAmC,CAC7C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGkBJ,IAArB,EAAKlN,MAAMwB,SAA4C,KAArB,EAAKxB,MAAMwB,QAErD2L,KAAM9B,MAAM,0BAA2B,CACrC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGmBJ,IAAtB,EAAKlN,MAAMwH,UAA8C,KAAtB,EAAKxH,MAAMwH,SAEtD2F,KAAM9B,MAAM,2BAA4B,CACtC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,MAGuB,OAAzB,EAAKtN,MAAMmX,aAA+C,KAAzB,EAAKnX,MAAMmX,YAGrDhK,KAAM9B,MAAM,+BAAgC,CAC1C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGuBJ,IAA1B,EAAKlN,MAAMoX,cAAsD,KAA1B,EAAKpX,MAAMoX,aAE1DjK,KAAM9B,MAAM,yBAA0B,CACpC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,MAGwB,IAA5B,EAAKtN,MAAMiE,QAAQd,OAG1BgK,KAAM9B,MAAM,uBAAwB,CAClC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAKP3H,QAAQC,IAAI,EAAK5F,OAErB,EAAK+H,MAAMsP,aAAa,EAAKrX,OAC7BmN,KAAMvL,QAAQ,gCAAiC,CAC7CwL,SAAU,YACVC,OAAQ,QACRC,QAAS,Q,wEAKH,IAAD,OACP,OACE,yBAAKlF,UAAU,eACb,kBAAC,KAAD,CAAyBkP,MAAOC,MAC9B,yBAAKnP,UAAU,cACb,yBAAKiG,IAAI,2BACT,+CAEF,kBAAC,KAAD,CAAO/B,MAAO,CAAEC,MAAO,KAEvB,yBAAKhC,MAAO,CAAEiN,UAAW,SACvB,yBAAKpP,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMN,KAClB4I,SAAUtG,KAAKkK,YACf3D,YAAY,OACZpH,GAAG,OACHjB,KAAK,OACLiM,MAAM,cAKV,yBAAKA,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMuB,MAClB+G,SAAUtG,KAAKkK,YACf3D,YAAY,QACZpH,GAAG,QACHjB,KAAK,OACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMuH,MAClBe,SAAUtG,KAAKkK,YACf3D,YAAY,QACZpH,GAAG,QACHjB,KAAK,QACLiM,MAAM,cAKV,yBAAKA,MAAM,sBACT,2BACEvE,MAAO5F,KAAKhC,MAAMwH,SAClBc,SAAUtG,KAAKkK,YACf3D,YAAY,WACZpH,GAAG,WACHjB,KAAK,WACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,8BACEvE,MAAO5F,KAAKhC,MAAMwB,QAClB8G,SAAUtG,KAAKkK,YACf3D,YAAY,UACZpH,GAAG,UACHgL,MAAM,qCAKV,yBAAKA,MAAM,iCACT,kBAAC,KAAD,CACE8C,OAAO,SACP9N,GAAG,cACH+Q,MAAM,eACNtK,MAAO5F,KAAKhC,MAAMmX,YAClB7O,SAAU,SAAAV,GACR,EAAKsE,YAAY,CAAExM,KAAM,cAAekJ,KAAMhB,KAEhD6P,oBAAqB,CACnB,aAAc,mBAMtB,yBAAKrP,UAAU,OACb,yBAAK+D,MAAM,sBACT,yBAAKA,MAAM,QAAQuL,IAAI,WACrB,2BAAOnP,YAAY,aAAa4D,MAAM,kBAGxC,yBAAK/D,UAAU,iBAAiBsP,IAAI,oBAGtC,yBAAKvL,MAAM,iCACT,kBAAC,KAAD,CACE8C,OAAO,SACP9N,GAAG,eACH+Q,MAAM,aACNtK,MAAO5F,KAAKhC,MAAMoX,aAClB9O,SAAU,SAAAV,GACR,EAAKsE,YAAY,CAAExM,KAAM,eAAgBkJ,KAAMhB,KAEjD6P,oBAAqB,CACnB,aAAc,oBASxB,yBAAKrP,UAAU,cACb,4BACEA,UAAU,0CACVsC,QAAS1I,KAAKkV,WAEd,uBAAG/K,MAAM,mBAJX,e,GApRgB3D,IAAMC,WAySnBC,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAK,MACA5E,EAAMW,kBAXY,SAAAgE,GACzB,MAAO,CACL0O,aAAc,SAAAzO,GACZD,EAASrE,GAAuBsE,QAKvBF,CAMQgN,IC5NRhN,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAM5E,EAAMiB,gBAFDyD,EA9FD,SAAAX,GAMZ,OACE,6BAASK,UAAU,eAEjB,yBAAKA,UAAU,cACb,yBAAKiG,IAAI,2BACT,4CAEF,yBAAKjG,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACE5D,YAAY,cACZpH,GAAG,aACHjB,KAAK,OACLiM,MAAM,aAER,2BAAO/D,UAAU,iBAAiBmG,IAAI,cAAtC,kBAMJ,6BACE,+BACE,+BACE,4BACE,mCACA,mCACA,wBAAInG,UAAU,UAAd,YACA,qCACA,wCACA,wCACA,0CACA,wCACA,oCACA,4BAEI,kBAAC,IAAD,CAAMwC,GAAG,YACP,yBAIExC,UAAU,gBACViG,IAAI,6BAOhB,+BACGtG,EAAMa,KAAK9J,MAAMqL,KAAI,SAAChF,EAAMsJ,GAC3B,OACE,wBAAIrK,IAAKqK,GACP,4BACE,2BAAIA,EAAI,IAEV,4BAAKtJ,EAAKwS,QACV,wBAAIvP,UAAU,UACXjD,EAAKe,SAASyG,UAAY,IAAMxH,EAAKe,SAAS0G,UAEjD,4BAAKzH,EAAKyS,OACV,4BAAKzS,EAAK0S,UACV,4BAAK1S,EAAKyS,MAAQzS,EAAK0S,UACvB,4BAAK,IAAI5W,KAAKkE,EAAK2S,WAAWvG,gBAC9B,4BAAK,IAAItQ,KAAKkE,EAAK4S,cAAcxG,gBACjC,4BAAKpM,EAAKlD,MACV,4BACE,kBAAC,IAAD,CACE2I,GAAI,YAAczF,EAAKtE,IACvB6J,QAAS,kBA1EV9B,EA0E4BzD,OAzE/CiE,aAAaC,QAAQ,MAAMT,EAAK/H,KADd,IAAC+H,IA4EC,yBACE8F,MAAM,OACNtG,UAAU,eACViG,IAAI,mDCvDb2J,GA3BM,SAACjQ,GAAW,IAAD,EAGAkE,mBAAS,GAHT,oBAGvBgM,EAHuB,UAK5B,OAAO,yBAAK7P,UAAU,kBAClB,yBAAK+D,MAAM,gBAAgB5B,MAAO,CAAC,UAAW,KAAM,QAAUxC,EAAMmQ,QAAU,QAAS,OAAQ7L,QAAS,MACxG,yBAAKlL,GAAG,SAASgL,MAAM,QAAQ5B,MAAO,CAAC,QAAUxC,EAAMmQ,QAAU,QAAS,SAC1E,yBAAK/L,MAAM,iBACP,yBAAK/D,UAAU,YAAYL,EAAM2G,OAClC,yBAAKtG,UAAU,eACdL,EAAMyH,cAGV,yBAAKrD,MAAM,gBACP,4BAAQ/D,UAAU,0CAA0CsC,QAAS,WACjE3C,EAAMoQ,MAAMF,KACb,uBAAG9L,MAAM,mBAFZ,WAGA,4BAAQ/D,UAAU,4CAA4CsC,QAAS,WACnE3C,EAAMqQ,UAAS,KAChB,uBAAGjM,MAAM,mBAFZ,cC+EGkM,I,cAhGQ,SAACtQ,GAAW,IAAD,EAGFkE,mBAAS,CAAEqM,OAAQ,IAHjB,oBAGzBL,EAHyB,KAGhBM,EAHgB,KAS9B,OAJAC,qBAAU,eAIH,yBAAKpQ,UAAU,eAClB,yBAAK+D,MAAM,gBAAgB5B,MAAO,CAAE,UAAW,KAAM,QAAWxC,EAAMmQ,QAAU,QAAU,OAAQ7L,QAAS,MAC3G,yBAAKlL,GAAG,SAASgL,MAAM,QAAQ5B,MAAO,CAAE,QAAWxC,EAAMmQ,QAAU,QAAU,SACzE,yBAAK/L,MAAM,iBACP,yBAAK/D,UAAU,YAAf,mBAA2CL,EAAM7B,SAAW,QAAU6B,EAAM7B,SAAW,IACvF,+BACI,+BACI,4BACI,mCACA,oCACA,2CACA,wCAGR,+BAEQ6B,EAAM0Q,SAAStO,KAAI,SAAC8N,EAAS1F,GAEzB,OAAO,4BACH,4BAAMA,EAAQ,GACd,4BAAK0F,EAAQjX,MACb,4BAAKiX,EAAQ/X,MACb,4BAAK+X,EAAQK,eAQrC,yBAAKnM,MAAM,gBAEP,yBAAK/D,UAAU,OAEX,yBAAKA,UAAU,UAEX,yBAAK+D,MAAM,uBAEP,yBAAK/D,UAAU,OAEX,yBAAKA,UAAU,WAEX,uCAAOR,MAAOqQ,EAAQK,OAAQ/P,YAAY,SAASD,SAAU,SAACZ,GAC1D6Q,EAAW,CAAErY,KAAM+X,EAAQ/X,MAAQ,GAAIoY,OAAQ5Q,EAAInC,OAAOqC,SAE3DzG,GAAG,eAAejB,KAAK,UAH1B,KAGsC,mBAI1C,yBAAKkI,UAAU,UAGX,4BAAQR,MAAOqQ,EAAQ/X,KAAMkI,UAAU,eAAeE,SAAU,SAACZ,GAC7D6Q,EAAW,CAAErY,KAAMwH,EAAInC,OAAOqC,MAAO0Q,OAAQL,EAAQK,QAAU,KAChEnX,GAAG,eACF,4BAAQiD,IAAI,OAAOwD,MAAM,QAAzB,QACA,4BAAQxD,IAAI,OAAOwD,MAAM,QAAzB,QACA,4BAAQxD,IAAI,SAASwD,MAAM,UAA3B,eAUpB,yBAAKQ,UAAU,UACX,4BAAQA,UAAW,2CAA+C6P,EAAQ/X,MAAwB,QAAhB+X,EAAQ/X,KAAgC,GAAd,aAAmBwK,QAAS,WAEpIuN,EAAQjX,MAAO,IAAIC,MAAOsQ,eAC1BgH,EAAW,CAAED,OAAQ,EAAGpY,KAAK,SAC7B6H,EAAM2Q,eAAeT,KACtB,uBAAG9L,MAAM,mBALZ,eAMA,4BAAQ/D,UAAU,4CAA4CsC,QAAS,WACnE3C,EAAMqQ,UAAS,KAChB,uBAAGjM,MAAM,mBAFZ,iBCnFT,YA0BFvD,GACT,OAAO,SAAAD,GACLE,MAAM,oBAAqB,CACzBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAA9D,GAEAA,EAAKtE,KACP8H,EAAS,CACPzI,KAAM,eACNC,QAASgF,IAEXxD,IAAMC,QAAQkK,GAAShN,MAAMyM,QAE7B5J,IAAM0J,MAAMS,GAAShN,MAAMuM,MAAMC,mB,ikBCpCvCqN,G,YACJ,aAAe,IAAD,8BACZ,+CAgBFC,gBAAkB,SAACC,EAAMnR,EAAKmI,GAK5BgJ,EAAKpS,QAAUoJ,EACfgJ,EAAKC,OAASjJ,EAAcT,cAC5ByJ,EAAK1J,gBAAkBU,EAAcV,gBAErC,EAAKxH,SAAS,EAAK3H,QA1BP,EA4Bd+Y,YAAc,WACZ,MAAO,CACLtS,QAAQ,aACN2I,cAAe,EACfD,gBAAiB,EACjBG,WAAY,EACZC,WAAY,GAJP,aAKO,GAEdyJ,KAAM,EACNC,MAAO,EACPC,MAAO,EAGPtB,MAAO,EACPuB,aAAc,EACdC,SAAU,EACVC,cAAe,EACfC,IAAK,EACLC,SAAS,EACTC,WAAW,IAhDD,EAuDdtN,YAAc,SAAAxE,GACZ/B,QAAQC,IAAI8B,GACZ,EAAK1H,MAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MACvC,EAAKD,SAAS,EAAK3H,QA1DP,EA6DdyZ,WAAa,SAACZ,EAAMnZ,EAAMkI,GACxBiR,EAAKnZ,GAAQkI,EAEb,EAAKD,SAAS,EAAK3H,QAhEP,EAmEd0Z,WAAa,WACP,EAAK1Z,MAAM2Z,eACb,EAAK3Z,MAAM2Z,aAAaJ,SAAU,EAClC,EAAKvZ,MAAM4Z,cAAe,EAC1B,EAAKjS,SAAS,EAAK3H,SAvET,EA2Ed6Z,YAAc,WACR,EAAK7Z,MAAM2Z,eACb,EAAK3Z,MAAM2Z,aAAaJ,SAAU,EAClC,EAAKvZ,MAAM4Z,cAAe,EAC1B,EAAKjS,SAAS,EAAK3H,SA/ET,EAmFd0Y,eAAiB,SAAAT,GACXA,IACF,EAAKjY,MAAMyY,SAAS/W,KAAKuW,GACzB,EAAKtQ,SAAS,EAAK3H,SAtFT,EA4FdiU,kBAAoB,WAElB,IAAI9S,EAAKiI,aAAa0Q,QAAQ,OAC9BnU,QAAQC,IAAI,EAAKmC,MAAM1E,OACvB,EAAK0E,MAAMa,KAAK9J,MAAMoG,SAAQ,SAAAC,GAExBA,EAAKtE,MAAQM,IACfwE,QAAQC,IAAIT,GACZ,EAAKwC,SAAS,CACZoQ,aAAc5S,EAAK4S,aACnBD,UAAW3S,EAAK2S,UAChBF,MAAOzS,EAAKyS,MACZC,SAAU1S,EAAK0S,SACf3R,SAAUf,EAAKe,SACfuF,KAAMtG,EAAKsG,KACXsO,MAAO5U,EAAK4U,YAMlB5S,OAAOyO,EAAE,EAAKC,KAAKmE,iBAAiBC,WAAW,CAC7CC,SAAU,SAAAlZ,GACR,EAAK2G,SAAS,CAAEmQ,UAAW9W,IAE3BmG,OAAOyO,EAAE,EAAKC,KAAKsE,oBAAoBF,WAAW,CAChDG,QAASpZ,OAKfmG,OAAOyO,EAAE,EAAKC,KAAKsE,oBAAoBF,WAAW,KA3HtC,EA6HdI,SAAW,WACT,EAAKra,MAAM2X,OAAS,EAAK5P,MAAMa,KAAKvD,SACpC,EAAK0C,MAAMsS,SAAS,EAAKra,QA7HzB,EAAKA,MAAQ,CACX+X,aAAc,IAAI9W,KAClB6W,UAAW,KACX8B,cAAc,EACdhC,MAAO,EACPC,SAAU,EACV3R,SAAU,CAAE/E,GAAI,GAChBsX,SAAU,GACVhN,KAAM,GACN6O,MAAO,CAAC,EAAKvB,eACbgB,MAAO,IAGT,EAAKQ,cAAgB,EAAKb,WAfd,E,oFA0FZtQ,aAAaoR,U,+BAwCL,IAAD,SACHC,EAAczY,KAAKhC,MAAMsa,MAAMI,QAAO,SAAA7B,GACxC,OAAQA,EAAKU,WAGXoB,EAAY,EACZC,EAAgB,EAChBC,EAAoB,EAEpBJ,EAAYtX,OACdsX,EAAYvV,SAAQ,SAAA2T,GAClBA,EAAKjB,MAAQkD,KAAKC,MAChBlC,EAAKG,MACFH,EAAKpS,QAAQ8I,YAAc,IAC3BsJ,EAAKpS,QAAQ0I,iBAAmB,IAChC0J,EAAKI,OAAS,IAAMJ,EAAKpS,QAAQ0I,iBAAmB,IAEzD0J,EAAKQ,cAAgByB,KAAKC,MAAMlC,EAAKjB,OAASiB,EAAKM,aAAe,MAClEwB,IAAc9B,EAAKjB,MACnBgD,IAAkB/B,EAAKQ,cACvBwB,IAAsBhC,EAAKO,aAG7BuB,GAAaF,EAAY,GAAG7C,MAC5BgD,GAAiBH,EAAY,GAAGpB,cAChCwB,GAAqBJ,EAAY,GAAGrB,UAGtCpX,KAAKhC,MAAM4X,MAAQ+C,EACnB3Y,KAAKhC,MAAM6X,SAAW+C,EAAgBC,EAItC,IAAIG,EAAe,EAMnB,OAJAhZ,KAAKhC,MAAMyY,SAASvT,SAAQ,SAAA+S,GAC1B+C,IAAiB/C,EAAQK,UAIzB,6BAASlQ,UAAU,wBACjB,kBAAC,GAAD,CACEgQ,SAAU,WACR,EAAKzQ,SAAS,CACZsT,eAAe,KAGnBxC,SAAUzW,KAAKhC,MAAMyY,SACrBvS,SAAUlE,KAAKhC,MAAMkG,SAASxG,KAC9BwY,QAASlW,KAAKhC,MAAMib,cACpBvC,eAAgB1W,KAAK0W,iBAGvB,kBAAC,GAAD,CACEP,MAAO,WACL,EAAKoC,iBAEPnC,SAAU,WACR,EAAKzQ,SAAS,CACZiS,cAAc,KAGlBlL,MAAO1M,KAAKhC,MAAM0O,MAClBc,YAAaxN,KAAKhC,MAAMwP,YACxB0I,QAASlW,KAAKhC,MAAM4Z,eAGtB,yBAAKxR,UAAU,cACb,yBAAKiG,IAAI,2BACT,wCACA,sCACS,8BAAOrM,KAAK+F,MAAMa,KAAKvD,WAEhC,yBAAK+C,UAAU,eACb,yBAAK+D,MAAM,OACT,0BAAM/D,UAAU,uBAAhB,uBAAiE,IACjE,0BAAMA,UAAU,oBAAoB0S,KAAKC,MAAMJ,IAAmB,KAEpE,yBAAKxO,MAAM,OACT,0BAAM/D,UAAU,uBAAhB,uBACA,0BAAMA,UAAU,oBACb0S,KAAKC,MAAMH,IACN,KAEV,yBAAKzO,MAAM,OACT,0BAAM/D,UAAU,uBAAhB,qBACA,0BAAMA,UAAU,oBACb0S,KAAKC,MAAMF,IACN,KAEV,yBAAK1O,MAAM,OACT,0BAAM/D,UAAU,uBAAhB,iBACA,0BAAMA,UAAU,oBACb0S,KAAKC,MAAMH,EAAgBC,IACtB,KAEV,yBAAK1O,MAAM,iBACT,0BAAM/D,UAAU,uBAAhB,iBACA,0BAAMA,UAAU,oBACb0S,KAAKC,MAAMJ,IACN,KAEV,yBAAKxO,MAAM,0BACT,0BAAM/D,UAAU,uBAAhB,QACA,0BAAMA,UAAU,oBACb0S,KAAKC,MAAMC,IACN,MAGZ,yBAAK5S,UAAU,0BACb,yBACEsC,QAAS,WACP,EAAK/C,SAAS,CAAEsT,eAAe,KAEjCvM,MAAM,cACNtG,UAAU,0BACViG,IAAI,oCAEN,yBACE3D,QAAS,WACP,EAAK2P,YAEP3L,MAAM,oBACNtG,UAAU,0BACViG,IAAI,qCAEN,yBACEK,MAAM,OACNtG,UAAU,0BACViG,IAAI,iCAEN,yBACEK,MAAM,QACNtG,UAAU,0BACViG,IAAI,oCAIV,yBAAKjG,UAAU,OACb,yBAAK+D,MAAM,sBACT,kBAAC,GAAD,CACE0F,SAAS,OACTqJ,aAAa,UAEb5S,SAAU,SAACZ,EAAK+D,GACdA,GACE,EAAKS,YAAY,CACf3G,OAAQ,CACNpE,GAAI,OACJyG,MAAO6D,EAAK5K,QAIpB+H,KAAM5G,KAAK+F,MAAMa,KAAK/E,MACtB0E,YAAY,iBAahB,yBAAK4D,MAAM,sBACT,kBAAC,GAAD,CACE0F,SAAS,YACTqJ,aAAclZ,KAAK+F,MAAMa,KAAKpF,UAAU,GACxC8E,SAAU,SAACZ,EAAKxB,GACdA,GACE,EAAKgG,YAAY,CACf3G,OAAQ,CACNpE,GAAI,WACJyG,MAAO1B,EAASrF,QAIxB+H,KAAM5G,KAAK+F,MAAMa,KAAKpF,UAAUkX,QAAO,SAAAxU,GACrC,OAAOA,EAASuF,KAAK5K,KAAO,EAAKb,MAAMyL,QAEzClD,YAAY,qBAehB,yBAAK4D,MAAM,sBACT,2BACE7D,SAAUtG,KAAKkK,YACf3D,YAAY,aACZH,UAAU,aACVjH,GAAG,YACHuW,IAAI,kBACJxX,KAAK,WAKX,yBAAKkI,UAAU,OACb,yBAAK+D,MAAM,sBACT,8BACE/D,UAAYpG,KAAKhC,MAAM8X,UAAyB,GAAb,WACnCxP,SAAUtG,KAAKkK,YACf3D,YAAY,gBACZpH,GAAG,eACHjB,KAAK,QALP,mBAMK,gBANL,oBAOM,sBAPN,KAWF,yBAAKiM,MAAM,sBACT,8BACEvE,MAAO5F,KAAKhC,MAAM+Z,MAClBzR,SAAUtG,KAAKkK,YACf3D,YAAY,QACZpH,GAAG,QACHgL,MAAM,iCAMZ,6BACE,2BAAO/D,UAAU,eACf,2BAAOA,UAAU,eACf,4BACE,wBAAIA,UAAU,cAAd,OACA,wBAAIA,UAAU,SAAd,SACA,wBAAImC,MAAO,CAAEuH,MAAO,UAApB,WACA,wBAAI1J,UAAU,SAAd,QACA,wBAAIA,UAAU,SAAd,SACA,wBAAIA,UAAU,SAAd,UACA,wBAAIA,UAAU,SAAd,cACA,wBAAIA,UAAU,SAAd,oBACA,wBAAIA,UAAU,SAAd,SACA,0CACA,mCACA,0CACA,qCAQJ,2BAAOA,UAAU,uBAUdpG,KAAKhC,MAAMsa,MAAMnQ,KAAI,SAAC0O,EAAMpK,GAM3B,IAAI0M,GACFtC,EAAKpS,QAAQ6I,WAAauJ,EAAKpS,QAAQ8I,YAEtCnM,WACAgY,MAAM,KAAK,GAUd,OAPKD,EADiB,OAAtBA,EAAQ/X,WAEF+X,EACA,KACCtC,EAAKpS,QAAQ6I,WACZuJ,EAAKpS,QAAQ8I,WAAa4L,GACnB,IAGb,wBAAI/S,UAAWyQ,EAAKU,QAAU,cAAgB,IAC5C,4BACE,2BAAI9K,EAAI,IAEV,wBACErG,UACE,aACuB,KAAtB+S,EAAQ/X,WAAoB,aAAe,KAG7C,IACD,0BAAMgF,UAAU,mBAAmB+S,IAGrC,4BACE,kBAAC,GAAD,CACEtJ,SAAS,OACTvJ,SAAU,SAACZ,EAAKjB,GACdA,GAAW,EAAKmS,gBAAgBC,EAAMnR,EAAKjB,IAE7CmC,KAAM,EAAKb,MAAMa,KAAKnF,SAASiX,QAAO,SAAAjU,GACpC,OAKe,GAJb,EAAKzG,MAAMsa,MAAMI,QAAO,SAAAW,GACtB,OACExC,GAAQwC,GAASA,EAAM5U,QAAQtF,IAAMsF,EAAQtF,MAE9CgC,UAGPoF,YAAY,oBAmBhB,4BAEI,2BACEA,YAAY,OACZD,SAAU,SAAAZ,GAER,IAAIyT,IACFtC,EAAKpS,QAAQ6I,WAAauJ,EAAKpS,QAAQ8I,YAEtCnM,WACAgY,MAAM,KAAK,IAET1T,EAAInC,OAAOqC,MAAQuT,GACtBtC,EAAKO,SAAW,EAChB,EAAKK,WAAWZ,EAAMnR,EAAInC,OAAOpE,GAAIga,IAErC,EAAK1B,WACHZ,EACAnR,EAAInC,OAAOpE,GACXuG,EAAInC,OAAOqC,QAMjBQ,UAAU,WACVlI,KAAK,SACLiB,GAAG,OACHyG,MAAOiR,EAAKG,QAKlB,4BAEI,2BACEzQ,YAAY,QACZD,SAAU,SAAAZ,IAENmR,EAAKpS,QAAQ6I,WAAauJ,EAAKpS,QAAQ8I,YAEtCnM,WACAgY,MAAM,KAAK,GAECvC,EAAKpS,QAAQ6I,WAN5B,IAQIgM,EACFzC,EAAKG,KAAOH,EAAKpS,QAAQ8I,aACxB7H,EAAInC,OAAOqC,MAEd,GAAI0T,EAAgBzC,EAAKpS,QAAQ6I,WAI/B,GAFEuJ,EAAKpS,QAAQ6I,WAAagM,EAEP,EACnB,EAAK7B,WACHZ,EACAnR,EAAInC,OAAOpE,GACXuG,EAAInC,OAAOqC,WAER,CACL,IAAI2T,EACF7T,EAAInC,OAAOqC,OACV0T,EAAgBzC,EAAKpS,QAAQ6I,YAChCuJ,EAAKO,SAAW,EAChB,EAAKK,WACHZ,EACAnR,EAAInC,OAAOpE,GACXoa,QAIJ,EAAK9B,WACHZ,EACAnR,EAAInC,OAAOpE,GACXuG,EAAInC,OAAOqC,QAIjBQ,UAAU,WACVlI,KAAK,SACLiB,GAAG,QACHyG,MAAOiR,EAAKI,SAKlB,4BAEI,2BACE1Q,YAAY,SACZH,UAAU,WACVlI,KAAK,SACL0H,MAAOiR,EAAKK,SAMlB,4BACE,2BACE3Q,YAAY,SACZH,UAAU,WACVoT,UAAQ,EACRtb,KAAK,SACL0H,MAAOiR,EAAKpS,QAAQ2I,iBAKxB,4BACE,2BACEhH,UAAU,WACVoT,UAAQ,EACRtb,KAAK,OACLub,UAAQ,EACR7T,MAAOiR,EAAKpS,QAAQ0I,mBAKxB,4BACE,2BACE/G,UAAU,WACVoT,UAAQ,EACRtb,KAAK,OACLub,UAAQ,EACR7T,MAAQ,SAAAiR,GACN,OAAOA,EAAKjB,MADN,CAELiB,MAKP,4BAEI,2BACE6C,QAAS,SAAAhU,GACP,EAAK+R,WACHZ,EACAnR,EAAInC,OAAOpE,GACXuG,EAAInC,OAAOqC,QAGfQ,UAAU,WACVjH,GAAG,eACHjB,KAAK,SACL0H,MAAOiR,EAAKM,gBAIlB,4BAEI,2BACEqC,UAAQ,EACRpT,UAAU,WACVlI,KAAK,SACL0H,MAAQ,SAAAiR,GACN,OAAOA,EAAKQ,cADN,CAELR,MAOT,4BACE,2BACE1X,GAAG,WACHua,QAAS,SAAAhU,GACP,EAAK+R,WACHZ,EACAnR,EAAInC,OAAOpE,GACXuG,EAAInC,OAAOqC,QAGfQ,UAAU,WACVuT,UAAW,SAAAjU,GACT,GAAe,SAAXA,EAAItD,IAAgB,CACtB,IAAKyU,EAAKpS,QAAQ5F,IAEhB,YADAc,IAAM0J,MAAM,2BAIM,EAAKrL,MAAMsa,MAC7B,EAAKta,MAAMsa,MAAMnX,OAAS,GAEdqW,WAAY,EAE1B,EAAKxZ,MAAMsa,MAAM5Y,KAAK,EAAKqX,eAE3B,EAAKpR,SAAS,EAAK3H,SAGvBE,KAAK,SACL0H,MAAOiR,EAAKO,YAGhB,4BACE,2BACEhR,UAAU,WACVlI,KAAK,SACLsb,UAAQ,EACR5T,MAAOiR,EAAKjB,MAAQiB,EAAKQ,cAAgBR,EAAKO,YAGlD,4BACGP,EAAKW,UACJ,uBACErN,MAAM,oCACNzB,QAAS,WACK,EAAK1K,MAAMsa,MACrB,EAAKta,MAAMsa,MAAMnX,OAAS,KAGzB,EAAKnD,MAAMsa,MACV,EAAKta,MAAMsa,MAAMnX,OAAS,GACxB,EAAK4V,eAEX,EAAKpR,SAAS,EAAK3H,MAAMsa,SAX7B,YAiBA,uBACEnO,MAAM,mCACNzB,QAAS,WACHmO,EAAKU,SACP,EAAKgB,cAAgB,EAAKV,YAE1B,EAAKlS,SAAS,CACZ6H,YACE,+CACFd,MAAO,eACPiL,aAAcd,EACde,cAAc,MAGhB,EAAKW,cAAgB,EAAKb,WAE1B,EAAK/R,SAAS,CACZ6H,YACE,8CACFd,MAAO,sBACPiL,aAAcd,EACde,cAAc,OAKnB,IACAf,EAAKU,QAAU,UAAY,+B,GAjtBlC/Q,IAAMC,WAguBXC,gBACb,SAAA1E,GAGE,OAFA2B,QAAQC,IAAI,QAAS5B,GAEd,CACL4E,KAAK,MACA5E,EAAMiB,aADP,GAECjB,EAAMsB,aAFP,GAGCtB,EAAMiC,gBAHP,GAICjC,EAAMwC,qBAIf,SAAAmC,GACE,MAAO,CACL0R,SAAU,SAAAzR,GACRD,EAASrE,GAAsBsE,QAhBxBF,CAoBbiQ,IC9vBa,YAEGiD,GAEV,OAAO/S,MAAM,4BAA8B+S,EAAQ,CAC/C9S,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAKnBE,MAAK,SAAAC,GACF,OAAOA,EAAKC,WAbb,YAiBFP,GAET,OAAO,SAACD,GAEJE,MAAM,2BAA4B,CAC9BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAAC5J,GAEDA,EAAOwB,KACP8H,EAAS,CACLzI,KAAM,iBAEVyB,IAAMC,QAAQkK,GAASnI,MAAMgI,gBAE7BhK,IAAM0J,MAAMS,GAASnI,MAAM0H,MAAMO,yBAtCtC,YA4EJhD,GAEP,OAAO,SAACD,GAGJE,MAAM,oBAAqB,CACvBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAACtI,GAEDA,EAAKE,KACL8H,EAAS,CACLzI,KAAM0I,EAAK/H,IAAM,eAAiB,eAClCV,QAASQ,EACT6E,MAAO,UAEX7D,IAAMC,QAAQkK,GAASnI,MAAMiF,EAAK/H,IAAM,UAAY,aAEpDc,IAAM0J,MAAMS,GAASnI,MAAM0H,MAAMC,mB,0nBCpFrD,SAAS+G,GAAStK,GAAQ,IAChBuK,EAAqCvK,EAArCuK,SAAU1K,EAA2BG,EAA3BH,MAAO2K,EAAoBxK,EAApBwK,MAAUC,EADZ,aACsBzK,EADtB,8BAGvB,OACE,kBAAC0K,GAAA,EAAD,eACEC,UAAU,MACVC,KAAK,WACLC,OAAQhL,IAAU2K,EAClBpR,GAAE,0BAAqBoR,GACvBM,kBAAA,qBAA+BN,IAC3BC,GAEJ,kBAACM,GAAA,EAAD,CAAKC,EAAG,GAAIT,IAWlB,SAASU,GAAUT,GACjB,MAAO,CACLpR,GAAG,cAAD,OAAgBoR,GAClB,gBAAgB,mBAAhB,OAAoCA,IAIxC,IAAMsJ,GAAY5I,cAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,gBAAiBH,EAAMI,QAAQC,WAAWC,WAkY/B9K,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAK,MAAM5E,EAAM2C,YAAb,GAA6B3C,EAAMsB,kBAhBhB,SAAAqD,GACzB,MAAO,CACLmT,cAAe,SAAAF,GACb,OAAOtX,GAAyBsX,IAElCG,WAAY,SAAAnT,GACVD,EAASrE,GAAsBsE,KAEjCoT,aAAc,SAAApT,GACZD,EAASrE,GAAwBsE,QAKxBF,EA5XC,SAAAX,GAAU,IAAD,EACCkE,mBAAS,MAC5BlE,EAAMpH,OAFY,oBAClBX,EADkB,KACX2H,EADW,KAKvBhC,QAAQC,IAAI,YAAZ,MACKmC,EAAMpH,MACTX,GAEYwI,IAAMyT,YACCzT,IAAMyT,YAD3B,IATuB,EAYGhQ,mBAAS,CACjCiQ,QAAS,KAbY,oBAYlBC,EAZkB,KAYVC,EAZU,KAgBvB,SAASlQ,EAAYxE,GACnB1H,EAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MAClCD,EAAS,MAAK3H,IAGhB,IAEMqc,EAAUR,KAmBhB,IAAMS,EAAgB9T,IAAM+T,SAE5B/D,qBAAU,WAORrR,OAAOyO,EAAE0G,EAAcE,SAASC,cAnDX,MAsDGjU,IAAMyD,SAAS,GAtDlB,oBAsDhBrE,EAtDgB,KAsDT8U,EAtDS,OAyDelU,IAAMyD,SAAS,cAzD9B,oBAyDhB0Q,EAzDgB,KAyDHC,EAzDG,OA0DmBpU,IAAMyD,SAC9CnH,EAAS7C,KAAKU,gBA3DO,oBA0DhBka,EA1DgB,KA0DDC,EA1DC,KA0HvB,OA7CEjU,MAAM,sBAAuB,CAC3BC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMxI,KAAKE,UAAU,CAEnBC,KAAMoH,EAAMpH,KAAKE,IACjB0B,MAAOuC,EAAS7C,KAAKO,iBAAiBqa,OAIvC5T,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAA8T,GACJ,IAAIC,EAAOlY,EAAS7C,KAAKK,aAAaua,GAClCI,EAASD,EAAOD,EAAe5Z,OAG/B+Z,EAFenV,EAAMpH,KAAKtB,OAAS2d,EAEJD,EAAe5Z,OAElDwE,EAAS,CACP2Q,OAAQwC,KAAKC,MAAMmC,GACnBjZ,QAASgZ,IAGXtX,QAAQC,IAAI,OAqBhB,yBAAKwC,UAAU,YACb,yBACE+D,MAAM,gBACN5B,MAAO,CAAE,UAAW,KAAM6B,QAAS,QAASC,QAAS,MAEvD,yBACElL,GAAG,SACHgL,MAAM,QACN5B,MAAO,CAAE6B,QAAS,QAAS+Q,OAAQ,UAEnC,yBAAKhR,MAAM,iBACT,yBAAK/D,UAAWiU,EAAQlJ,MACtB,kBAAC4B,GAAA,EAAD,CAAQ3H,SAAS,UACf,kBAAC4H,GAAA,EAAD,CACEpN,MAAOA,EACPU,SA5EO,SAACwL,EAAOC,GACX,GAAZA,GACFhM,EAAM+T,cAAc/T,EAAMpH,KAAKE,KAAKoI,MAAK,SAAAiT,GACvCE,EAAU,CACRF,QAASA,OAKfQ,EAAS3I,IAoEGkB,aAAW,uBAEX,kBAACC,GAAA,EAAD,eAAKhD,MAAM,WAAcc,GAAU,KACnC,kBAACkC,GAAA,EAAD,eAAKhD,MAAM,qBAAwBc,GAAU,KAC7C,kBAACkC,GAAA,EAAD,eAAKhD,MAAM,WAAcc,GAAU,OAIvC,kBAAC,GAAD,CAAUpL,MAAOA,EAAO2K,MAAO,GAC7B,yBAAKnK,UAAU,OACb,yBAAK+D,MAAM,sBACT,kBAACgJ,GAAA,EAAD,CACEzC,UAAU,WACVtK,UAAWiU,EAAQe,aAEnB,kBAACC,GAAA,EAAD,CAAW3K,UAAU,UAArB,gBACA,kBAAC4K,GAAA,EAAD,CACErI,aAAW,cACXvV,KAAK,cACLkI,MAAO+U,EACPrU,SAAU,SAAAZ,GACRkV,EAAelV,EAAInC,OAAOqC,SAG5B,kBAAC2V,GAAA,EAAD,CACE3V,MAAM,SACN4V,QAAS,kBAACC,GAAA,EAAD,MACTvL,MAAM,YAER,kBAACqL,GAAA,EAAD,CACE3V,MAAM,aACN4V,QAAS,kBAACC,GAAA,EAAD,MACTvL,MAAM,mBAMd,yBAAK/F,MAAM,sBACT,2BACEvE,MAAO5H,EAAMsY,OACbhQ,SAAU4D,EACV3D,YAAY,SACZpH,GAAG,SACHjB,KAAK,SACLiM,MAAM,aAER,2BACEK,UAAQ,EACR5E,MAAO5H,EAAMiE,QACbqE,SAAU,SAAAZ,GACR,IAAIsV,EAAOlY,EAAS7C,KAAKK,aACvBwC,EAAS7C,KAAKU,gBAGZua,EADenV,EAAMpH,KAAKtB,OAAS2d,GAErBA,EAAOtV,EAAInC,OAAOqC,OAEpCD,EAAS,CACP2Q,OAAQwC,KAAKC,MAAMmC,MAGvB3U,YAAY,WACZpH,GAAG,UACHjB,KAAK,SACLiM,MAAM,aAER,uBACEA,MAAM,uBACNuL,IAAK4E,EACL7R,KAAK,IACLiT,cAAY,aAEXb,GAGH,wBACEnO,MAAM,eACNhE,QAAS,SAAAhD,GACPoV,EAAiBpV,EAAInC,OAAOoY,YAE9Bxc,GAAG,YACHgL,MAAM,oBAEN,4BACE,uBAAG1B,KAAK,MAAR,YAEF,4BACE,uBAAGA,KAAK,MAAR,aAEF,4BACE,uBAAGA,KAAK,MAAR,UAEF,4BACE,uBAAGA,KAAK,MAAR,UAEF,4BACE,uBAAGA,KAAK,MAAR,QAEF,4BACE,uBAAGA,KAAK,MAAR,SAEF,4BACE,uBAAGA,KAAK,MAAR,SAEF,4BACE,uBAAGA,KAAK,MAAR,WAEF,4BACE,uBAAGA,KAAK,MAAR,cAEF,4BACE,uBAAGA,KAAK,MAAR,YAEF,4BACE,uBAAGA,KAAK,MAAR,aAEF,4BACE,uBAAGA,KAAK,MAAR,gBAKR,yBAAKrC,UAAU,OACb,yBAAKA,UAAU,UACb,2BAAOA,UAAU,0BAA0BwV,OAAO,KAChD,4BACE,4CACA,wBAAIxV,UAAU,gBACZ,kBAAC,KAAD,CAAUyV,SAAU9V,EAAMpH,KAAKtB,OAAQye,SAAS,QAAS,MAG7D,4BACE,6CACA,wBAAI1V,UAAU,gBAAgBpI,EAAMiE,UAEtC,4BACE,8CACA,wBAAImE,UAAU,2BACZ,kBAAC,KAAD,CAAUyV,SAAU7d,EAAMsY,OAAQwF,SAAS,cAQvD,kBAAC,GAAD,CAAUlW,MAAOA,EAAO2K,MAAO,GAC7B,+BACE,+BACE,4BACE,mCACA,oCACA,oCACA,qCACA,wCAGJ,+BACG4J,EAAOD,QAAQ/R,KAAI,SAAC7I,EAASmN,GAC5B,OACE,4BACE,4BACE,2BAAIA,EAAI,IAEV,4BAAK,IAAIxN,KAAKK,EAAQN,MAAMuQ,gBAC5B,4BAAKjQ,EAAQpB,MACb,4BAAKoB,EAAQiB,OACb,4BAAKjB,EAAQgX,eAQzB,kBAAC,GAAD,CAAU1Q,MAAOA,EAAO2K,MAAO,GAC7B,yBAAKnK,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAMX,OACbiJ,SAAU4D,EACV3D,YAAY,SACZpH,GAAG,SACHjB,KAAK,SACLiM,MAAM,aAER,uBACE/D,UAAU,MACVsC,QAAS,WACP3C,EAAMgU,WAAW,CACflb,IAAKkH,EAAMpH,KAAKE,IAChBxB,OAAQW,EAAMX,WALpB,eAgBA,GAATuI,EACC,yBAAKuE,MAAM,gCACT,4BACE/D,UAAU,0CACVsC,QA/OZ,WAOE3C,EAAMiU,aAAa,CACjB9b,KAAMyc,EACNhc,KAAMoH,EAAMpH,KAAKE,IACjB0B,MAAOsa,EACPvE,OAAQtY,EAAMsY,WAsON,uBAAGnM,MAAM,mBAJX,gBAMA,4BACE/D,UAAU,4CACVsC,QAAS,WAEP3C,EAAMgW,aAAY,KAGpB,uBAAG5R,MAAM,mBAPX,WAUA,UC9ZN6R,G,2MAGFhe,MAAQ,CACJie,WAAY,CAAEpa,MAAO,IACrBqa,cAAc,G,EAKlBvU,OAAS,WAYL,OARW,GAFE,EAAK5B,MAAMa,KAAKjF,MAAMjB,QAAQ,EAAK1C,MAAMie,cAGlD,EAAKje,MAAMie,WAAa,EAAKlW,MAAMa,KAAKjF,MAAM8B,MAAK,SAAC9E,GAChD,OAAOA,EAAKE,KAAO,EAAKb,MAAMie,WAAWpd,QACvC,CACFgD,MAAO,KAIR,6BAASuE,UAAU,eACrB,EAAKpI,MAAMke,aAAe,kBAAC,GAAD,CAASvd,KAAM,EAAKX,MAAMie,WAAYF,YAAa,WAC1E,EAAKpW,SAAS,CACVuW,cAAc,OAEd,KACR,yBAAK9V,UAAU,cACX,yBAAKiG,IAAI,2BACT,uCAEJ,yBAAKjG,UAAU,OACX,yBAAK+D,MAAM,sBACP,2BAAO5D,YAAY,cAAcpH,GAAG,aAAajB,KAAK,OAAOiM,MAAM,aACnE,2BAAO/D,UAAU,iBAAiBmG,IAAI,cAAtC,kBAIR,6BAEI,+BACI,+BACI,4BACI,mCACA,6CACA,wBAAInG,UAAU,UAAd,aACA,wBAAIA,UAAU,UAAd,SACA,uCACA,uCACA,oCACA,4BACI,yBAAKsC,QAAS,WACV,EAAK/C,SAAS,CACVsW,WAAY,CACRpa,MAAO,IAEXqa,cAAc,KAEnB9V,UAAU,gBAAgBiG,IAAI,4BAI7C,+BAEK,EAAKtG,MAAMa,KAAKjF,MAAMwG,KAAI,SAACxJ,EAAM8N,GAAO,IAAD,EACpC,OAAO,4BACH,4BAAI,2BAAKA,EAAI,IACb,4BAAK9N,EAAKS,MACV,wBAAIgH,UAAU,UAAUzH,EAAKU,UAC7B,4BAAKV,EAAK4G,OACV,4BAAK5G,EAAKY,OACV,4BAAKZ,EAAKkD,MAAMsG,KAAI,SAACsB,GACjB,OAAOA,EAAK/L,QACbye,KAAK,MACR,4BAAKxd,EAAKK,MACV,4BASI,4BAAK0N,MAAM,sBAAsBtG,UAAU,UAAUsC,QAAS,WAC1D,EAAK/C,SAAS,CACVsW,WAAYtd,EACZud,cAAc,MAHtB,0BAMY,gBANZ,oBAM+B,uCAN/B,c,6BArFf1V,IAAMC,WA8GZC,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAM5E,EAAM2C,eAFL+B,CAIZsV,ICnHY,YAiBCpV,GAER,OAAO,SAACD,GAEJE,MAAM,uBAAwB,CAC1BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAACmV,GAEDA,EAAQvd,KACR8H,EAAS,CACLzI,KAAM,kBACNC,QAAQie,IAEZzc,IAAMC,QAAQkK,GAAS/H,SAASoH,UAEhCxJ,IAAM0J,MAAMS,GAAS/H,SAASsH,MAAMC,mB,6jBCO5D,IAAMuQ,GAAY5I,cAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,EACVC,gBAAiBH,EAAMI,QAAQC,WAAWC,WAqGnC9K,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAK,MAAM5E,EAAMY,qBAVE,SAAC+D,GACxB,MAAO,CACH0V,cAAe,SAACzV,GACZD,EAASrE,GAAuBsE,QAK7BF,EA/FC,SAACX,GAAW,IAAD,IAECkE,mBAAS,IAFV,oBAElBjM,EAFkB,KAEX2H,EAFW,KAIvB,SAASuE,EAAYxE,GAEjB1H,EAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MAClCD,EAAS,MAAK3H,IAIlB,IAAMqc,EAAUR,KAEV1B,EAAqBoC,mBAgB3B,OAdA/D,qBAAU,WAENrR,OAAOyO,EAAEuE,EAAmBqC,SAASvC,WAAW,CAC5CG,QAAS,IAAInZ,UAWd,yBAAKmH,UAAU,YAClB,yBAAK+D,MAAM,gBAAgB5B,MAAO,CAAE,UAAW,KAAM,QAAW,QAAS8B,QAAS,MAClF,yBAAKlL,GAAG,SAASgL,MAAM,oBAAoB5B,MAAO,CAAE,QAAW,QAAS,OAAU,UAC9E,yBAAK4B,MAAM,iBAEP,yBAAK/D,UAAU,6BAEf,2BAAOA,UAAU,gBAAgBG,YAAY,gBAAgBX,MAAOG,EAAMa,KAAK/D,QAAS2H,UAAQ,EAACrL,GAAG,OAAOjB,KAAK,SAG5G,yBAAKkI,UAAU,YAAf,eAEA,yBAAKA,UAAWiU,EAAQlJ,MAEpB,yBAAK/K,UAAU,OAEX,yBAAK+D,MAAM,uBAGP,2BAAOvE,MAAO5H,EAAMsY,OAAQhQ,SAAU4D,EAAa3D,YAAY,SAASpH,GAAG,SAASjB,KAAK,SAASiM,MAAM,eAOhH,yBAAK/D,UAAU,OAEX,yBAAK+D,MAAM,mCAEP,8BAAO7D,SAAU4D,EAAa3D,YAAY,OAAOpH,GAAG,OAAOjB,KAAK,QAAhE,mBAA0E,gBAA1E,oBAA8Fia,GAA9F,MAIK,yBAAKhO,MAAM,uBACpB,8BAAU7D,SAAU4D,EAAa3D,YAAY,QAAQpH,GAAG,QAAQgL,MAAM,mCAWtF,yBAAKA,MAAM,gCACP,4BAAQ/D,UAAU,0CAA0CsC,QArDxE,WAEI1K,EAAMoB,KAAO2G,EAAMa,KAAK/D,QACxBkD,EAAMsW,cAAcre,KAkDsE,uBAAGmM,MAAM,mBAA3F,gBACA,4BAAQ/D,UAAU,4CAA4CsC,QAAS,WAEnE3C,EAAMgW,aAAY,KACnB,uBAAG5R,MAAM,mBAHZ,gBCnIV/M,G,2MAGFY,MAAQ,CACJie,WAAY,CAAEpa,MAAO,IACrBqa,cAAc,G,EAKlBvU,OAAS,WAYL,OAAO,6BAASvB,UAAU,eACrB,EAAKpI,MAAMke,aAAe,kBAAC,GAAD,CAAYvd,KAAM,EAAKX,MAAMie,WAAYF,YAAa,WAC7E,EAAKpW,SAAS,CACVuW,cAAc,OAEd,KACR,yBAAK9V,UAAU,cACX,yBAAKiG,IAAI,2BACT,yCAEJ,yBAAKjG,UAAU,OACX,yBAAK+D,MAAM,sBACP,2BAAO5D,YAAY,cAAcpH,GAAG,aAAajB,KAAK,OAAOiM,MAAM,aACnE,2BAAO/D,UAAU,iBAAiBmG,IAAI,cAAtC,kBAIR,6BAEI,+BACI,+BACI,4BACI,mCACA,4CACA,sCACA,oCACA,wBAAInG,UAAU,UAAd,SACA,4BACK,yBAAKsC,QAAS,WACX,EAAK/C,SAAS,CACVsW,WAAY,GAEZC,cAAc,KAEnB9V,UAAU,gBAAgBiG,IAAI,4BAI7C,+BAEK,EAAKtG,MAAMa,KAAK7E,SAASoG,KAAI,SAACxJ,EAAM8N,GACjC,OAAO,4BACH,4BAAI,2BAAKA,EAAI,IACb,4BAAK9N,EAAKS,MACV,4BAAKT,EAAK2X,QACV,4BAAK,IAAIrX,KAAKN,EAAKK,MAAMuQ,gBACzB,wBAAInJ,UAAU,UAAUzH,EAAKoZ,gB,6BApEtCvR,IAAMC,WAkFdC,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAM5E,EAAMY,mBAFL8D,CAIZtJ,IC/CYkf,I,OA1CI,SAACvW,GAAW,IAAD,EAGEkE,mBAAS,GAHX,oBAGrBgM,EAHqB,KAGZM,EAHY,KAK1B,OAAO,yBAAKnQ,UAAU,iBAClB,yBAAK+D,MAAM,gBAAgB5B,MAAO,CAAC,UAAW,KAAM,QAAUxC,EAAMmQ,QAAU,QAAS,OAAQ7L,QAAS,MACxG,yBAAKlL,GAAG,SAASgL,MAAM,QAAQ5B,MAAO,CAAC,QAAUxC,EAAMmQ,QAAU,QAAS,SAC1E,yBAAK/L,MAAM,iBACP,yBAAK/D,UAAU,YAAf,eACD,yBAAKA,UAAU,eAEd,4BAAQA,UAAU,UACd,wCACA,2CAGJ,2BAAOR,MAAOqQ,EAAS3P,SAAU,SAACZ,GAC9B6Q,EAAW7Q,EAAInC,OAAOqC,QACvB1H,KAAK,aAUZ,yBAAKiM,MAAM,gBACP,4BAAQ/D,UAAU,0CAA0CsC,QAAS,WACjE3C,EAAM2Q,eAAeT,KACtB,uBAAG9L,MAAM,mBAFZ,QAGA,4BAAQ/D,UAAU,4CAA4CsC,QAAS,WACnE3C,EAAMwW,YAAW,KAClB,uBAAGpS,MAAM,mBAFZ,eCgDGzD,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAM5E,EAAMuC,iBAEjB,SAACoC,GACA,MAAO,CACH6V,qBADG,SACkBhO,GACjB7H,EAAS,CACLzI,KAAM,kBACNC,QAASqQ,QATV9H,EA/ES,SAACX,GAAU,MAGGkE,oBAAS,GAHZ,oBAG1BgP,EAH0B,KAGX1C,EAHW,KAKzBgG,EAAa,SAACE,GAChB9Y,QAAQC,IAAImC,EAAM1E,MAAM2O,QAExBuG,EAAWkG,IAkBf,OAAO,6BAASrW,UAAU,eACtB6S,GAAiB,kBAAC,GAAD,CAAY/C,QAAS+C,EAAesD,WAAYA,EAAY7F,eAf1D,SAACgG,GAEpB3W,EAAMyW,qBAAqB,CACvBG,WAAY5W,EAAM1E,MAAM2O,OAAO7Q,GAC/BL,aAAc,KACdC,WAAY2d,EACZ1d,KAAM,IAAIC,OAGdsX,GAAW,MAOX,yBAAKnQ,UAAU,cACX,yBAAKiG,IAAI,2BACT,gDAEJ,yBAAKjG,UAAU,OACX,yBAAK+D,MAAM,wBAMf,6BAEI,+BACI,+BACI,4BACI,wBAAI/D,UAAU,UAAd,iBACA,wBAAIA,UAAU,UAAd,eACA,wBAAIA,UAAU,UAAd,WACA,wBAAIA,UAAU,WACd,4BACI,yBAAKsC,QAAS,WACV6T,GAAW,IACZnW,UAAU,gBAAgBiG,IAAI,4BAI7C,+BAEKtG,EAAMa,KAAKhI,iBAAiBuJ,KAAI,SAACyU,EAAanQ,GAE3C,OAAO,4BACH,wBAAIrG,UAAU,UAAUwW,EAAY9d,cACpC,wBAAIsH,UAAU,UAAUwW,EAAY7d,YACpC,wBAAIqH,UAAU,UAAUwW,EAAY9d,aAAe8d,EAAY7d,YAE/D,wBAAIqH,UAAU,sBChE3B,YA+BIQ,GAEX,OAAO,SAACD,GAGJE,MAAM,wBAAyB,CAC3BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACF,OAAOA,EAAKC,UACbF,MAAK,SAAC/C,GAEFA,EAASrF,KACR8H,EAAS,CACLzI,KAAM0I,EAAK/H,IAAM,mBAAqB,mBACtCV,QAAQ+F,EACRV,MAAM,cAEV7D,IAAMC,QAAQkK,GAAStI,UAAUoF,EAAK/H,IAAM,UAAY,aAExDc,IAAM0J,MAAMS,GAAStI,UAAU6H,MAAMC,mB,ikBCpDvDuT,G,YACJ,aAAe,IAAD,8BACZ,+CAUF3S,YAAc,SAAAxE,GAEZ/B,QAAQC,IAAI8B,GACZ,EAAK1H,MAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MAEvCjC,QAAQC,IAAI,OAAQ,EAAK5F,MAAMyL,MAC/B,IAAIqT,EAAkB,EAAK9e,MAAMwD,UAAUkX,QAAO,SAAAxU,GAChD,MAAsB,SAAlBwB,EAAInC,OAAOpE,GACN+E,EAASuF,KAAK5K,KAAO6G,EAAInC,OAAOqC,MACZ,aAAlBF,EAAInC,OAAOpE,GACb+E,EAASyG,WAAajF,EAAInC,OAAOqC,MAEjC1B,KAIXP,QAAQC,IAAI,KAAMkZ,GACdpX,EAAInC,OAAOqC,OACb,EAAKD,SAAS,CAAEnE,UAAWsb,KA3B7B,EAAK9e,MAAQ,CACX6N,WAAY,EACZC,YAAa,GACb5H,SAAU,CAAE/E,GAAI,GAChBqC,UAAW,GACXiI,KAAM,IAPI,E,iFAkCZzJ,KAAK2F,SAAS,CACZnE,UAAWxB,KAAK+F,MAAMa,KAAKpF,c,uCAGduK,GACfpI,QAAQC,IAAR,yBAA8BmI,IAC9B/L,KAAK2F,SAAS,CAAEkG,WAAYE,M,+BAGpB,IAAD,SACHC,EAAkBhM,KAAKhC,MAAM6N,WAAa7L,KAAKhC,MAAM8N,YACrDG,EAAmBD,EAAkBhM,KAAKhC,MAAM8N,YAChDiR,EAAkB/c,KAAKhC,MAAMwD,UAAU2K,MACzCF,EACAD,GAEF,OACE,6BAAS5F,UAAU,eACjB,yBAAKA,UAAU,OACb,yBAAK+D,MAAM,sBACT,kBAAC,IAAD,GACE0F,SAAS,OACTqJ,aAAa,WAFf,6BAGgBlZ,KAAK+F,MAAMa,KAAKpF,UAAU,IAH1C,0BAIY,SAACkE,EAAK+D,GACdA,GACE,EAAKS,YAAY,CACf3G,OAAQ,CACNpE,GAAI,OACJyG,MAAO6D,EAAK5K,UATtB,qBAaQmB,KAAK+F,MAAMa,KAAK/E,OAbxB,4BAcc,eAdd,KAkBF,yBAAKsI,MAAM,sBACT,kBAAC,GAAD,CACE0F,SAAS,YACTqJ,aAAclZ,KAAK+F,MAAMa,KAAKpF,UAAU,GACxC8E,SAAU,SAACZ,EAAKxB,GACdA,GACE,EAAKgG,YAAY,CACf3G,OAAQ,CACNpE,GAAI,WACJyG,MAAO1B,EAASyG,cAIxB/D,KAAM5G,KAAKhC,MAAMwD,UAAUkX,QAAO,SAAAxU,GAChC,OAAOA,EAASuF,KAAK5K,KAAO,EAAKb,MAAMyL,QAEzClD,YAAY,sBAIlB,yBAAKH,UAAU,cACb,yBAAKiG,IAAI,2BACT,0CAGF,6BACE,+BACE,+BACE,4BACE,mCACA,oCACA,yCACA,uCACA,wBAAIjG,UAAU,UAAd,SACA,wBAAIA,UAAU,UAAd,WACA,+BAGJ,+BACG2W,EAAiB5U,KAAI,SAAC/D,EAAUqI,GAC/B,OACE,4BACE,4BACE,2BAAIA,EAAI,IAEV,4BAAKrI,EAAShF,MACd,4BACGgF,EAASuG,UAAY,KAAOvG,EAASwG,UAAY,KAEpD,4BAAKxG,EAAS9E,QAAQ5B,MACtB,wBAAI0I,UAAU,UAAUhC,EAAS7E,OACjC,wBAAI6G,UAAU,UAAUhC,EAAS5E,SACjC,4BACE,kBAAC,IAAD,CAAMoJ,GAAI,oBAAsBxE,EAASjF,IACvC,yBAAKiH,UAAU,OAAOiG,IAAI,sCAS1C,gCACI,kBAAC,KAAD,CACER,WAAY7L,KAAKhC,MAAM6N,WACvBc,kBAAmBoQ,EAAiB5b,OACpCyL,gBAAiB5M,KAAKhC,MAAMwD,UAAUL,OACtC0L,mBAAoBkQ,EAAiB5b,OACrCmF,SAAU,SAAAyF,GAAU,OAAI,EAAKe,iBAAiBf,Y,GA9I7BvF,IAAMC,WAqJtBC,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAK,MACA5E,EAAMiC,oBAHAyC,CAMZmW,I,okBC1JH,IA6VenW,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAK,MACA5E,EAAMiC,gBADP,GAECjC,EAAM6C,gBAFP,GAGC7C,EAAMsB,kBAZY,SAAAqD,GACzB,MAAO,CACL8G,eAAgB,SAAA7G,GACdD,EAASgH,GAAkC/G,QAIlCF,EA7VK,SAAAX,GAAU,IACpB3G,EAAS4d,aAAY,SAAAhf,GAC3B,MAAO,CACLoB,KAAMpB,EAAMiG,gBAAgB7E,SAFxBA,KADmB,EAOH6K,mBAAS,IAC/B7K,KAAMA,GACH2G,EAAM7B,WATgB,oBAOtBlG,EAPsB,KAOf2H,EAPe,KAY3B,SAASuE,EAAYxE,GACnB1H,EAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MAClCD,EAAS,MAAK3H,IAwGhB,OACE,yBAAKoI,UAAU,gBACb,yBACE+D,MAAM,gBACN5B,MAAO,CAAE,UAAW,KAAM6B,QAAS,QAASC,QAAS,MAEvD,yBACElL,GAAG,SACHgL,MAAM,wBACN5B,MAAO,CAAE6B,QAAS,UAElB,yBAAKD,MAAM,iBACT,yBAAK/D,UAAU,YAAf,gBAEA,yBAAKA,UAAU,cACb,kBAAC,KAAD,CAAOkE,MAAO,CAAEC,MAAO,KACvB,2BACEnE,UAAU,gBACVG,YAAY,gBACZX,MAAOxG,EACPoL,UAAQ,EACRrL,GAAG,OACHjB,KAAK,SAGP,yBAAKkI,UAAU,OAEb,yBAAK+D,MAAM,sBACT,4BACEvE,MAAO5H,EAAMyL,KAAK5K,IAClByH,SAAU4D,EACV/K,GAAG,OACHiH,UAAU,UAET,CAAC,CAAE1I,KAAM,gBACPgN,OAAO3E,EAAMa,KAAK/E,OAClBsG,KAAI,SAAAsB,GACH,OAAO,4BAAQ7D,MAAO6D,EAAK5K,KAAM4K,EAAK/L,WAW9C,yBAAKyM,MAAM,sBACT,2BACEvE,MAAO5H,EAAMuB,MACb+G,SAAU4D,EACV3D,YAAY,QACZpH,GAAG,QACHjB,KAAK,SACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAM2M,UACbrE,SAAU4D,EACV3D,YAAY,aACZpH,GAAG,YACHjB,KAAK,OACLiM,MAAM,cAIV,yBAAKA,MAAM,sBACT,2BACEvE,MAAO5H,EAAM4M,SACbtE,SAAU4D,EACV3D,YAAY,YACZpH,GAAG,WACHjB,KAAK,OACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAMuH,MACbe,SAAU4D,EACV3D,YAAY,QACZpH,GAAG,QACHjB,KAAK,QACLiM,MAAM,cAKV,yBAAKA,MAAM,sBACT,4BACEvE,MAAO5H,EAAMif,OACb3W,SAAU4D,EACV9D,UAAU,SACVjH,GAAG,UAEH,0CACA,4BAAQyG,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,aAKN,yBAAKQ,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAM8M,IACbxE,SAAU4D,EACV3D,YAAY,MACZpH,GAAG,MACHjB,KAAK,SACLiM,MAAM,WACN+S,UAAU,QAKd,yBAAK/S,MAAM,sBACT,4BACEvE,MAAO5H,EAAMmf,SACb7W,SAAU4D,EACV9D,UAAU,SACVjH,GAAG,YAEH,4BAAQyG,MAAM,YAAd,YACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,oBAAd,uBAKN,yBAAKQ,UAAU,OACb,yBAAK+D,MAAM,sBACT,8BACEvE,MAAO5H,EAAMwB,QACb8G,SAAU4D,EACV3D,YAAY,UACZpH,GAAG,UACHgL,MAAM,0BAKV,yBAAKA,MAAM,sBACT,2BACEvE,MAAO5H,EAAMof,KACb9W,SAAU4D,EACV3D,YAAY,OACZpH,GAAG,OACHjB,KAAK,OACLiM,MAAM,eAMZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,8BACEvE,MAAO5H,EAAMiN,SACb3E,SAAU4D,EACV3D,YAAY,WACZpH,GAAG,WACHgL,MAAM,0BAKV,yBAAKA,MAAM,sBACT,4BACEvE,MAAO5H,EAAMsB,QAAQT,IACrByH,SAAU4D,EACV/K,GAAG,UACHiH,UAAU,UAET,CAAC,CAAE1I,KAAM,mBACPgN,OAAO3E,EAAMa,KAAKrF,WAClB4G,KAAI,SAAA7I,GACH,OACE,4BAAQsG,MAAOtG,EAAQT,KAAMS,EAAQ5B,cAUrD,yBAAKyM,MAAM,gBACT,4BACE/D,UAAU,0CACVsC,QAlTV,WAEA/E,QAAQC,IAAI4H,OAAOC,KAAKzN,EAAMyL,OAEzB9F,QAAQC,IAAI,kBAAkB5F,EAAM2M,gBAEdO,IAApBlN,EAAM2M,WAA6C,KAAlB3M,EAAM2M,UAC1CQ,KAAM9B,MAAM,+BAAgC,CAC1C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEkBJ,IAAnBlN,EAAM4M,UAA2C,KAAjB5M,EAAM4M,SAChDO,KAAM9B,MAAM,oCAAqC,CAC/C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,MAEkC,IAAnCE,OAAOC,KAAKzN,EAAMyL,MAAMtI,QAA6B,gBAAbnD,EAAMyL,KACxD0B,KAAM9B,MAAM,+BAAgC,CAC1C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAOaJ,IAAhBlN,EAAMuH,OAAqC,KAAdvH,EAAMuH,MAC3C4F,KAAM9B,MAAM,yCAA0C,CACpD+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAE4B,IAhC3B,wGAgCKC,KAAKvN,EAAMuH,OAC5B4F,KAAM9B,MAAM,0CAA2C,CACrD+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEgBJ,IAAjBlN,EAAMif,QAAuC,WAAfjf,EAAMif,OAC9C9R,KAAM9B,MAAM,iCAAkC,CAC5C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEaJ,IAAdlN,EAAM8M,KAAiC,KAAZ9M,EAAM8M,IAC3CK,KAAM9B,MAAM,mCAAoC,CAC9C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEkBJ,IAAnBlN,EAAMmf,UAA2C,aAAjBnf,EAAMmf,SAChDhS,KAAM9B,MAAM,mCAAoC,CAC9C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEiBJ,IAAlBlN,EAAMwB,SAAyC,KAAhBxB,EAAMwB,QAC/C2L,KAAM9B,MAAM,mCAAoC,CAC9C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEcJ,IAAflN,EAAMof,MAAmC,KAAbpf,EAAMof,KAC5CjS,KAAM9B,MAAM,mCAAoC,CAC9C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEkBJ,IAAnBlN,EAAMiN,UAA2C,KAAjBjN,EAAMiN,SAChDE,KAAM9B,MAAM,0BAA2B,CACrC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEeJ,IAAhBlN,EAAMuB,OAAqC,KAAdvB,EAAMuB,MAC7C4L,KAAM9B,MAAM,uCAAwC,CAClD+B,SAAU,YACVC,OAAQ,QACRC,QAAS,MAEoC,IAAtCE,OAAOC,KAAKzN,EAAMsB,SAAS6B,OACpCgK,KAAM9B,MAAM,4BAA6B,CACvC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAGXH,KAAMvL,QAAQ,sCAAuC,CACnDwL,SAAU,YACVC,OAAQ,QACRC,QAAS,MAEX3H,QAAQC,IAAI,eAAgB5F,GAE5B+H,EAAM0H,eAAezP,MAmNf,uBAAGmM,MAAM,mBAJX,QAMA,4BACE/D,UAAU,4CACVsC,QAAS,WAEP3C,EAAMsX,iBAAgB,KAGxB,uBAAGlT,MAAM,mBAPX,gBCxUJmT,G,YACF,WAAYvX,GAAQ,IAAD,8BACf,4CAAMA,KAQd/H,MAAQ,CACJuf,kBAAiB,GARb,EAAKvf,MAAQ,CACX6N,WAAY,EACZC,YAAa,IAJA,E,8EAkBFC,GACbpI,QAAQC,IAAR,yBAA8BmI,IAC9B/L,KAAK2F,SAAS,CAAEkG,WAAYE,M,+BAEtB,IAAD,OAEDC,EAAkBhM,KAAKhC,MAAM6N,WAAa7L,KAAKhC,MAAM8N,YACrDG,EAAmBD,EAAkBhM,KAAKhC,MAAM8N,YAChD0R,EAAoBxd,KAAK+F,MAAMa,KAAKpF,UAAU2K,MAChDF,EACAD,GAEF,OAAO,6BAAS5F,UAAU,eACrBpG,KAAKhC,MAAMuf,kBAAoB,kBAAC,GAAD,CAAarZ,SAAUlE,KAAKhC,MAAMyf,eAAgBJ,gBAAiB,SAACK,GAChG,EAAK/X,SAAS,CACX4X,kBAAiB,OAIxB,yBAAKnX,UAAU,cACX,yBAAKiG,IAAI,2BACT,0CAEJ,yBAAKjG,UAAU,OACX,yBAAK+D,MAAM,sBACP,2BAAO5D,YAAY,cAAcpH,GAAG,aAAajB,KAAK,OAAOiM,MAAM,aACnE,2BAAO/D,UAAU,iBAAiBmG,IAAI,cAAtC,sBAIR,6BAEI,+BACI,+BACI,4BACI,mCACA,oCACA,oCACA,yCACA,uCACA,wBAAInG,UAAU,UAAd,SACA,wBAAIA,UAAU,UAAd,WACA,4BACKpG,KAAK+F,MAAMyG,YAAc,yBAAK9D,QAAS,WACpC,EAAK/C,SAAS,CACV8X,eAAe,CACXne,QAAQ,GACRmK,KAAK,IAET8T,kBAAiB,KAEtBnX,UAAU,gBAAgBiG,IAAI,4BAI7C,+BAEKmR,EAAkBrV,KAAI,SAACjE,EAAUuI,GAC9B,OAAO,4BACH,4BAAI,2BAAKA,EAAI,IACb,4BAAKvI,EAAS9E,MACd,4BAAK8E,EAASuF,KAAK/L,MACnB,4BAAKwG,EAASyG,UAAY,KAAOzG,EAAS0G,UAAY,KACtD,4BAAK1G,EAAS5E,QAAQ5B,MACtB,wBAAI0I,UAAU,UAAUlC,EAAS3E,OACjC,wBAAI6G,UAAU,UAAUlC,EAAS1E,SACjC,4BACI,yBAAKkN,MAAM,OAAOhE,QAAS,WACvB,EAAK/C,SAAS,CACV8X,eAAevZ,EACfqZ,kBAAiB,KAGvBnX,UAAU,eAAeiG,IAAI,sCAC/B,kBAAC,IAAD,CAAMzD,GAAI,oBAAsB1E,EAAS/E,IACrC,yBAAKiH,UAAU,OAAOiG,IAAI,qCASxD,gCACE,kBAAC,KAAD,CACER,WAAY7L,KAAKhC,MAAM6N,WACvBc,kBAAmB6Q,EAAkBrc,OACrCyL,gBAAiB5M,KAAK+F,MAAMa,KAAKpF,UAAUL,OAC3C0L,mBAAoB2Q,EAAkBrc,OACtCmF,SAAU,SAAAyF,GAAU,OAAI,EAAKe,iBAAiBf,a,GA7GrCvF,IAAMC,WA0HdC,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAM5E,EAAMiC,mBAFLyC,CAIZ4W,I,6jBC5HH,IAkRe5W,gBAAQ,SAAA1E,GACrB,MAAO,CACL4E,KAAK,MAAM5E,EAAM2C,YAAb,GAA6B3C,EAAMsB,kBAVhB,SAAAqD,GACzB,MAAO,CACLgX,WAAY,SAAA/W,GACVD,EAASrE,GAAsBsE,QAKtBF,EAlRC,SAAAX,GAAU,IAAD,EACCkE,mBAAS,MAC5BlE,EAAMpH,OAFY,oBAClBX,EADkB,KACX2H,EADW,KAMnBiY,EAAUpX,IAAMyT,YAChB4D,EAAiBrX,IAAMyT,YAE3B,SAAS/P,EAAYxE,GACnB1H,EAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MAClCD,EAAS3H,GAaX,IAAI8f,EAAe,GAQnB,SAASC,EAA0BC,GACjC,IAAIC,EAAM,GAMV,OAJAD,EAAK9a,SAAQ,SAAAQ,GACXua,EAAIva,EAAKhG,MAAQ,QAGZugB,EAsGT,OAnGAzH,qBAAU,WAOR,IAAI3U,EAAQkE,EAAMa,KAAK/E,MAEvBsD,OAAOyO,EAAEgK,EAAQpD,SAASzG,MAAM,CAC9BnN,KAAMb,EAAMpH,KAAKkD,MAAMsG,KAAI,SAAAzE,GACzB,MAAO,CAAEsQ,IAAKtQ,EAAKhG,SAErBuW,UAJ8B,SAIpBC,GACR4J,EAAe9d,KAAKmU,UAAUhM,KAAI,SAAA+L,GAChC,OAAOrS,EAAM4B,MAAK,SAAAgG,GAChB,OAAOyK,EAAKF,KAAOvK,EAAK/L,QACvBmB,OAGLsG,OAAOyO,EAAEiK,EAAerD,SAAS0D,OAAOhK,EAAKzQ,KAAK,WAEpD2Q,aAb8B,SAajBF,GACX4J,EAAe9d,KAAKmU,UAAUhM,KAAI,SAAA+L,GAChC,OAAOrS,EAAM4B,MAAK,SAAAgG,GAChB,OAAOyK,EAAKF,KAAOvK,EAAK/L,QACvBmB,QAGPwV,oBAAqB,CACnBF,UAAWpO,EAAMpH,KAAKkD,MAEtB+E,KAAMmX,EAA0BhY,EAAMa,KAAK/E,OAC3C0I,MAAOsK,IACPC,UAAW,KAIf3P,OACGyO,EAAE,gBACFnQ,KAAK,SACL0a,MAAK,SAAC1R,EAAG/I,GACRyB,OAAOyO,EAAEiK,EAAerD,SAAS0D,OAAOxa,SA0D5C,yBAAK0C,UAAU,YACb,yBACE+D,MAAM,gBACN5B,MAAO,CAAE,UAAW,KAAM6B,QAAS,QAASC,QAAS,MAEvD,yBAAKlL,GAAG,SAASgL,MAAM,QAAQ5B,MAAO,CAAE6B,QAAS,UAC/C,yBAAKD,MAAM,iBACT,yBAAK/D,UAAU,YAAf,YAEA,yBAAKA,UAAU,cACb,kBAAC,KAAD,CAAOkE,MAAO,CAAEC,MAAO,KAEvB,2BACEnE,UAAU,gBACVjH,GAAG,OACHqL,UAAQ,EACR5E,MAAO5H,EAAMa,IAAMb,EAAMoB,KAAO2G,EAAMa,KAAKhC,SAC3C1G,KAAK,SAEP,yBAAKkI,UAAU,OAEb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAMqB,SACbiH,SAAU4D,EACV3D,YAAY,YACZpH,GAAG,WACHjB,KAAK,OACLiM,MAAM,cAIV,yBAAKA,MAAM,sBACT,yBAAKA,MAAM,QAAQuL,IAAKkI,GACtB,2BAAOrX,YAAY,WAAW4D,MAAM,kBAGtC,yBAAK/D,UAAU,iBAAiBsP,IAAKmI,MAIzC,yBAAKzX,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAMuH,MACbe,SAAU4D,EACV3D,YAAY,QACZpH,GAAG,QACHjB,KAAK,QACLiM,MAAM,eAKZ,yBAAK/D,UAAU,OACb,yBAAK+D,MAAM,sBACT,2BACEvE,MAAO5H,EAAMuB,MACb+G,SAAU4D,EACV3D,YAAY,QACZpH,GAAG,QACHjB,KAAK,SACLiM,MAAM,eAkBZ,yBAAK/D,UAAU,UAsBnB,yBAAK+D,MAAM,gBACT,4BACE/D,UAAU,0CACVsC,QA/JV,SAAkB0V,GAChBA,EAAEtY,iBAEF9H,EAAM6D,MAAQic,EAEd9f,EAAMoB,KAAOpB,EAAMa,IAAMb,EAAMoB,KAAO2G,EAAMa,KAAKhC,cAIzBsG,IAAnBlN,EAAMqB,UAA6C,KAAnBrB,EAAMqB,SACzC8L,KAAM9B,MAAM,2BAA4B,CACtC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,MAEqB,IAAvBtN,EAAM6D,MAAMV,OACrBgK,KAAM9B,MAAM,0BAA2B,CACrC+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAEeJ,IAAhBlN,EAAMuH,OAAqC,KAAdvH,EAAMuH,MAC7C4F,KAAM9B,MAAM,qCAAsC,CAChD+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAE4B,IArB3B,wGAqBKC,KAAKvN,EAAMuH,OAC5B4F,KAAM9B,MACJ,uCACA,CACE+B,SAAU,YACVC,OAAQ,QACRC,QAAS,WAGaJ,IAAhBlN,EAAMuB,OAAqC,KAAdvB,EAAMuB,MAC7C4L,KAAM9B,MAAM,kCAAmC,CAC7C+B,SAAU,YACVC,OAAQ,QACRC,QAAS,OAGX3H,QAAQC,IAAI,OAAO5F,GACnBmN,KAAMvL,QAAQ,6BAA8B,CAC1CwL,SAAU,YACVC,OAAQ,QACRC,QAAS,MAEXvF,EAAM4X,WAAW3f,MAgHX,uBAAGmM,MAAM,mBAJX,QAMA,4BACE/D,UAAU,4CACVsC,QAAS,WAEP3C,EAAMgW,aAAY,KAGpB,uBAAG5R,MAAM,mBAPX,gBC9PJkU,G,YACL,WAAatY,GACZ,IAAD,8BACG,4CAAMA,KASN/H,MAAQ,CAEJke,cAAc,GAZrB,EAqBGvU,OAAS,WAEL,IAAIqE,EAAkB,EAAKhO,MAAM6N,WAAa,EAAK7N,MAAM8N,YACzDG,EAAmBD,EAAkB,EAAKhO,MAAM8N,YAChDwS,EAAc,EAAKvY,MAAMa,KAAKjF,MAAMwK,MACtCF,EACAD,GAYE,OARW,GAFE,EAAKjG,MAAMa,KAAKjF,MAAMjB,QAAQ,EAAK1C,MAAMie,cAGlD,EAAKje,MAAMie,WAAa,EAAKlW,MAAMa,KAAKjF,MAAM8B,MAAK,SAAC9E,GAChD,OAAOA,EAAKE,KAAO,EAAKb,MAAMie,WAAWpd,QACvC,CACFgD,MAAO,KAIR,6BAASuE,UAAU,eACrB,EAAKpI,MAAMke,aAAe,kBAAC,GAAD,CAASvd,KAAM,EAAKX,MAAMie,WAAYF,YAAa,WAC1E,EAAKpW,SAAS,CACVuW,cAAc,OAEd,KACR,yBAAK9V,UAAU,cACX,yBAAKiG,IAAI,2BACT,sCAEJ,yBAAKjG,UAAU,OACX,yBAAK+D,MAAM,sBACP,2BAAO5D,YAAY,cAAcpH,GAAG,aAAajB,KAAK,OAAOiM,MAAM,aACnE,2BAAO/D,UAAU,iBAAiBmG,IAAI,cAAtC,kBAIR,6BAEI,+BACI,+BACI,4BACI,mCACA,6CACA,wBAAInG,UAAU,UAAd,aACA,wBAAIA,UAAU,UAAd,SACA,uCACA,uCACA,oCACA,4BACI,yBAAKsC,QAAS,WACV,EAAK/C,SAAS,CACVsW,WAAY,CACRpa,MAAO,IAEXqa,cAAc,KAEnB9V,UAAU,gBAAgBiG,IAAI,4BAI7C,+BAEKiS,EAAanW,KAAI,SAACxJ,EAAM8N,GACrB,OAAO,4BACH,4BAAI,2BAAKA,EAAI,IACb,4BAAK9N,EAAKS,MACV,wBAAIgH,UAAU,UAAUzH,EAAKU,UAC7B,4BAAKV,EAAK4G,OACV,4BAAK5G,EAAKY,OACV,4BAAKZ,EAAKkD,MAAMsG,KAAI,SAACsB,GACjB,OAAOA,EAAK/L,QACbye,KAAK,MACR,4BAAKxd,EAAKK,MACV,4BACI,yBAAK0N,MAAM,OAAOhE,QAAS,WACvB,EAAK/C,SAAS,CACVsW,WAAYtd,EACZud,cAAc,KAGpB9V,UAAU,eAAeiG,IAAI,6CAUnD,gCACJ,kBAAC,KAAD,CACER,WAAY,EAAK7N,MAAM6N,WACvBc,kBAAmB2R,EAAand,OAChCyL,gBAAiB,EAAK7G,MAAMa,KAAKjF,MAAMR,OACvC0L,mBAAoByR,EAAand,OACjCmF,SAAU,SAAAyF,GAAU,OAAI,EAAKe,iBAAiBf,UAlHxD,EAAK/N,MAAQ,CACTie,WAAY,CAAEpa,MAAO,IACvBgK,WAAY,EACZC,YAAa,IALlB,E,8EAgBoBC,GACbpI,QAAQC,IAAR,yBAA8BmI,IAC9B/L,KAAK2F,SAAS,CAAEkG,WAAYE,Q,GApBjBvF,IAAMC,WAiIVC,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAM5E,EAAM2C,eAFL+B,CAIZ2X,ICvIY,I,OAAA,SA0BFzX,GACT,OAAO,SAAAD,GACLE,MAAM,wBAAyB,CAC7BC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMxI,KAAKE,UAAUkI,KAEpBK,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAA9D,GACAA,EAAKtE,KACP8H,EAAS,CACPzI,KAAM,mBACNC,QAASgF,IAEXxD,IAAMC,QAAQkK,GAAShN,MAAMyM,QAE7B5J,IAAM0J,MAAMS,GAAShN,MAAMuM,MAAMC,oB,ikBCvCvCiV,G,YAGF,aAAe,IAAD,8BAEV,+CAmBJ3H,gBAAkB,SAACC,EAAMnR,EAAKmI,GAM1BgJ,EAAKpS,QAAUoJ,EACfgJ,EAAKC,OAASjJ,EAAcT,cAC5ByJ,EAAK1J,gBAAkBU,EAAcV,gBAErC,EAAKxH,SAAS,EAAK3H,QA/BT,EAqCd+Y,YAAc,WAEV,MAAO,CACHtS,QAAQ,aAAG2I,cAAe,EAAGD,gBAAiB,EAAGG,WAAY,EAAGC,WAAY,GAArE,aAAoF,GAC3FyJ,KAAM,EACNC,MAAO,EACPC,MAAO,EAGPtB,MAAO,EACPuB,aAAc,EACdC,SAAU,EACVC,cAAe,EACfC,IAAK,EACLC,SAAS,EACTC,WAAW,IApDL,EA4DdtN,YAAc,SAACxE,GAEX,EAAK1H,MAAM0H,EAAInC,OAAOpE,IAAMuG,EAAInC,OAAOqC,MACvC,EAAKD,SAAS,EAAK3H,QA/DT,EAmEdyZ,WAAa,SAACZ,EAAMnZ,EAAMkI,GAEtBiR,EAAKnZ,GAAQkI,EAEb,EAAKD,SAAS,EAAK3H,QAvET,EA2Ed0Z,WAAa,WACL,EAAK1Z,MAAM2Z,eACX,EAAK3Z,MAAM2Z,aAAaJ,SAAU,EAClC,EAAKvZ,MAAM4Z,cAAe,EAC1B,EAAKjS,SAAS,EAAK3H,SA/Eb,EAmFd6Z,YAAc,WACN,EAAK7Z,MAAM2Z,eACX,EAAK3Z,MAAM2Z,aAAaJ,SAAU,EAClC,EAAKvZ,MAAM4Z,cAAe,EAC1B,EAAKjS,SAAS,EAAK3H,SAvFb,EA2Fd0Y,eAAiB,SAACT,GAEVA,IACA,EAAKjY,MAAMyY,SAAS/W,KAAKuW,GACzB,EAAKtQ,SAAS,EAAK3H,SA/Fb,EAmGdiU,kBAAoB,WAgBhB9M,OAAOyO,EAAE,EAAKC,KAAKsE,oBAAoBF,WAAW,KAnHxC,EAwHduG,aAAe,WAEX,EAAKxgB,MAAM2X,OAAS,EAAK5P,MAAMa,KAAK5D,aACpC,EAAK+C,MAAMyY,aAAa,EAAKxgB,QAxH7B,EAAKA,MAAQ,CACT+X,aAAc,IAAI9W,KAElB2Y,cAAc,EACdhC,MAAO,EACPC,SAAU,EAEVY,SAAU,GACVhN,KAAM,GACN6O,MAAO,CACH,EAAKvB,gBAIb,EAAKwB,cAAgB,EAAKb,WAjBhB,E,sEA+HJ,IAAD,SAEDe,EAAczY,KAAKhC,MAAMsa,MAAMI,QAAO,SAAC7B,GACvC,OAAQA,EAAKU,WAGboB,EAAY,EACZC,EAAgB,EAChBC,EAAoB,EAEpBJ,EAAYtX,OAEZsX,EAAYvV,SAAQ,SAAC2T,GACjBA,EAAKjB,MAAQkD,KAAKC,MAAMlC,EAAKG,MAAQH,EAAKpS,QAAQ8I,YAAc,IAAOsJ,EAAKpS,QAAQ0I,iBAAmB,IAAQ0J,EAAKI,OAAS,IAAMJ,EAAKpS,QAAQ0I,iBAAmB,IACnK0J,EAAKQ,cAAgByB,KAAKC,MAAMlC,EAAKjB,OAASiB,EAAKM,aAAe,MAClEwB,IAAc9B,EAAKjB,MACnBgD,IAAkB/B,EAAKQ,cACvBwB,IAAsBhC,EAAKO,aAK/BuB,GAAaF,EAAY,GAAG7C,MAC5BgD,GAAiBH,EAAY,GAAGpB,cAChCwB,GAAqBJ,EAAY,GAAGrB,UAIxCpX,KAAKhC,MAAM4X,MAAQ+C,EACnB3Y,KAAKhC,MAAM6X,SAAW+C,EAAgBC,EAItC,IAAIG,EAAe,EAMnB,OAJAhZ,KAAKhC,MAAMyY,SAASvT,SAAQ,SAAC+S,GACzB+C,IAAiB/C,EAAQK,UAGtB,6BAASlQ,UAAU,wBAEtB,kBAAC,GAAD,CAAgBgQ,SAAU,WAEtB,EAAKzQ,SAAS,CACVsT,eAAe,KAGpBxC,SAAUzW,KAAKhC,MAAMyY,SAAUvS,SAAU,QAASgS,QAASlW,KAAKhC,MAAMib,cAAevC,eAAgB1W,KAAK0W,iBAE7G,kBAAC,GAAD,CAAcP,MAAO,WAEjB,EAAKoC,iBAGNnC,SAAU,WAET,EAAKzQ,SAAS,CACViS,cAAc,KAGnBlL,MAAO1M,KAAKhC,MAAM0O,MAAOc,YAAaxN,KAAKhC,MAAMwP,YAAa0I,QAASlW,KAAKhC,MAAM4Z,eAErF,yBAAKxR,UAAU,cACX,yBAAKiG,IAAI,2BACT,6CACA,sCAAW,8BAAOrM,KAAK+F,MAAMa,KAAK5D,eAClC,yBAAKoD,UAAU,eACX,yBAAK+D,MAAM,OAAM,0BAAM/D,UAAU,uBAAhB,uBAAjB,IAAkF,0BAAMA,UAAU,oBAAoB0S,KAAKC,MAAMJ,IAAjI,KACA,yBAAKxO,MAAM,OAAM,0BAAM/D,UAAU,uBAAhB,uBAAgE,0BAAMA,UAAU,oBAAoB0S,KAAKC,MAAMH,IAAhI,KACA,yBAAKzO,MAAM,OAAM,0BAAM/D,UAAU,uBAAhB,qBAA8D,0BAAMA,UAAU,oBAAoB0S,KAAKC,MAAMF,IAA9H,KACA,yBAAK1O,MAAM,OAAM,0BAAM/D,UAAU,uBAAhB,iBAA0D,0BAAMA,UAAU,oBAAoB0S,KAAKC,MAAMH,EAAgBC,IAA1I,KACA,yBAAK1O,MAAM,iBAAgB,0BAAM/D,UAAU,uBAAhB,iBAA0D,0BAAMA,UAAU,oBAAoB0S,KAAKC,MAAMJ,IAApI,KACA,yBAAKxO,MAAM,0BAAyB,0BAAM/D,UAAU,uBAAhB,QAAiD,0BAAMA,UAAU,oBAAoB0S,KAAKC,MAAMC,IAApI,MAGJ,yBAAK5S,UAAU,0BAEX,yBAAKsC,QAAS,WAAQ,EAAK/C,SAAS,CAAEsT,eAAe,KAAWvM,MAAM,cAActG,UAAU,0BAA0BiG,IAAI,oCAC5H,yBAAK3D,QAAS,WAGV,EAAK8V,gBAEN9R,MAAM,oBAAoBtG,UAAU,0BAA0BiG,IAAI,qCACrE,yBAAKK,MAAM,OAAOtG,UAAU,0BAA0BiG,IAAI,iCAC1D,yBAAKK,MAAM,QAAQtG,UAAU,0BAA0BiG,IAAI,oCAInE,yBAAKjG,UAAU,OAEX,yBAAK+D,MAAM,sBAEP,kBAAC,GAAD,CAAc0F,SAAS,YACnBvJ,SAAU,SAACZ,EAAKtB,GACZA,GAAY,EAAK8F,YAAY,CACzB3G,OAAQ,CACJpE,GAAI,WACJyG,MAAOxB,EAASvF,QAI5B+H,KACI5G,KAAK+F,MAAMa,KAAK1H,UAClBqH,YAAY,qBAYtB,yBAAK4D,MAAM,sBACP,8BAAO7D,SAAUtG,KAAKkK,YAAa3D,YAAY,gBAAgBpH,GAAG,eAAejB,KAAK,QAAtF,mBAAgG,gBAAhG,oBAAmH,sBAAnH,MASR,yBAAKkI,UAAU,OAIX,yBAAK+D,MAAM,sBACP,8BAAU7D,SAAUtG,KAAKkK,YAAa3D,YAAY,QAAQpH,GAAG,QAAQgL,MAAM,iCAOnF,6BAEI,2BAAO/D,UAAU,eACb,2BAAOA,UAAU,eACb,4BACI,wBAAIA,UAAU,cAAd,OACA,wBAAIA,UAAU,SAAd,SACA,wBAAImC,MAAO,CAAEuH,MAAO,UAApB,WACA,wBAAI1J,UAAU,SAAd,QACA,wBAAIA,UAAU,SAAd,SACA,wBAAIA,UAAU,SAAd,UACA,wBAAIA,UAAU,SAAd,QACA,wBAAIA,UAAU,SAAd,oBACA,wBAAIA,UAAU,SAAd,SACA,0CACA,mCACA,0CACA,qCAQR,2BAAOA,UAAU,uBAUZpG,KAAKhC,MAAMsa,MAAMnQ,KAAI,SAAC0O,EAAMpK,GAOzB,IAAI0M,GAAWtC,EAAKpS,QAAQ6I,WAAauJ,EAAKpS,QAAQ8I,YAAYnM,WAAWgY,MAAM,KAAK,GAKxF,OAFiCD,EAAV,OAAtBA,EAAQ/X,WAAkC+X,EAAU,KAAOtC,EAAKpS,QAAQ6I,WAAcuJ,EAAKpS,QAAQ8I,WAAa4L,GAAwB,IAElI,wBAAI/S,UAAWyQ,EAAKU,QAAU,cAAgB,IACjD,4BAAI,2BAAK9K,EAAI,IACb,wBAAIrG,UAAW,aAAqC,KAAtB+S,EAAQ/X,WAAoB,aAAe,KAAzE,IAA+E,0BAAMgF,UAAU,mBAAmB+S,IAElH,4BACI,kBAAC,GAAD,CAActJ,SAAS,OACnBvJ,SAAU,SAACZ,EAAKjB,GACZA,GAAW,EAAKmS,gBAAgBC,EAAMnR,EAAKjB,IAE/CmC,KACI,EAAKb,MAAMa,KAAKnF,SAASiX,QAAO,SAACjU,GAC7B,OAAgH,GAAzG,EAAKzG,MAAMsa,MAAMI,QAAO,SAACW,GAAY,OAAOxC,GAAQwC,GAASA,EAAM5U,QAAQtF,IAAMsF,EAAQtF,MAAMgC,UAE5GoF,YAAY,oBAkBtB,4BAAK,2BAAOA,YAAY,OAAOD,SAAU,SAACZ,GAGtC,IAAIyT,IAAatC,EAAKpS,QAAQ6I,WAAauJ,EAAKpS,QAAQ8I,YAAYnM,WAAWgY,MAAM,KAAK,IAEpF1T,EAAInC,OAAOqC,MAASuT,GACtBtC,EAAKO,SAAW,EAChB,EAAKK,WAAWZ,EAAMnR,EAAInC,OAAOpE,GAAIga,IAGrC,EAAK1B,WAAWZ,EAAMnR,EAAInC,OAAOpE,GAAIuG,EAAInC,OAAOqC,QAKrDQ,UAAU,WAAWlI,KAAK,SAASiB,GAAG,OAAOyG,MAAOiR,EAAKG,QAE5D,4BAAK,2BAAOzQ,YAAY,QAAQD,SAAU,SAACZ,IAEtBmR,EAAKpS,QAAQ6I,WAAauJ,EAAKpS,QAAQ8I,YAAYnM,WAAWgY,MAAM,KAAK,GAE3EvC,EAAKpS,QAAQ6I,WAF5B,IAIIgM,EAAkBzC,EAAKG,KAAOH,EAAKpS,QAAQ8I,aAAe7H,EAAInC,OAAOqC,MAEzE,GAAI0T,EAAgBzC,EAAKpS,QAAQ6I,WAI7B,GAFqBuJ,EAAKpS,QAAQ6I,WAAagM,EAE1B,EACjB,EAAK7B,WAAWZ,EAAMnR,EAAInC,OAAOpE,GAAIuG,EAAInC,OAAOqC,WAC7C,CAEH,IAAI2T,EAAqB7T,EAAInC,OAAOqC,OAAS0T,EAAgBzC,EAAKpS,QAAQ6I,YAC1EuJ,EAAKO,SAAW,EAChB,EAAKK,WAAWZ,EAAMnR,EAAInC,OAAOpE,GAAIoa,QAKzC,EAAK9B,WAAWZ,EAAMnR,EAAInC,OAAOpE,GAAIuG,EAAInC,OAAOqC,QAGrDQ,UAAU,WAAWlI,KAAK,SAASiB,GAAG,QAAQyG,MAAOiR,EAAKI,SAE7D,4BAAK,2BAAO1Q,YAAY,SAASH,UAAU,WAAWlI,KAAK,SAAS0H,MAAOiR,EAAKK,SAGhF,4BAAI,2BAAOwC,QAAS,SAAChU,GACjB,EAAK+R,WAAWZ,EAAMnR,EAAInC,OAAOpE,GAAIuG,EAAInC,OAAOqC,QACjDW,YAAY,IAAIpH,GAAG,OAAOiH,UAAU,WAAWlI,KAAK,SAAS0H,MAAOiR,EAAK7J,QAG5E,4BAAI,2BAAO5G,UAAU,WAAWoT,UAAQ,EAACtb,KAAK,OAAOub,UAAQ,EAAC7T,MAAOiR,EAAKpS,QAAQ0I,mBAGlF,4BAAI,2BAAO/G,UAAU,WAAWoT,UAAQ,EAACtb,KAAK,OAAOub,UAAQ,EAAC7T,MAAQ,SAACiR,GACnE,OAAOA,EAAKjB,MADsD,CAEnEiB,MAGH,4BAAK,2BAAO6C,QAAS,SAAChU,GAClB,EAAK+R,WAAWZ,EAAMnR,EAAInC,OAAOpE,GAAIuG,EAAInC,OAAOqC,QACjDQ,UAAU,WAAWjH,GAAG,eAAejB,KAAK,SAAS0H,MAAOiR,EAAKM,gBACpE,4BAAK,2BAAOqC,UAAQ,EAACpT,UAAU,WAAWlI,KAAK,SAAS0H,MAAQ,SAACiR,GAG7D,OAAOA,EAAKQ,cAHgD,CAK7DR,MAIH,4BAAI,2BAAO1X,GAAG,WAAWua,QAAS,SAAChU,GAC/B,EAAK+R,WAAWZ,EAAMnR,EAAInC,OAAOpE,GAAIuG,EAAInC,OAAOqC,QACjDQ,UAAU,WAAWuT,UAAW,SAACjU,GAEhC,GAAe,SAAXA,EAAItD,IAAgB,CAEpB,IAAKyU,EAAKpS,QAAQ5F,IAEd,YADAc,IAAM0J,MAAM,2BAII,EAAKrL,MAAMsa,MAAM,EAAKta,MAAMsa,MAAMnX,OAAS,GACjDqW,WAAY,EAE1B,EAAKxZ,MAAMsa,MAAM5Y,KAAK,EAAKqX,eAE3B,EAAKpR,SAAS,EAAK3H,SAIxBE,KAAK,SAAS0H,MAAOiR,EAAKO,YAC7B,4BAAI,2BAAOhR,UAAU,WAAWlI,KAAK,SAASsb,UAAQ,EAAC5T,MAAOiR,EAAKjB,MAAQiB,EAAKQ,cAAgBR,EAAKO,YACrG,4BAAKP,EAAKW,UAAY,uBAAGrN,MAAM,oCAAoCzB,QAAS,WAE5D,EAAK1K,MAAMsa,MAAM,EAAKta,MAAMsa,MAAMnX,OAAS,KAC7C,EAAKnD,MAAMsa,MAAM,EAAKta,MAAMsa,MAAMnX,OAAS,GAAK,EAAK4V,eAE/D,EAAKpR,SAAS,EAAK3H,MAAMsa,SALP,YAOJ,uBAAGnO,MAAM,mCAAmCzB,QAAS,WAE/DmO,EAAKU,SAEL,EAAKgB,cAAgB,EAAKV,YAE1B,EAAKlS,SAAS,CACV6H,YAAa,+CACbd,MAAO,eACPiL,aAAcd,EACde,cAAc,MAIlB,EAAKW,cAAgB,EAAKb,WAE1B,EAAK/R,SAAS,CACV6H,YAAa,8CACbd,MAAO,sBACPiL,aAAcd,EACde,cAAc,OApBR,IAwBbf,EAAKU,QAAU,UAAY,+B,GAxdxC/Q,IAAMC,WAwefC,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAK,MACE5E,EAAMe,gBADT,GAEGf,EAAMmC,gBAFT,GAGGnC,EAAMiC,gBAHT,GAIGjC,EAAMwC,qBAGlB,SAACmC,GAEA,MAAO,CACH6X,aAAc,SAAC5X,GAEXD,EAASrE,GAAsBsE,QAd5BF,CAmBZ6X,IC5bY7X,gBAAQ,SAAC1E,GACpB,MAAO,CACH4E,KAAM5E,EAAMe,mBAFL2D,EAtEG,SAACX,GAAW,IAAD,EAESkE,oBAAS,GAFlB,8BAIzB,OAAO,6BAAS7D,UAAU,eAEtB,yBAAKA,UAAU,cACX,yBAAKiG,IAAI,2BACT,gDAEJ,yBAAKjG,UAAU,OACX,yBAAK+D,MAAM,sBACP,2BAAO5D,YAAY,cAAcpH,GAAG,aAAajB,KAAK,OAAOiM,MAAM,aACnE,2BAAO/D,UAAU,iBAAiBmG,IAAI,cAAtC,sBAIR,6BAEI,+BACI,+BACI,4BACI,mCACA,mCACA,wBAAInG,UAAU,UAAd,YACA,qCACA,wCACA,wCACA,0CACA,wCACA,oCACA,4BACK,yBAAKsC,QAAS,WACX3C,EAAME,QAAQvG,KAAK,iBACpB0G,UAAU,gBAAgBiG,IAAI,4BAI7C,+BAEKtG,EAAMa,KAAK9E,UAAUqG,KAAI,SAACqB,EAAUiD,GAEjC,OADA9I,QAAQC,IAAI,MAAM4F,GACX,4BACH,4BAAI,2BAAKiD,EAAI,IACb,4BAAKjD,EAASmM,QACd,wBAAIvP,UAAU,UAAUoD,EAASpF,SAASuG,UAAY,IAAMnB,EAASpF,SAASwG,UAC9E,4BAAKpB,EAASoM,OACd,4BAAKpM,EAASqM,UACd,4BAAKrM,EAASoM,MAAQpM,EAASqM,UAC/B,4BAAK,IAAI5W,KAAKuK,EAASsM,WAAWvG,gBAClC,4BAAK,IAAItQ,KAAKuK,EAASuM,cAAcxG,gBACrC,4BAAK/F,EAASvJ,MACd,4BACI,kBAAC,IAAD,CAAM2I,GAAI,YAAcY,EAASrK,IAC7B,yBAAKiH,UAAU,OAAOiG,IAAI,0CCxDxDoS,G,iLAIE,OAAO,6BACP,oD,GALejY,IAAMC,WAadC,gBAAQ,SAAC1E,GAEpB,MAAO,KAFI0E,CAIZ+X,I,mOCsBGC,G,iLAEF,IAAIC,EAAangB,KAAKC,MAAM2I,aAAa0Q,QAAQ,iBAGjD,OACE,oCAC4E,GAAzEtM,OAAOC,KAAKjN,KAAKC,MAAMkgB,EAAWrgB,eAAeD,cAAc8C,OAAc,kBAAC,IAAD,CAAUyH,GAAG,eAAkB,kBAAC,IAAD,CAAUA,GAAG,WACzH5I,KAAK+F,MAAM1H,aAAe,kBAAC,GAAD,MAAY,kBAAC,IAAD,CAAUuK,GAAG,WAIpD,kBAAC,IAAD,CAAOzC,KAAK,aAAauK,UAAW1H,KAEpC,kBAAC,IAAD,CAAO7C,KAAK,SAASuK,UAAWpL,IAGhC,kBAAC,IAAD,CAAOa,KAAK,sBAAsBuK,UAAW/E,KAC7C,kBAAC,IAAD,CAAOxF,KAAK,6BAA6BuK,UAAWmM,KAEpD,kBAAC,IAAD,CAAO1W,KAAK,uBAAuBuK,UAAWkO,KAE9C,kBAAC,IAAD,CAAOzY,KAAK,cAAcuK,UAAWe,KAErC,kBAAC,IAAD,CAAOtL,KAAK,SAASuK,UAAWiG,KAChC,kBAAC,IAAD,CAAOxQ,KAAK,WAAWuK,UAAWmO,KAElC,kBAAC,IAAD,CAAO1Y,KAAK,YAAYuK,UAAW+N,KAEnC,kBAAC,IAAD,CAAOtY,KAAK,eAAeuK,UAAWoO,KACtC,kBAAC,IAAD,CAAO3Y,KAAK,aAAauK,UAAW3T,KAEpC,kBAAC,IAAD,CAAOoJ,KAAK,YAAYuK,UAAWtT,KAEnC,kBAAC,IAAD,CAAO+I,KAAK,aAAauK,UAAWpL,IAEpC,kBAAC,IAAD,CAAOa,KAAK,UAAUuK,UAAWsL,KAEjC,kBAAC,IAAD,CAAO7V,KAAK,kBAAkBuK,UAAWqO,KAEzC,kBAAC,IAAD,CAAO5Y,KAAK,YAAYuK,UAAWpL,IACnC,kBAAC,IAAD,CAAOa,KAAK,sBAAsBuK,UAAWsO,KAC7C,kBAAC,IAAD,CAAO7Y,KAAK,uBAAuBuK,UAAWuO,KAC9C,kBAAC,IAAD,CACE9Y,KAAK,sBACLwB,OAAQ,WACN,OAAO,kBAAC,GAAD,CAAkB6E,YAAY,OAIzC,kBAAC,IAAD,CACErG,KAAK,qBACLwB,OAAQ,WACN,OAAO,kBAAC,GAAD,SAIX,kBAAC,IAAD,CAAOxB,KAAK,kBAAkBuK,UAAWwO,KACzC,kBAAC,IAAD,CAAO/Y,KAAK,kBAAkBuK,UAAWyO,KAEzC,kBAAC,IAAD,CACEhZ,KAAK,sBACLwB,OAAQ,WACN,OAAO,kBAAC,GAAD,CAAkB6E,YAAY,OAIxCxM,KAAK+F,MAAMqZ,aAAa1iB,WAAWyE,OAClC,yBAAKiF,UAAU,uBACZpG,KAAK+F,MAAMqZ,aAAa1iB,WAAWyL,KAAI,SAAAzE,GACtC,OACE,kBAAC,IAAD,CAAMkF,GAAIlF,EAAK7F,MACb,yBAAKuI,UAAU,YACb,yBAAKiG,IAAK,IAAM3I,EAAK9F,OACrB,yBAAKwI,UAAU,SAAS1C,EAAKhG,YAOrC,U,GAjFO8I,IAAMC,WAuFVC,gBAAQ,SAAA1E,GACrB,O,2VAAO,EACLod,aAAcpd,EAAMsC,kBACjBtC,EAAM1D,iBAHEoI,CAKZmC,YAAW6V,KCvGCW,I,yNAjBb1X,OAAS,WACP,OAAO,6BACL,kBAAC,IAAD,CAAU3F,MAAOA,GACf,kBAAC,IAAD,CAAQiE,QAASA,GACf,kBAAC,GAAD,QAQJ,kBAAC,IAAD,Q,6BAbYQ,cCDE6Y,QACW,cAA7Bna,OAAOe,SAASqZ,UAEe,UAA7Bpa,OAAOe,SAASqZ,UAEhBpa,OAAOe,SAASqZ,SAASle,MACvB,2DCENme,IAAS7X,OAAO,kBAAC,GAAD,MAAS8X,SAASC,eAAe,SD6G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5Y,MAAK,SAAA6Y,GACjCA,EAAaC,kB","file":"static/js/main.ea88ba6d.chunk.js","sourcesContent":["let initialData = {\r\n    loadedMenu:[],\r\n    MainMenuItemNames:{\r\n         home:'Home',\r\n         accounts:'Accounts',\r\n         sales:'Sales',\r\n         Purchase:'Purchase',\r\n         reporting:'Reporting',\r\n         setting:'Setting',\r\n         recovery:'Recovery',\r\n         Expires:'Expires',\r\n         Expenses:'Expenses',\r\n         salary:'salary',\r\n         profit:'Profit/Loss',\r\n         return:'Return',\r\n         stock:'Stock'\r\n    },\r\n    nestedItem: ['item1','item3'],\r\n    accounts:[\r\n        {name:'Supliers', hint:'', icon:'images/supplier.png', link:'/accounts/suppliers' },\r\n        {name:'Customers Ledges', hint:'', icon:'images/customerledgers.png', link:'/accounts/customersledgers'}],\r\n    reporting:[\r\n        {name:'Attendance', hint:'', icon:'images/attendance.png', link:'/attendance'},\r\n        {name:'Sales', hint:'', icon:'images/sale.png', link:'/sales'},\r\n        {name:'Purchases', hint:'', icon:'images/purchases.png', link:'/reporting/purchases'},\r\n        {name:'Closing Stock Report', hint:'', icon:'images/closingstock.png', link:'/reporting/closingstock'},\r\n        {name:'Stock Report', hint:'', icon:'images/stockreport.png', link:'/reporting/stockreport'},\r\n        {name:'Customers', hint:'', icon:'images/customers.png', link:'/reporting/customers'},\r\n        {name:'Suppliers', hint:'', icon:'images/supplier-reporting.png', link:'/reporting/suppliers'},\r\n        {name:'Delivery Reports', hint:'', icon:'images/delivery-report.png', link:'/reporting/deliveryreports'},\r\n        {name:'Bills', hint:'', icon:'images/bills.png', link:'/reporting/bills'},\r\n        {name:'Bills & Route Wise Summary', hint:'', icon:'images/bills-summary.png',link:'/reporting/billsummary'},\r\n        {name:'Recoveries', hint:'', icon:'images/recovery.png', link:'/reporting/recoveries'},\r\n        {name:'Missing Orders', hint:'', icon:'images/missing.png', link:'/reporting/missing'},\r\n        {name:'Receovery Bills', hint:'', icon:'images/recovert-bills.png', link:'/reporting/recoverybills'}\r\n],\r\n    settings:[\r\n        {name:'Store Settings', hint:'Includes Customization for your store', link:'settings/store', icon:'images/store-settings.png'},\r\n        {name:'Password Settings', hint:'Includes Customization for your store', icon:'images/security-settings.png'},\r\n        {name:'Users', hint:'Add, Delete and Update Users', icon:'images/user-settings.png', link:'/settings/users'},\r\n        {name:'Customers', hint:'Manage Customers', icon:'images/customers.png', link:'/settings/customers'},\r\n        {name:'Suppliers', hint:'Manage Suppliers', icon:'images/supplier.png', link:'/settings/suppliers'},\r\n        {name:'Products', hint:'Manage Product Offerings', icon:'images/product-settings.png',link:'/settings/products'},\r\n        {name:'Pricing', hint:'Manage Product Pricing', icon:'images/pricing-settings.png'},\r\n        {name:'Categories', hint:'Includes Categories Management', icon:'images/categories-settings.png',link:'/settings/categories'},\r\n        {name:'Areas', hint:'Includes area management', icon:'images/areas-settings.png',link:'/settings/areas'},\r\n        {name:'Companies', hint:'Includes area management', icon:'images/company-settings.png', link:'/settings/companies'}\r\n    ]\r\n\r\n}\r\n\r\nconst dropDown = (state = initialData, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'SHOW_MENU':\r\n            return {\r\n                ...state,\r\n                loadedMenu: state[action.payload] || []\r\n            }\r\n\r\n        case \"persist/REHYDRATE\":\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n    return state;\r\n}\r\nexport default dropDown;","import * as actionCreater from './../Action/actionCreater'\r\nlet initialState = {\r\n    loggedInUser:{}\r\n    //LoginUser:[]\r\n}\r\nconst loginReducers = (state=initialState,action) =>  {\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            newState.loggedInUser = action.payload.user;\r\n            return newState;\r\n            \r\n    }\r\nreturn state\r\n}\r\nexport default loginReducers;","import { toast  } from 'react-toastify';\r\n\r\n\r\nconst initialData = {\r\n    supplierAccounts:[\r\n        {  _id:3, totalPayable:4500, amountPaid:1500, date:new Date()},\r\n        {  _id:4, totalPayable:8500, amountPaid:1500, date:new Date()},\r\n        {  _id:5, totalPayable:2500, amountPaid:1500, date:new Date()},\r\n        {  _id:7, totalPayable:9500, amountPaid:1500, date:new Date()},\r\n        {  _id:8, totalPayable:7500, amountPaid:1500, date:new Date()}\r\n    ],\r\n    suppliers:[\r\n        {id:1, code:'SUP00001', fullName:'', company:'NESTLE', phone:'0321-9876542',address:'lorem loremloremloremloremloremlorem lorem loremlorem lorem'},\r\n        {id:2,code:'SUP00002', fullName:'', company:'KOLSON', phone:'',address:''},\r\n        {id:3,code:'SUP00003', fullName:'', company:'SHANGRILA', phone:'',address:''},\r\n        {id:4,code:'SUP00004', fullName:'', company:'YOUNG`S', phone:'',address:''},\r\n        {id:5,code:'SUP00005', fullName:'', company:'POPULAR', phone:'',address:''},\r\n        {id:6,code:'SUP00006', fullName:'', company:'QURSHI', phone:'',address:''},\r\n        {id:7,code:'SUP00007', fullName:'', company:'GIGGLY', phone:'',address:''},\r\n        {id:8,code:'SUP00008', fullName:'', company:'CANDY LAND', phone:'',address:''},\r\n        {id:9,code:'SUP00009', fullName:'', company:'MEDICAM', phone:'',address:''},\r\n        {id:10,code:'SUP000010', fullName:'', company:'NEELI BAAR', phone:'',address:''},\r\n    ]\r\n}\r\n\r\n\r\nconst dataReducer = (state = initialData, action)=>{\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch(action.type){\r\n\r\n        case 'PAY_TO_SUPPLIER':\r\n            //Add backend add logic in here\r\n                newState.supplierAccounts.push(action.payload);\r\n                // TBC move notofication code out of here\r\n                toast.success(\"PAYMENT ADDED!\");\r\n        return newState;\r\n\r\n        case 'LOAD_SUPPLIERS':\r\n\r\n        return newState;\r\n\r\n    }\r\n\r\n\r\nreturn newState;\r\n\r\n}\r\n\r\nexport default dataReducer;","export default {\r\n    getRange(start, end) {\r\n        if (start === end) return [start];\r\n        return [start, ...this.getRange(start + 1, end)];\r\n    },\r\n    time: {\r\n        getDayName(date) {\r\n\r\n            // var a = new Date();\r\n            var weekdays = new Array(7);\r\n            weekdays[0] = \"Sunday\";\r\n            weekdays[1] = \"Monday\";\r\n            weekdays[2] = \"Tuesday\";\r\n            weekdays[3] = \"Wednesday\";\r\n            weekdays[4] = \"Thursday\";\r\n            weekdays[5] = \"Friday\";\r\n            weekdays[6] = \"Saturday\";\r\n            return weekdays[date.getDay()];\r\n        },\r\n        getMonthDays(month) {\r\n\r\n            const monthsDays = {\r\n                \"January\": 31,\r\n                \"March\": 31,\r\n                \"May\": 31,\r\n                \"July\": 31,\r\n                \"August\": 31,\r\n                \"October\": 31,\r\n                \"December\": 31,\r\n                \"February\": 28,\r\n                \"April\": 30,\r\n                \"June\": 31,\r\n                \"September\": 30,\r\n                \"November\": 30\r\n            };\r\n\r\n            return monthsDays[month];\r\n\r\n        },\r\n        getMonthFromName(monthName){\r\n\r\n           return [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        ].indexOf(monthName);\r\n\r\n\r\n        },\r\n\r\n\r\n        getMonthName() {\r\n\r\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n            ];\r\n\r\n            const d = new Date();\r\n            return monthNames[d.getMonth()];\r\n\r\n        }\r\n\r\n\r\n    },\r\n\r\n    getID(suffix, prop, myList, noSuffix) {\r\n\r\n        let lastItem = myList[myList.length - 1];\r\n\r\n        if (!lastItem) {\r\n            return (noSuffix ? '' : suffix + '_') + '0';\r\n        }\r\n\r\n        // if(!lastItem[prop]){\r\n        //     debugger;\r\n        // }\r\n\r\n        if (lastItem[prop] == undefined) {\r\n            debugger;\r\n        }\r\n\r\n        let lastNumber = lastItem[prop].toString().match(/(\\d)+/g)[0].replace(/0/g, \"\");\r\n        return (noSuffix ? '' : suffix + '_') + (+lastNumber + 1);\r\n\r\n    }\r\n}","import utlities from \"../../utlities\";\r\n\r\nlet initialData = {\r\n    companies: [\r\n        // {_id:1,code:'COMP_1', name:'Nestle', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:2,code:'COMP_2', name:'Kolson', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:3,code:'COMP_3', name:'Candy Land', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:4,code:'COMP_4', name:'product 4', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:5,code:'COMP_5', name:'product 5', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n    ]\r\n};\r\n\r\n\r\nexport default (state = initialData, action) => {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch (action.type) {\r\n\r\n        case 'COMPANIES_LOADED':\r\n            newState.companies = action.payload;\r\n            break;\r\n\r\n        case 'COMPANY_UPDATED':\r\n            let target = newState[action.model].find((item) => {\r\n                return item._id == action.payload._id;\r\n            })\r\n            newState[action.model][newState[action.model].indexOf(target)] = action.payload;\r\n            break;\r\n\r\n        case 'COMPANY_CREATED':\r\n            newState.companies.push(action.payload);\r\n            break;\r\n\r\n        // case 'COMPANY_STATUS_UPDATED':\r\n        //     newState.companies.forEach((company) => {\r\n\r\n        //         if (company._id == action.payload._id) {\r\n        //             company.status = action.payload.status;\r\n        //             return false;\r\n        //         }\r\n\r\n        //     });\r\n        //     break;\r\n\r\n\r\n\r\n    }\r\n\r\n    newState.code = utlities.getID(\"COMP\",\"code\", newState.companies);\r\n\r\n\r\n    return newState;\r\n\r\n}\r\n","import utlities from \"../../utlities\";\r\n\r\n\r\nlet initialData = {\r\n    suppliers: [\r\n        // { _id: 3, code: \"SUPPL1\", totalPayable: 4500, amountPaid: 1500, date: new Date() },\r\n        // { _id: 4, code: \"SUPPL2\", totalPayable: 8500, amountPaid: 1500, date: new Date() },\r\n        // { _id: 5, code: \"SUPPL3\", totalPayable: 2500, amountPaid: 1500, date: new Date() },\r\n        // { _id: 7, code: \"SUPPL4\", totalPayable: 9500, amountPaid: 1500, date: new Date() },\r\n        // { _id: 8, code: \"SUPPL5\", totalPayable: 7500, amountPaid: 1500, date: new Date() }\r\n    ]\r\n};\r\n\r\n\r\nexport default (state = initialData, action) => {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch (action.type) {\r\n\r\n        case 'persist/REHYDRATE':\r\n            action.payload && (newState.suppliers = action.payload.supplierReducer.suppliers);\r\n            break;\r\n\r\n        case 'SUPPLIERS_LOADED':\r\n            newState.suppliers = action.payload;\r\n            break;\r\n        \r\n        case 'SUPPLIER_UPDATED':\r\n            let target = newState[action.model].find((item)=>{\r\n                    return item._id == action.payload._id;\r\n            })\r\n            newState[action.model][newState[action.model].indexOf(target)] = action.payload;\r\n            break\r\n\r\n        case 'SUPPLIER_CREATED':\r\n            newState.suppliers.push(action.payload);\r\n            break;\r\n\r\n        case 'SUPPLIER_STATUS_UPDATED':\r\n            newState.suppliers.forEach((supplier) => {\r\n\r\n                if (supplier._id == action.payload._id) {\r\n                    supplier.status = action.payload.status;\r\n                    return false;\r\n                }\r\n\r\n            });\r\n            break;\r\n\r\n\r\n\r\n    }\r\n\r\n    newState.supplierCode = utlities.getID(\"SUPPL\",\"code\", newState.suppliers);\r\n\r\n\r\n    return newState;\r\n\r\n}","import utlities from \"../../utlities\";\r\n\r\nlet initialData = {\r\n  customers: []\r\n};\r\n\r\nexport default (state = initialData, action) => {\r\n  let newState = JSON.parse(JSON.stringify(state));\r\n\r\n  switch (action.type) {\r\n    case \"persist/REHYDRATE\":\r\n      action.payload &&\r\n        (newState.customers = action.payload.customerReducer.customers);\r\n      break;\r\n\r\n    case \"CUSTOMER_UPDATED\":\r\n      let target = newState[action.model].find(item => {\r\n        return item._id == action.payload._id;\r\n      });\r\n      newState[action.model][newState[action.model].indexOf(target)] =\r\n        action.payload;\r\n      break;\r\n\r\n    case \"CUSTOMERS_LOADED\":\r\n      newState.customers = action.payload;\r\n      break;\r\n\r\n    case \"CUSTOMER_CREATED\":\r\n      newState.customers.push(action.payload);\r\n      break;\r\n\r\n    case \"CUSTOMER_STATUS_UPDATED\":\r\n      newState.customers.forEach(customer => {\r\n        if (customer._id == action.payload._id) {\r\n          customer.status = action.payload.status;\r\n          return false;\r\n        }\r\n      });\r\n      break;\r\n  \r\n  }\r\n\r\n  newState.code = utlities.getID(\"CUST\", \"code\", newState.customers);\r\n\r\n  return newState;\r\n};\r\n","import utlities from '../../utlities';\r\n\r\n\r\nlet initialData = {\r\n    products: [\r\n        // { id: 1, code: 'PROD1', cartonSize: 12, name: 'product1', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 132.083, margin: 10, customerPrice: 140, productQty: '50', time: new Date().toLocaleDateString() },\r\n        // { id: 2, code: 'PROD2', cartonSize: 8, name: 'product2', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 120, margin: 10, customerPrice: 90, productQty: '20', time: new Date().toLocaleDateString() },\r\n        // { id: 3, code: 'PROD3', cartonSize: 14, name: 'product3', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 120, margin: 10, customerPrice: 190, productQty: '8', time: new Date().toLocaleDateString() },\r\n        // { id: 4, code: 'PROD4', cartonSize: 10, name: 'product4', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 120, margin: 10, customerPrice: 140, productQty: '16', time: new Date().toLocaleDateString() },\r\n        // { id: 5, code: 'PROD5', cartonSize: 12, name: 'product5', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 120, margin: 10, customerPrice: 730, productQty: '22', time: new Date().toLocaleDateString() },\r\n        // { id: 6, code: 'PROD6', cartonSize: 8, name: 'product6', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 120, margin: 10, customerPrice: 220, productQty: '9', time: new Date().toLocaleDateString() },\r\n        // { id: 7, code: 'PROD7', cartonSize: 16, name: 'product7', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 120, margin: 10, customerPrice: 350, productQty: '8', time: new Date().toLocaleDateString() },\r\n        // { id: 8, code: 'PROD8', cartonSize: 10, name: 'product8', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 120, margin: 10, customerPrice: 180, productQty: '18', time: new Date().toLocaleDateString() },\r\n        // { id: 9, code: 'PROD9', cartonSize: 12, name: 'product9', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 120, margin: 10, customerPrice: 100, productQty: '24', time: new Date().toLocaleDateString() },\r\n        // { id: 10, code: 'PROD10', cartonSize: 1, name: 'product10', supplier: { name: 'NESTLE' }, cost: 100, shopkeeperPrice: 120, margin: 10, customerPrice: 90, productQty: '26', time: new Date().toLocaleDateString() }\r\n    ]\r\n};\r\n\r\n\r\nexport default (state = initialData, action) => {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch (action.type) {\r\n\r\n        case 'persist/REHYDRATE':\r\n            action.payload && (newState.products = action.payload.productReducers.products);\r\n            break;\r\n\r\n        case 'PRODUCTS_LOADED':\r\n            newState.products = action.payload;\r\n            break;\r\n\r\n        case 'PRODUCT_UPDATED':\r\n            let target = newState[action.model].find((item) => {\r\n                return item._id == action.payload._id;\r\n            })\r\n            newState[action.model][newState[action.model].indexOf(target)] = action.payload;\r\n            break;\r\n\r\n\r\n\r\n        case 'PRODUCT_CREATED':\r\n            newState.products.push(action.payload);\r\n            \r\n            break;\r\n            \r\n            case 'PRODUCT_STATUS_UPDATED':\r\n                newState.products.forEach((product) => {\r\n                    \r\n                    if (product._id == action.payload._id) {\r\n                        product.status = action.payload.status;\r\n                        return false;\r\n                    }\r\n                    \r\n                });\r\n                break;\r\n                \r\n                \r\n                \r\n            }\r\n            \r\n            newState.productCode = utlities.getID(\"PRD\", \"code\", newState.products);\r\n            return newState;\r\n\r\n}\r\n\r\n// export default productReducer;","import utlities from \"../../utlities\";\r\n\r\n\r\nlet initialData = {\r\n    salaryRecord:[],\r\n    users: [\r\n        // {\r\n        //     fullName: \"Ahmed Ali\",\r\n        //     code: \"EMP1\",\r\n        //     email: \"khurram@panacloud.com\",\r\n        //     phone: \"0300-889922\",\r\n        //     locations: [],\r\n        //     date: (new Date()).toLocaleDateString(),\r\n        //     status: \"ACTIVATED\",\r\n        //     areas:\"Colony Road, Sitara Colony, Sabzi Mandi, Main Bazar, Rajana Road\"\r\n        // },\r\n        // {\r\n        //     fullName: \"Ahmed Ali\",\r\n        //     code: \"EMP2\",\r\n        //     email: \"khurram@panacloud.com\",\r\n        //     phone: \"0300-889922\",\r\n        //     locations: [],\r\n        //     date: (new Date()).toLocaleDateString(),\r\n        //     status: \"ACTIVATED\",\r\n        //     areas:\"Colony Road, Sitara Colony, Sabzi Mandi, Main Bazar, Rajana Road\"\r\n        // },\r\n        // {\r\n        //     fullName: \"Ahmed Ali\",\r\n        //     code: \"EMP3\",\r\n        //     email: \"khurram@panacloud.com\",\r\n        //     phone: \"0300-889922\",\r\n        //     locations: [],\r\n        //     date: (new Date()).toLocaleDateString(),\r\n        //     status: \"ACTIVATED\",\r\n        //     areas:\"Colony Road, Sitara Colony, Sabzi Mandi, Main Bazar, Rajana Road\"\r\n        // },\r\n        // {\r\n        //     fullName: \"Ahmed Ali\",\r\n        //     code: \"EMP4\",\r\n        //     email: \"khurram@panacloud.com\",\r\n        //     phone: \"0300-889922\",\r\n        //     locations: [],\r\n        //     date: (new Date()).toLocaleDateString(),\r\n        //     status: \"ACTIVATED\",\r\n        //     areas:\"Colony Road, Sitara Colony, Sabzi Mandi, Main Bazar, Rajana Road\"\r\n        // }\r\n    ]\r\n};\r\n\r\n\r\nexport default (state = initialData, action) => {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SALARY_RECORD_LOADED':\r\n            newState.salaryRecord = action.payload;\r\n            break;\r\n\r\n\r\n        case 'persist/REHYDRATE':\r\n            action.payload && (newState.users = action.payload.userReducer.users);\r\n            break;\r\n\r\n        case 'USERS_LOADED':\r\n            newState.users = action.payload;\r\n            break;\r\n\r\n\r\n        case 'USER_UPDATED':\r\n            let target = newState[action.model].find((item) => {\r\n                return item._id == action.payload._id;\r\n            })\r\n            newState[action.model][newState[action.model].indexOf(target)] = action.payload;\r\n            break;\r\n\r\n        case 'USER_CREATED':\r\n            newState.users.push(action.payload);\r\n            break;\r\n\r\n        case 'USERS_STATUS_UPDATED':\r\n            newState.users.forEach((user) => {\r\n\r\n                if (user._id == action.payload._id) {\r\n                    user.status = action.payload.status;\r\n                    return false;\r\n                }\r\n\r\n            });\r\n            break;\r\n\r\n\r\n\r\n    }\r\n\r\n    newState.userCode = utlities.getID(\"USER\", \"code\", newState.users);\r\n\r\n\r\n    return newState;\r\n\r\n}","import utlities from \"../../utlities\";\r\n\r\nlet initialData = {\r\n    categories: [\r\n        // {_id:1,code:'COMP_1', name:'Category 1', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:2,code:'COMP_2', name:'Category 2', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:3,code:'COMP_3', name:'Category 3', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:4,code:'COMP_4', name:'Category 4', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:5,code:'COMP_5', name:'Category 5', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n    ]\r\n};\r\n\r\n\r\nexport default (state = initialData, action) => {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch (action.type) {\r\n\r\n        case 'persist/REHYDRATE':\r\n            action.payload && (newState.categories = action.payload.categoryReducers.categories);\r\n            break;\r\n\r\n        case 'CATEGORY_UPDATED':\r\n            let target = newState[action.model].find((item) => {\r\n                return item._id == action.payload._id;\r\n            })\r\n            newState[action.model][newState[action.model].indexOf(target)] = action.payload;\r\n            break;\r\n\r\n\r\n        case 'CATEGORIES_LOADED':\r\n            newState.categories = action.payload;\r\n            break;\r\n\r\n        case 'CATEGORY_CREATED':\r\n            newState.categories.push(action.payload);\r\n            break;\r\n\r\n        case 'CATEGORIES_STATUS_UPDATED':\r\n            newState.categories.forEach((category) => {\r\n\r\n                if (category.__id == action.payload.__id) {\r\n                    category.status = action.payload.status;\r\n                    return false;\r\n                }\r\n\r\n            });\r\n            break;\r\n\r\n\r\n\r\n    }\r\n\r\n    newState.categCode = utlities.getID(\"CATEG\", \"code\", newState.categories);\r\n\r\n\r\n    return newState;\r\n\r\n}\r\n","import utlities from \"../../utlities\";\r\n\r\nlet initialData = {\r\n  areas: [\r\n    // {id:1,code:'area1', name:'Area 1', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n    // {id:2,code:'area2', name:'Area 2', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n    // {id:3,code:'area3', name:'Area 3', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n    // {id:4,code:'area4', name:'Area 4', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n    // {id:5,code:'area5', name:'Area  5', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n  ]\r\n};\r\n\r\nexport default (state = initialData, action) => {\r\n  let newState = JSON.parse(JSON.stringify(state));\r\n\r\n  switch (action.type) {\r\n    case \"persist/REHYDRATE\":\r\n      action.payload && (newState.areas = action.payload.areaReducers.areas);\r\n      break;\r\n\r\n    case \"AREA_UPDATED\":\r\n      let target = newState[action.model].find(item => {\r\n        return item._id == action.payload._id;\r\n      });\r\n      newState[action.model][newState[action.model].indexOf(target)] =\r\n        action.payload;\r\n      break;\r\n\r\n    case \"AREAS_LOADED\":\r\n      newState.areas = action.payload;\r\n      break;\r\n\r\n    case \"AREA_CREATED\":\r\n      newState.areas.push(action.payload);\r\n      break;\r\n\r\n    // case 'AREA_STATUS_UPDATED':\r\n    //     newState.areas.forEach((areas) => {\r\n\r\n    //         if (areas.__id == action.payload.__id) {\r\n    //             areas.status = action.payload.status;\r\n    //             return false;\r\n    //         }\r\n\r\n    //     });\r\n    //     break;\r\n  }\r\n\r\n  newState.code = utlities.getID(\"AREA\", \"code\", newState.areas);\r\n\r\n  console.log(newState);\r\n\r\n  return newState;\r\n};\r\n","import utlities from \"../../utlities\";\r\n\r\nlet initialData = {\r\n  sales: [\r\n    // { _id: 1, area: \"a1\", customer: { name: \"c1\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n    // { _id: 2, area: \"a2\", customer: { name: \"c2\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n    // { _id: 3, area: \"a3\", customer: { name: \"c3\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n    // { _id: 4, area: \"a4\", customer: { name: \"c4\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n    // { _id: 5, area: \"a5\", customer: { name: \"c5\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n  ]\r\n};\r\n\r\nexport default (state = initialData, action) => {\r\n  let newState = JSON.parse(JSON.stringify(state));\r\n\r\n  switch (action.type) {\r\n    case \"persist/REHYDRATE\":\r\n      action.payload && (newState.sales = action.payload.salesReducer.sales);\r\n      break;\r\n\r\n    case \"SALES_LOADED\":\r\n      newState.sales = action.payload;\r\n      break;\r\n\r\n    case \"SALE_CREATED\":\r\n      newState.sales.push(action.payload);\r\n      break;\r\n    // case \"SALE_UPDATED\":\r\n    //   debugger;\r\n    //   newState.sales.map(sale => {\r\n    //     if (sale._id == action.payload._id) {\r\n    //       console.log(\"sale\", sale);\r\n    //       return sale;\r\n    //     }\r\n    //   });\r\n    //   break;\r\n    case \"SALE_STATUS_UPDATED\":\r\n      newState.sales.forEach(sale => {\r\n        if (sale._id == action.payload._id) {\r\n          sale.status = action.payload.status;\r\n          return false;\r\n        }\r\n      });\r\n      break;\r\n  }\r\n\r\n  newState.saleCode = utlities.getID(\"EXP\", \"billNo\", newState.sales, true);\r\n\r\n  return newState;\r\n};\r\n","import utlities from '../../utlities';\r\n\r\nlet initialData = {\r\n    purchases: [\r\n        // { _id: 1, area: \"a1\", customer: { name: \"c1\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n        // { _id: 2, area: \"a2\", customer: { name: \"c2\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n        // { _id: 3, area: \"a3\", customer: { name: \"c3\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n        // { _id: 4, area: \"a4\", customer: { name: \"c4\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n        // { _id: 5, area: \"a5\", customer: { name: \"c5\" }, data: new Date(), deliveryDate: new Date(), notes: \"\" },\r\n    ]\r\n};\r\n\r\nexport default (state = initialData, action) => {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch (action.type) {\r\n\r\n        case 'persist/REHYDRATE':\r\n            action.payload && (newState.purchases = action.payload.purchaseReducer.purchases || []);\r\n            break;\r\n\r\n        case 'PURCHASES_LOADED':\r\n            newState.purchases = action.payload;\r\n            break;\r\n\r\n        case 'PURCHASE_CREATED':\r\n            newState.purchases.push(action.payload);\r\n            break;\r\n\r\n        // case 'SALE_STATUS_UPDATED':\r\n        //     newState.sales.forEach((sale) => {\r\n\r\n        //         if (sale.__id == action.payload.__id) {\r\n        //             sale.status = action.payload.status;\r\n        //             return false;\r\n        //         }\r\n\r\n        //     });\r\n        //     break;\r\n\r\n\r\n\r\n    }\r\n\r\n    newState.purchaseCode = utlities.getID(\"PUR\", \"billNo\", newState.purchases, true);\r\n\r\n    return newState;\r\n\r\n}\r\n","import utlities from \"../../utlities\";\r\n\r\nlet initialData = {\r\n    expenses: [\r\n        // {_id:1,code:'COMP_1', name:'Category 1', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:2,code:'COMP_2', name:'Category 2', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:3,code:'COMP_3', name:'Category 3', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:4,code:'COMP_4', name:'Category 4', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n        // {_id:5,code:'COMP_5', name:'Category 5', address:'some code in here too now again there is some', phone:'0231-2345678'},\r\n    ]\r\n};\r\n\r\n\r\nexport default (state = initialData, action) => {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch (action.type) {\r\n\r\n        case 'persist/REHYDRATE':\r\n            action.payload && (newState.expenses = action.payload.expensesReducer.expenses || []);\r\n            break;\r\n\r\n        case 'EXPENSES_LOADED':\r\n            newState.expenses = action.payload;\r\n            break;\r\n\r\n        case 'EXPENSE_CREATED':\r\n            newState.expenses.push(action.payload);\r\n            break;\r\n\r\n    }\r\n\r\n    newState.expCode = utlities.getID(\"EXP\", \"code\", newState.expenses);\r\n\r\n\r\n    return newState;\r\n\r\n}\r\n","import utlities from \"../../utlities\";\r\n\r\n\r\nlet initialData = {\r\n    // salaryRecord:[],\r\n    store: {offdays:[]}\r\n};\r\n\r\n\r\nexport default (state = initialData, action) => {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch (action.type) {\r\n\r\n        case 'NEW_STORE_CREATED':\r\n        case 'STORE_UPDATED':\r\n        case 'STORE_LOADED':\r\n            newState.store = action.payload || {offdays:[]};\r\n            break;\r\n\r\n\r\n        case 'persist/REHYDRATE':\r\n            action.payload && (newState.store = action.payload.storeReducer.store || {offdays:[]});          \r\n            break;\r\n  \r\n    }\r\n\r\n    return newState;\r\n\r\n}","let attendance = {\r\n    attendance: []\r\n};\r\n\r\n\r\nexport default (state = attendance, action) => {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch(action.type){\r\n\r\n        case 'ATTENDANCE_LOADED':\r\n                newState.attendance = action.payload;\r\n            break;\r\n        \r\n        case 'ATTENDANCE_CREATED':\r\n                newState.attendance.push(action.payload);\r\n            break;\r\n\r\n\r\n    }\r\n\r\n    return newState;\r\n\r\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport thunk from 'redux-thunk'\r\nimport dropdownReducers from './Reducers/dropdownReducers'\r\nimport loginReducers from './Reducers/loginReducers';\r\nimport dataReducers from './Reducers/dataReducers';\r\nimport companyReducers from './Reducers/companiesReducer';\r\nimport supplierReducer from './Reducers/supplierReducer';\r\nimport customerReducer from './Reducers/customerReducer';\r\n\r\nimport productReducers from './Reducers/productReducer';\r\nimport userReducer from './Reducers/userReducer';\r\nimport categoryReducers from './Reducers/categoryReducers';\r\nimport areaReducers from './Reducers/areas';\r\nimport salesReducer from './Reducers/salesReducer';\r\nimport purchaseReducer from './Reducers/purchaseReducer';\r\nimport expensesReducer from './Reducers/expensesReducer';\r\nimport storeReducer from './Reducers/storeReducer';\r\n\r\nimport attendanceReducer from './Reducers/attendanceReducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    // whitelist: [\"dropdownReducers\"]\r\n}\r\nconst middleware = [thunk]\r\n\r\nlet allStore = combineReducers({attendanceReducer, storeReducer, expensesReducer, purchaseReducer, salesReducer, areaReducers, categoryReducers, customerReducer, supplierReducer, dropdownReducers, loginReducers, dataReducers, productReducers, userReducer, companyReducers });\r\n\r\nconst persistedReducer = persistReducer(persistConfig, allStore);\r\n\r\nexport const store = createStore(persistedReducer, compose(applyMiddleware(...middleware)));\r\nwindow.store = createStore(persistedReducer)\r\nexport const persistor = persistStore(store);","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from \"react\";\r\nimport \"./logincss.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n// import {middlewaresignup} from './../../store/Middleware/middleware'\r\nimport * as middleware from \"../../store/Middleware/middleware\";\r\nimport { login } from \"../../store/Action/actionCreater\";\r\n\r\nclass Login extends React.Component {\r\n  state = {\r\n    // username:'',\r\n    email: \"\",\r\n    // number:'',\r\n    password: \"\"\r\n  };\r\n  handleValue = evt => {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n    // console.log(evt.target.value);\r\n  };\r\n  signupUser = evt => {\r\n    evt.preventDefault();\r\n    this.props.updatedSignup(this.state);\r\n  };\r\n\r\n  render() {\r\n  \r\n    if (\r\n      this.props.loggedInUser.id &&\r\n      this.props.history.location.path == \"/login\"\r\n    ) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n\r\n    // console.log('state user',this.state.username);\r\n    return (\r\n      <div className=\"formstyle\">\r\n        {/* {\r\n     \r\n   \r\n      this.props.history.push(\"/dashboard\"):null\r\n    } */}\r\n        {/* <Link to='/'> */}\r\n        <div className=\"loginForm\">Login</div>\r\n        {/* </Link> */}\r\n        <form onSubmit={this.signupUser}>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            onChange={this.handleValue}\r\n            placeholder=\"email\"\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            onChange={this.handleValue}\r\n            placeholder=\"password\"\r\n          />\r\n          <div>\r\n            <button className=\"def-btn\">Login</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchtoProps = dispatch => {\r\n  return {\r\n    updatedSignup: data => {\r\n      dispatch(middleware.middlewaresignup(data));\r\n    }\r\n  };\r\n};\r\nexport default connect(store => {\r\n  return {\r\n    ...store.loginReducers\r\n  };\r\n}, mapDispatchtoProps)(Login);\r\n","// import {signup} from './../Action/actionCreater'\r\nimport * as actionCreater from './../Action/actionCreater'\r\nimport { store } from './../store';\r\nimport history from '../../historyProvider';\r\n\r\nexport const middlewaresignup = (data) => {\r\n  console.log(data)\r\n  return dispatch => {\r\n    // return dispatch(actionCreater.login(data))\r\n    fetch('/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(resp => {\r\n        return resp.json();\r\n      })\r\n      .then(resp => {\r\n        localStorage.setItem('token', resp.token);\r\n        console.log(resp)\r\n        dispatch(actionCreater.login(resp));\r\n        if (resp.user.id) {\r\n\r\n          store.dispatch({\r\n            type: 'COMPANIES_LOADED',\r\n            payload: resp.data.companies\r\n          });\r\n\r\n          store.dispatch({\r\n            type: 'CATEGORIES_LOADED',\r\n            payload: resp.data.categories\r\n          });\r\n\r\n          store.dispatch({\r\n            type: 'ATTENDANCE_LOADED',\r\n            payload: resp.data.attendance\r\n          });\r\n\r\n          store.dispatch({\r\n            type: 'PRODUCTS_LOADED',\r\n            payload: resp.data.products\r\n          });\r\n\r\n          store.dispatch({\r\n            type: 'AREAS_LOADED',\r\n            payload: resp.data.areas\r\n          });\r\n\r\n\r\n          store.dispatch({\r\n            type: 'SUPPLIERS_LOADED',\r\n            payload: resp.data.suppliers\r\n          });\r\n\r\n          store.dispatch({\r\n            type: 'CUSTOMERS_LOADED',\r\n            payload: resp.data.customers\r\n          });\r\n\r\n          store.dispatch({\r\n            type: 'PURCHASES_LOADED',\r\n            payload: resp.data.mypurchases\r\n          });\r\n          \r\n          store.dispatch({\r\n            type: 'EXPENSES_LOADED',\r\n            payload: resp.data.expenses\r\n          });\r\n\r\n          store.dispatch({\r\n            type: 'SALES_LOADED',\r\n            payload: resp.data.sales\r\n          });\r\n\r\n\r\n          store.dispatch({\r\n            type: 'USERS_LOADED',\r\n            payload: resp.data.users\r\n          });\r\n\r\n          \r\n          store.dispatch({\r\n            type: 'STORE_LOADED',\r\n            payload: resp.data.store\r\n          });\r\n\r\n          history.push('/dashboard');\r\n          console.log(\"User was found\");\r\n\r\n        } else {\r\n          console.log(\"User did npt found\");\r\n        }\r\n      });\r\n  };\r\n\r\n}\r\nexport const middlewareLogin = (data) => {\r\n  console.log(data)\r\n  return dispatch => {\r\n    // return dispatch(signup(data))\r\n  }\r\n}","import * as AllactionTypes from './AllactionTypes';\r\nexport const login = (data) => {\r\nreturn {\r\n    type:AllactionTypes.LOGIN,\r\n    payload: data\r\n}\r\n}\r\nexport const signuo = () => {\r\n    console.log()\r\nreturn {\r\n\r\n}\r\n}","export const LOGIN = 'LOGIN'\r\n","import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Row, Col, Menu, Dropdown, Icon, Button } from \"antd\";\r\nimport { store } from \"../../store/store\";\r\nclass Header extends Component {\r\n  showMenu = type => {\r\n    this.props.history.push(\"/\");\r\n\r\n    store.dispatch({\r\n      type: \"SHOW_MENU\",\r\n      payload: type\r\n    });\r\n  };\r\n\r\n  render = () => {\r\n    const { nestdropdown } = this.props;\r\n    console.log(nestdropdown);\r\n    const { accountitem } = this.props;\r\n    console.log(accountitem);\r\n\r\n    const { reportingItem } = this.props;\r\n    const { MainMenuItemName } = this.props;\r\n    console.log(MainMenuItemName);\r\n    const { settingItems } = this.props;\r\n    console.log(settingItems);\r\n    const { SubMenu } = Menu;\r\n    const account = (\r\n      <Menu>\r\n        {accountitem.map(item => (\r\n          <Menu key={item}>\r\n            <Menu.Item>{item}</Menu.Item>\r\n          </Menu>\r\n        ))}\r\n        {/* <SubMenu title=\"sub menu\">{nestdropdown ? nestdropdown.map(nestItem => <Menu key={nestItem}><Menu.Item>{nestItem}</Menu.Item></Menu>) : null}\r\n            </SubMenu> */}\r\n      </Menu>\r\n    );\r\n    const reporting = (\r\n      <Menu>\r\n        {reportingItem.map(item => (\r\n          <Menu key={item}>\r\n            <Menu.Item>{item}</Menu.Item>\r\n          </Menu>\r\n        ))}\r\n        {/* <SubMenu title=\"sub menu\">{nestdropdown ? nestdropdown.map(nestItem => <Menu key={nestItem}><Menu.Item>{nestItem}</Menu.Item></Menu>) : null}\r\n            </SubMenu> */}\r\n      </Menu>\r\n    );\r\n    const setting = (\r\n      <Menu>\r\n        {/* {settings.map(item => <Menu key={item}><Menu.Item>{item}</Menu.Item> */}\r\n        {/* </Menu>)} */}\r\n        {/* <SubMenu title=\"sub menu\">{nestdropdown ? nestdropdown.map(nestItem => <Menu key={nestItem}><Menu.Item>{nestItem}</Menu.Item></Menu>) : null}\r\n            </SubMenu> */}\r\n      </Menu>\r\n    );\r\n\r\n    return (\r\n      <div className=\"Navbar\">\r\n        <Row type=\"flex\" justify=\"center\">\r\n          <Col span={1}>\r\n            {\" \"}\r\n            <a\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              href=\"#\"\r\n            >\r\n              {MainMenuItemName.home}\r\n            </a>\r\n          </Col>\r\n          <Col span={1} onClick={this.showMenu.bind(null, \"accounts\")}>\r\n            <a\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              href=\"#\"\r\n            >\r\n              {MainMenuItemName.accounts}\r\n              <Icon type=\"down\" />\r\n            </a>\r\n          </Col>\r\n          <Col span={1} style={{ color: \"white\" }}>\r\n            {\" \"}\r\n            <Link\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              to=\"/sales\"\r\n            >\r\n              {MainMenuItemName.sales}\r\n            </Link>\r\n          </Col>\r\n          <Col span={2} style={{ color: \"white\" }}>\r\n            <Link\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              to=\"/purchases\"\r\n            >\r\n              {MainMenuItemName.Purchase}\r\n            </Link>\r\n          </Col>\r\n\r\n          <Col\r\n            span={2}\r\n            onClick={this.showMenu.bind(null, \"reporting\")}\r\n            style={{ color: \"white\" }}\r\n          >\r\n            <a\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              href=\"#\"\r\n            >\r\n              {MainMenuItemName.reporting}\r\n              <Icon type=\"down\" />\r\n            </a>\r\n          </Col>\r\n          <Col\r\n            span={2}\r\n            onClick={this.showMenu.bind(null, \"settings\")}\r\n            style={{ color: \"white\" }}\r\n          >\r\n            <a\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              href=\"#\"\r\n            >\r\n              Settings\r\n              <Icon type=\"down\" />\r\n            </a>\r\n          </Col>\r\n          <Col span={2}>\r\n            <Link\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              to=\"/recovery\"\r\n            >\r\n              {MainMenuItemName.recovery}>\r\n            </Link>\r\n          </Col>\r\n          <Col span={2}>\r\n            <Link\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              to=\"/expenses\"\r\n            >\r\n              {MainMenuItemName.Expenses}\r\n            </Link>\r\n            {/* <a className=\"ant-dropdown-link\" style={{ color: 'white' }} to='/expenses' href=\"#\">{MainMenuItemName.Expenses} */}\r\n          </Col>\r\n          <Col span={1}>\r\n            <Link\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              to=\"/salary\"\r\n            >\r\n              {MainMenuItemName.salary}\r\n            </Link>\r\n          </Col>\r\n          <Col span={2}>\r\n            <a\r\n              className=\"ant-dropdown-link\"\r\n              style={{ color: \"white\" }}\r\n              href=\"#\"\r\n            >\r\n              {MainMenuItemName.profit}\r\n            </a>\r\n          </Col>\r\n\r\n          <Col span={1}>\r\n            <Link to=\"/attendence\">{MainMenuItemName.return}</Link>\r\n          </Col>\r\n\r\n          {/* <Col span={1}><a className=\"ant-dropdown-link\" style={{ color: 'white' }} href=\"#\">{MainMenuItemName.return}\r\n            </a></Col>\r\n            <Col span={2}><a className=\"ant-dropdown-link\" style={{ color: 'white' }} href=\"#\">{MainMenuItemName.stock}\r\n            </a></Col> */}\r\n          {/* {!this.props.auth.loggedInUser.id && (\r\n            <Col span={2}>\r\n              {\" \"}\r\n              <Link to=\"/login\">\r\n                <Button type=\"dashed\">Login</Button>\r\n              </Link>\r\n            </Col>\r\n          )} */}\r\n        </Row>\r\n      </div>\r\n    );\r\n  };\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    auth: state.loginReducers,\r\n    nestdropdown: state.dropdownReducers.nestedItem,\r\n    accountitem: state.dropdownReducers.accounts,\r\n    reportingItem: state.dropdownReducers.reporting,\r\n    settingItems: state.dropdownReducers.settingItem,\r\n    MainMenuItemName: state.dropdownReducers.MainMenuItemNames\r\n  };\r\n};\r\nexport default withRouter(connect(mapStateToProps)(Header));\r\n","import React from 'react';\r\nimport {Route} from 'react-router-dom'\r\nimport Login from '../loginForm/loginform';\r\nimport './dashboard.css';   \r\nimport Navbar from '../navbar/navbar'    \r\n\r\n class Dashboard extends React.Component {\r\n    render() {\r\n        \r\n\r\n   \r\n        return <div>\r\n                \r\n            <div className=\"dashboard-container\">\r\n               {/* <h1>This is dashboard</h1>    */}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Dashboard;","export default {\r\n    customers: {\r\n        activated: \"CUSTOMER ACTIVATED!\",\r\n        deActivated: \"CUSTOMER DEACTIVATED!\",\r\n        created: \"CUSTOMER CREATED!\",\r\n        updated: \"CUSTOMER UPDATED!\",\r\n        error: {\r\n            cannotCreate: \"CUSTOMER CANNOT BE CREATED A THIS TIME!\"\r\n        }\r\n    },\r\n    attendance: {\r\n        created: \"ATTENDANCE CREATED!\",        \r\n        updated: \"ATTENDANCE UPDATED!\",\r\n        error: {\r\n            cannotCreate: \"ATTENDANCE CANNOT BE CREATED/UPDATED AT THIS TIME!\"\r\n        }\r\n    },\r\n    store: {\r\n        created: \"STORE CREATED!\",        \r\n        updated: \"STORE UPDATED!\",\r\n        error: {\r\n            cannotCreate: \"STORE CANNOT BE CREATED/UPDATED AT THIS TIME!\"\r\n        }\r\n    },\r\n    sales: {\r\n        saved: \"SALE ORDER SAVED!\",        \r\n        updated: \"SALE ORDER UPDATED!\",\r\n        error: {\r\n            cannotCreate: \"PURCHASE ORDER CANNOT BE SAVED AT THIS TIME!\"\r\n        }\r\n    },\r\n    purchase: {\r\n        saved: \"PURCHASE ORDER SAVED!\",        \r\n        updated: \"PURCHASE ORDER UPDATED!\",\r\n        error: {\r\n            cannotCreate: \"PURCHASE ORDER CANNOT BE SAVED AT THIS TIME!\"\r\n        }\r\n    },\r\n    area: {\r\n        activated: \"AREA ACTIVATED!\",\r\n        deActivated: \"AREA DEACTIVATED!\",\r\n        // created: \"AREA CREATED!\",\r\n        updated: \"AREA UPDATED!\",\r\n        error: {\r\n            cannotUpdate:\"AREA CANNOT BE UPDATED!\",\r\n            // cannotCreate: \"AREA CANNOT BE CREATED A THIS TIME!\"\r\n        }\r\n    },\r\n    categories: {\r\n        activated: \"CATEGORY ACTIVATED!\",\r\n        deActivated: \"CATEGORY DEACTIVATED!\",\r\n        // created: \"CATEGORY CREATED!\",\r\n        updated: \"CATEGORY UPDATED!\",\r\n        error: {\r\n            cannotCreate: \"CATEGORY CANNOT BE CREATED A THIS TIME!\"\r\n        }\r\n    },\r\n    products: {\r\n        activated: \"PRODUCT ACTIVATED!\",\r\n        deActivated: \"PRODUCT DEACTIVATED!\",\r\n        created: \"PRODUCT CREATED!\",\r\n        updated: \"PRODUCT UPDATED!\",\r\n        error: {\r\n            cannotCreate: \"PRODUCT CANNOT BE CREATED AT THIS TIME!\"\r\n        }\r\n    },\r\n    suppliers: {\r\n        activated: \"SUPPLIER ACTIVATED!\",\r\n        deActivated: \"SUPPLIER DEACTIVATED!\",\r\n        created: \"SUPPLIER CREATED!\",\r\n        updated: \"SUPPLIER UPDATED!\",\r\n        error: {\r\n            cannotCreate: \"SUPPLIER CANNOT BE CREATED AT THIS TIME!\"\r\n        }\r\n    },\r\n    expenses: {\r\n        // activated: \"SUPPLIER ACTIVATED!\",\r\n        // deActivated: \"SUPPLIER DEACTIVATED!\",\r\n        created: \"EXPENSE CREATED!\",\r\n        updated: \"EXPENSE UPDATED!\",\r\n        error: {\r\n            cannotCreate: \"EXPENSE CANNOT BE CREATED AT THIS TIME!\"\r\n        }\r\n    },\r\n    \r\n    users: {\r\n        activated: \"USER ACTIVATED!\",\r\n        deActivated: \"USER DEACTIVATED!\",\r\n        \r\n        updated: \"USER UPDATED!\",\r\n        salaryCreated:\"SALARY CREATED!\",\r\n        error: {\r\n            cannotCreateSalary:\"SALARY CANNOT BE CREATED AT THIS TIME!\",\r\n           \r\n        }\r\n    },\r\n    company: {\r\n        activated: \"COMPANY ACTIVATED!\",\r\n        deActivated: \"COMPANY DEACTIVATED!\",\r\n        // created: \"COMPANY CREATED!\",\r\n        updated: \"COMPANY UPDATED!\",\r\n        // error: {\r\n        //     cannotCreate: \"COMPANY CANNOT BE CREATED AT THIS TIME!\"\r\n        // }\r\n    },\r\n    error: {\r\n        unknown: \"\"\r\n    }\r\n}","import history from '../../historyProvider';\r\nimport messages from '../../message';\r\nimport { toast  } from 'react-toastify';\r\n\r\n\r\nexport default {\r\n    /// Needs Customer ID and desired state\r\n    toggleSupplierState(data) {        \r\n\r\n        return (dispatch) => {\r\n\r\n            fetch('/api/suppliers/toggleState', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((supplier) => {\r\n\r\n                    if(supplier._id){\r\n                        dispatch({\r\n                            type:'SUPPLIER_STATUS_UPDATED'\r\n                        });\r\n                        toast.success(messages.suppliers.updated);\r\n                    }else{\r\n                        toast.error(messages.suppliers.error.cannotCreate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    },\r\n    createSupplier(data) {\r\n\r\n        return (dispatch) => {\r\n\r\n\r\n            fetch('/api/suppliers/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((supplier) => {\r\n\r\n                    if(supplier._id){\r\n                        dispatch({\r\n                            type: data._id ? 'SUPPLIER_UPDATED' : 'SUPPLIER_CREATED',\r\n                            payload:supplier,\r\n                            model:\"suppliers\"\r\n                        });\r\n                        toast.success(messages.suppliers[data._id ? 'updated' : 'created']);\r\n                    }else{\r\n                        toast.error(messages.suppliers.error.cannotCreate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","import { connect } from \"react-redux\";\r\nimport React, { useState } from \"react\";\r\nimport middleWare from \"../../store/Middleware/suppliers\";\r\nimport \"./addSupplier.css\";\r\nimport utlities from \"../../utlities\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\n\r\nconst AddSupplier = props => {\r\n  let [state, setState] = useState({\r\n    code: utlities.getID(\"SUPPL\", \"code\", props.data.suppliers),\r\n    ...props.supplier\r\n  });\r\n  //   let [errormessage,seterrormessage]=useState({})\r\n  function updateState(evt) {\r\n    state[evt.target.id] = evt.target.value;\r\n    setState({ ...state });\r\n  }\r\n\r\n  function saveSupplier() {\r\n    state.code = state._id ? state.code : props.data.supplierCode;\r\n    let pattern = /^[a-zA-Z0-9\\-_]+(\\.[a-zA-Z0-9\\-_]+)*@[a-z0-9]+(\\-[a-z0-9]+)*(\\.[a-z0-9]+(\\-[a-z0-9]+)*)*\\.[a-z]{2,4}$/;\r\n       \r\n     \r\n    // Validation check\r\n    if ((state.firstName === undefined)||(state.firstName===\"\")) {\r\n      Alert.error(\"Please Enter Supplier Name !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.lastName === undefined)||(state.lastName===\"\")) {\r\n      Alert.error(\"Please Enter Supplier Last  Name!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.email === undefined)||(state.email===\"\")) {\r\n      Alert.error(\"Please Enter Supplier  Email Carefully!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if (pattern.test(state.email) === false) {\r\n      Alert.error(\"Please Enter Supplier Carefully!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.supplierGender === undefined)||(state.supplierGender===\"Gender\")) {\r\n      Alert.error(\"Please Select Supplier  Gender!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.zip === undefined)||(state.zip===\"\")) {\r\n      Alert.error(\"Please Enter Supplier  Zip Code!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.supplierProvince === undefined)||(state.supplierProvince===\"Province\")) {\r\n      Alert.error(\"Please select  Supplier Province!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.address === undefined)||(state.address===\"\")) {\r\n      Alert.error(\"Please Enter Supplier Address!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.agency === undefined)||(state.agency===\"\")) {\r\n      Alert.error(\"Please Enter  Supplier   Agency Name!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.comments === undefined)||(state.comments===\"\")) {\r\n      Alert.error(\"Please Enter  Comments!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.phone === undefined)||(state.phone===\"\")) {\r\n      Alert.error(\"Please Enter Supplier Phone Number!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((Object.keys(state.company).length === 0)||(state.company===\"Select Company\")) {\r\n      Alert.error(\"Please  select  Supplier Company!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else {\r\n      Alert.success(\"Succefully ! You Have Add Supplier!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n\r\n      console.log(state);\r\n      props.createSupplier(state);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"add-supplier\">\r\n      <div\r\n        class=\"modal-overlay\"\r\n        style={{ \"z-index\": 1002, display: \"block\", opacity: 0.9 }}\r\n      ></div>\r\n      <div\r\n        id=\"modal1\"\r\n        class=\"modal full-max-height\"\r\n        style={{ display: \"block\" }}\r\n      >\r\n        <div class=\"modal-content\">\r\n          <div className=\"sub-head\">Add Supplier</div>\r\n\r\n          <div className=\"modal-body\">\r\n            <Alert stack={{ limit: 1 }} />\r\n            <input\r\n              className=\"readonly-code\"\r\n              placeholder=\"Supplier Code\"\r\n              value={state._id ? state.code : props.data.supplierCode}\r\n              readOnly\r\n              id=\"code\"\r\n              type=\"text\"\r\n              required\r\n            />\r\n\r\n            <div className=\"row\">\r\n              {/* TBC, render companies name here */}\r\n              <div class=\"input-field col s6\">\r\n                <select\r\n                  value={state.company._id}\r\n                  onChange={updateState}\r\n                  id=\"company\"\r\n                  className=\"inline\"\r\n                  required\r\n                >\r\n                  {[{ name: \"Select Company\" }]\r\n                    .concat(props.data.companies)\r\n                    .map(company => {\r\n                      return (\r\n                        <option value={company._id}>{company.name}</option>\r\n                      );\r\n                    })}\r\n                </select>\r\n                {/* <input placeholder=\"Placeholder\" id=\"companyName\" type=\"text\" class=\"validate\" />\r\n                        <label className=\"default-input\" for=\"companyName\">Company Name</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.phone}\r\n                  onChange={updateState}\r\n                  placeholder=\"Phone\"\r\n                  id=\"phone\"\r\n                  type=\"number\"\r\n                  class=\"validate\"\r\n                  required\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierPhone\">Phone</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.firstName}\r\n                  onChange={updateState}\r\n                  placeholder=\"First Name\"\r\n                  id=\"firstName\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                  required\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierfName\">First Name</label> */}\r\n              </div>\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.lastName}\r\n                  onChange={updateState}\r\n                  placeholder=\"Last Name\"\r\n                  id=\"lastName\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                  required\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierlName\">Last Name</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.email}\r\n                  onChange={updateState}\r\n                  placeholder=\"Email\"\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  class=\"validate\"\r\n                  required\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierEmail\">Email</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <select\r\n                  value={state.supplierGender}\r\n                  onChange={updateState}\r\n                  className=\"inline\"\r\n                  id=\"supplierGender\"\r\n                  required\r\n                >\r\n                  <option>Gender</option>\r\n                  <option>Male</option>\r\n                  <option>Female</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.zip}\r\n                  onChange={updateState}\r\n                  placeholder=\"Zip\"\r\n                  id=\"zip\"\r\n                  type=\"number\"\r\n                  class=\"validate\"\r\n                  required\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierZip\">Zip</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <select\r\n                  value={state.supplierProvince}\r\n                  onChange={updateState}\r\n                  className=\"inline\"\r\n                  id=\"supplierProvince\"\r\n                  required\r\n                >\r\n                  <option>Province</option>\r\n                  <option>Punjab</option>\r\n                  <option>Sindh</option>\r\n                  <option>Balochistan</option>\r\n                  <option>KPK</option>\r\n                  <option>Gilgit Baltistan</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <textarea\r\n                  value={state.address}\r\n                  onChange={updateState}\r\n                  placeholder=\"Adress\"\r\n                  id=\"address\"\r\n                  class=\"materialize-textarea\"\r\n                  required\r\n                ></textarea>\r\n                {/* <label for=\"supplierAddress\">Street Address</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.agency}\r\n                  onChange={updateState}\r\n                  placeholder=\"Agency Name\"\r\n                  id=\"agency\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                  required\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierAgency\">Agency Name</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <textarea\r\n                  value={state.comments}\r\n                  onChange={updateState}\r\n                  placeholder=\"Comments\"\r\n                  id=\"comments\"\r\n                  class=\"materialize-textarea\"\r\n                  required\r\n                ></textarea>\r\n                {/* <label for=\"supplierComments\">Comments</label> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            className=\"waves-effect waves-light btn-small save\"\r\n            onClick={saveSupplier}\r\n          >\r\n            <i class=\"material-icons\"></i>Save\r\n          </button>\r\n          <button\r\n            className=\"waves-effect waves-light btn-small cancel\"\r\n            onClick={() => {\r\n              //props.toggleMenu(false)\r\n              props.showAddSupplier(false);\r\n            }}\r\n          >\r\n            <i class=\"material-icons\"></i>Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  store => {\r\n    return {\r\n      data: { ...store.supplierReducer, ...store.companyReducers }\r\n    };\r\n  },\r\n  dispatch => {\r\n    return {\r\n      createSupplier(data) {\r\n        return dispatch(middleWare.createSupplier(data));\r\n      }\r\n    };\r\n  }\r\n)(AddSupplier);\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddSupplier from \"./addSupplier\"\r\nimport Pagination from \"react-js-pagination\";\r\n// const Supplier = (props)=>{\r\nclass Supplier extends React.Component {\r\n  // let [addingSupplier, showAddSupplier] = useState(false);\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activePage: 1,\r\n      itemPerPage: 10\r\n    };\r\n  }\r\n\r\n  state = {\r\n    openSupplierForm: false,\r\n    suppliers: this.props.data.suppliers\r\n  };\r\n  //   onchange = e => {\r\n  //     e.preventDefault();\r\n  //     // a\r\n  //     search(a);\r\n  //   };\r\n  //   search = () => {\r\n  //     this.state.suppliers.map(s => {\r\n  //       return s.firstName.match(/`${a}`/g);\r\n  //     });\r\n  //   };\r\n  componentDidMount(){\r\n    // console.log(this.props.match.params)\r\n  }\r\n  handlePageChange(pageNumber) {\r\n    console.log(`active page is ${pageNumber}`);\r\n    this.setState({ activePage: pageNumber });\r\n  }\r\n  render() {\r\n    let indexOfLastitem = this.state.activePage * this.state.itemPerPage;\r\n    let indexOfFirstitem = indexOfLastitem - this.state.itemPerPage;\r\n    let renderedsuppliers = this.props.data.suppliers.slice(\r\n      indexOfFirstitem,\r\n      indexOfLastitem\r\n    );\r\n    return (\r\n      <section className=\"app-section\">\r\n        {this.state.openSupplierForm ? (\r\n          <AddSupplier\r\n            supplier={this.state.targetSupplier}\r\n            showAddSupplier={() => {\r\n              this.setState({\r\n                openSupplierForm: false\r\n              });\r\n            }}\r\n          />\r\n        ) : null}\r\n        <div className=\"label-head\">\r\n          <img src=\"/images/label-head.png\" />\r\n          <h4>Suppliers</h4>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div class=\"input-field col s3\">\r\n            <input\r\n              id=\"first_name\"\r\n              type=\"text\"\r\n              class=\"validate\"\r\n              onChange={this.onchange}\r\n            />\r\n            <label className=\"adjusted-label\" for=\"first_name\">\r\n              Search Suppliers\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>SR.</th>\r\n                <th>CODE</th>\r\n                <th>FULL NAME</th>\r\n                <th>COMPANY</th>\r\n                <th className=\"wd-200\">PHONE</th>\r\n                <th className=\"wd-200\">ADDRESS</th>\r\n                <th>\r\n                  {this.props.showAddBtn && (\r\n                    <img\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          openSupplierForm: true,\r\n                          targetSupplier: {\r\n                            company: {}\r\n                          }\r\n                        });\r\n                      }}\r\n                      className=\"icon add-item\"\r\n                      src=\"/images/add-icon.png\"\r\n                    />\r\n                  )}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {renderedsuppliers.map((supplier, i) => {\r\n                return (\r\n                  <tr>\r\n                    <td>\r\n                      <b>{i + 1}</b>\r\n                    </td>\r\n                    <td>{supplier.code}</td>\r\n                    <td>\r\n                      {supplier.firstName + \" \" + (supplier.lastName || \"\")}\r\n                    </td>\r\n                    <td>{supplier.company.name}</td>\r\n                    <td className=\"wd-200\">{supplier.phone}</td>\r\n                    <td className=\"wd-200\">{supplier.address}</td>\r\n                    <td>\r\n                    <img title=\"Edit\" onClick={() => {\r\n                                        this.setState({\r\n                                            targetSupplier: supplier,\r\n                                            openSupplierForm: true\r\n                                        })\r\n                                    }\r\n                                    } className=\"icon pointer\" src=\"/images/table-icons/edit-icon.png\" />\r\n                      <Link to={\"/accountsdetails/\" + supplier._id}>\r\n                        <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                      </Link>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <center>\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              itemsCountPerPage={renderedsuppliers.length}\r\n              totalItemsCount={this.props.data.suppliers.length}\r\n              pageRangeDisplayed={renderedsuppliers.length}\r\n              onChange={pageNumber => this.handlePageChange(pageNumber)}\r\n            />\r\n          </center>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default connect(store => {\r\n  return {\r\n    data: store.supplierReducer\r\n  };\r\n})(Supplier);\r\n","import history from \"../../historyProvider\";\r\nimport messages from \"../../message\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport default {\r\n  /// Needs Customer ID and desired state\r\n  toggleProductState(data) {\r\n    return dispatch => {\r\n      fetch(\"/api/products/toggleState\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n        .then(resp => {\r\n          return resp.json();\r\n        })\r\n        .then(product => {\r\n          if (product._id) {\r\n            dispatch({\r\n              payload: product,\r\n              type: \"PRODUCT_UPDATED\"\r\n            });\r\n            toast.success(messages.products.created);\r\n          } else {\r\n            toast.error(messages.products.error.cannotCreate);\r\n          }\r\n        });\r\n    };\r\n  },\r\n  createProduct(data) {\r\n    return dispatch => {\r\n      fetch(\"/api/products/create\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n        .then(resp => {\r\n          return resp.json();\r\n        })\r\n        .then(product => {\r\n          console.log(\"Peoduct Midd\", product);\r\n          if (product._id) {\r\n            dispatch({\r\n              type: data._id ? \"PRODUCT_UPDATED\" : \"PRODUCT_CREATED\",\r\n              payload: product,\r\n              model: \"products\"\r\n            });\r\n            toast.success(messages.products[data._id ? \"updated\" : \"created\"]);\r\n          } else {\r\n            toast.error(messages.products.error.cannotCreate);\r\n          }\r\n        });\r\n    };\r\n  }\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState } from \"react\";\r\n// import './addProduct.css';\r\nimport customerMiddleWare from \"../../../store/Middleware/products\";\r\nimport utlities from \"../../../utlities\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\n\r\n// const AddCustomer = (this.props) => {\r\nclass AddProduct extends React.Component {\r\n  // let [this.state, setState] = useState({\r\n  //     margin:0,\r\n  //     shopkeeperPrice:0,\r\n  //     cost:0\r\n  // });\r\n\r\n  state = {\r\n    // code: this.props.data.productCode,\r\n    // utlities.getID(\"CUST\", \"code\", this.props.data.products),\r\n    ...this.props.product\r\n  };\r\n\r\n  updateState = evt => {\r\n    this.state[evt.target.id] = evt.target.value;\r\n    evt.target.id == \"shopkeeperPrice\" &&\r\n      this.state.cost &&\r\n      (this.state.margin = this.state.cost - evt.target.value);\r\n    this.setState(this.state);\r\n  };\r\n\r\n  saveCustomer = () => {\r\n    // TBC add validation here\r\n    this.state.code = this.state._id\r\n      ? this.state.code\r\n      : this.props.data.productCode;\r\n\r\n    console.log(this.state.category);\r\n    if ((this.state.name === undefined )||( this.state.name === \"\")) {\r\n      Alert.error(\"Please Enter Product Name !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else if ((this.state.cost === undefined )|| (this.state.cost === \"\")) {\r\n      Alert.error(\"Please Enter  Product Cost !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else if (\r\n      this.state.shopkeeperPrice === undefined ||\r\n      this.state.shopkeeperPrice === \"\"\r\n    ) {\r\n      Alert.error(\"Please Enter   Shopkeeper Price !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else if (\r\n      (this.state.customerPrice === undefined )||\r\n     ( this.state.customerPrice === \"\")\r\n    ) {\r\n      Alert.error(\"Please Enter  Customer price !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else if (\r\n     ( this.state.quantityType === undefined) ||\r\n      (this.state.quantityType === \"\")\r\n    ) {\r\n      Alert.error(\"Please Enter Product  Quantity Type !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else if (\r\n     ( this.state.category === undefined) ||\r\n      (this.state.category === \"Select Category\")\r\n    ) {\r\n      Alert.error(\"Please Enter  Product Category!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else if (\r\n      this.state.productQty === undefined ||\r\n      this.state.productQty === \"\"\r\n    ) {\r\n      Alert.error(\"Please Enter  Product Quantity !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else if (\r\n      this.state.cartonSize === undefined ||\r\n      this.state.cartonSize === \"\"\r\n    ) {\r\n      Alert.error(\"Please Enter   Carton Size !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else if (\r\n      this.state.description === undefined ||\r\n      this.state.description === \"\"\r\n    ) {\r\n      Alert.error(\"Please Enter   Description !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else if (\r\n      Object.keys(this.state.company).length === 0 ||\r\n      this.state.company === \"Select Company\"\r\n    ) {\r\n      Alert.error(\"Please Enter   Select Company !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else {\r\n      Alert.success(\"Please Enter  Customer price !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n      this.props.createCustomer(this.state);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"add-customer\">\r\n        <div\r\n          class=\"modal-overlay\"\r\n          style={{ \"z-index\": 1002, display: \"block\", opacity: 0.5 }}\r\n        ></div>\r\n        <div\r\n          id=\"modal1\"\r\n          class=\"modal\"\r\n          style={{\r\n            display: \"block\",\r\n            \"max-height\": \"fit-content\"\r\n            //     height: '90vh',\r\n            //     'max-height': '90%',\r\n            //     top: 0,\r\n            //     bottom: 0\r\n          }}\r\n        >\r\n          <div class=\"modal-content\">\r\n            <div className=\"sub-head\">Add Product</div>\r\n            <Alert stack={{ limit: 1 }} />\r\n\r\n            <div className=\"modal-body\">\r\n              <input\r\n                className=\"readonly-code\"\r\n                placeholder=\"Product Code\"\r\n                value={\r\n                  this.state._id ? this.state.code : this.props.data.productCode\r\n                }\r\n                readOnly\r\n                id=\"code\"\r\n                type=\"text\"\r\n              />\r\n\r\n              <div className=\"row\">\r\n                {/* TBC, render supplier name here */}\r\n                <div class=\"input-field col s6\">\r\n                  <select\r\n                    value={this.state.company._id}\r\n                    onChange={this.updateState}\r\n                    id=\"company\"\r\n                    className=\"inline\"\r\n                  >\r\n                    {[{ name: \"Select Company\" }]\r\n                      .concat(this.props.data.companies)\r\n                      .map(company => {\r\n                        return (\r\n                          <option value={company._id}>{company.name}</option>\r\n                        );\r\n                      })}\r\n                  </select>\r\n                  {/* <input placeholder=\"Placeholder\" id=\"companyName\" type=\"text\" class=\"validate\" />\r\n                        <label className=\"default-input\" for=\"companyName\">Company Name</label> */}\r\n                </div>\r\n\r\n                <div class=\"input-field col s6\">\r\n                  <input\r\n                    value={this.state.name}\r\n                    onChange={this.updateState}\r\n                    placeholder=\"Name\"\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    class=\"validate\"\r\n                  />\r\n                  {/* <label className=\"default-input\" for=\"productName\">Product Name</label> */}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div class=\"input-field col s6\">\r\n                  <input\r\n                    value={this.state.cost}\r\n                    onChange={this.updateState}\r\n                    placeholder=\"Cost\"\r\n                    id=\"cost\"\r\n                    type=\"number\"\r\n                    class=\"validate\"\r\n                  />\r\n                  {/* <label className=\"default-input\" for=\"productCost\">Product Cost</label> */}\r\n                </div>\r\n                <div class=\"input-field col s6\">\r\n                  <input\r\n                    value={this.state.shopkeeperPrice}\r\n                    onChange={this.updateState}\r\n                    placeholder=\"Shopkeeper Price\"\r\n                    id=\"shopkeeperPrice\"\r\n                    type=\"number\"\r\n                    class=\"validate\"\r\n                  />\r\n                  {/* <label className=\"default-input\" for=\"shopkeeperPrice\">Shopkeeper Price</label> */}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div class=\"input-field col s6\">\r\n                  <input\r\n                    value={this.state.margin}\r\n                    placeholder=\"Margin\"\r\n                    id=\"margin\"\r\n                    type=\"number\"\r\n                    readOnly\r\n                  />\r\n                  {/* <label className=\"default-input\" for=\"productMargin\">Margin</label> */}\r\n                </div>\r\n\r\n                <div class=\"input-field col s6\">\r\n                  <input\r\n                    value={this.state.customerPrice}\r\n                    onChange={this.updateState}\r\n                    placeholder=\"Customer Price\"\r\n                    id=\"customerPrice\"\r\n                    type=\"number\"\r\n                    class=\"validate\"\r\n                  />\r\n                  {/* <label className=\"default-input\" for=\"productCpPrice\">Customer Price</label> */}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div class=\"input-field col s6\">\r\n                  <select\r\n                    value={this.state.quantityType}\r\n                    onChange={this.updateState}\r\n                    className=\"inline\"\r\n                    id=\"quantityType\"\r\n                  >\r\n                    <option value=\"none\">Quantity Type</option>\r\n                    <option value=\"unit\">Unit</option>\r\n                    <option value=\"carton\">Carton</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div class=\"input-field col s6\">\r\n                  <select\r\n                    state={this.state.category}\r\n                    onChange={this.updateState}\r\n                    id=\"category\"\r\n                    className=\"inline\"\r\n                  >\r\n                    {[{ name: \"Select Category\" }]\r\n                      .concat(this.props.data.categories)\r\n                      .map(category => {\r\n                        return (\r\n                          <option value={category._id}>{category.name}</option>\r\n                        );\r\n                      })}\r\n                  </select>\r\n                  {/* <input onChange={this.updateState} placeholder=\"Placeholder\" id=\"cartonSize\" type=\"number\" class=\"validate\" /> */}\r\n                  {/* <label className=\"default-input\" for=\"cartonSize\">Carton Price</label> */}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div class=\"input-field col s6\">\r\n                  <input\r\n                    value={this.state.productQty}\r\n                    onChange={this.updateState}\r\n                    placeholder=\"Quantity\"\r\n                    id=\"productQty\"\r\n                    type=\"number\"\r\n                    class=\"validate\"\r\n                  />\r\n                  {/* <label className=\"default-input\" for=\"productQty\">Quantity</label> */}\r\n                </div>\r\n\r\n                <div class=\"input-field col s6\">\r\n                  <input\r\n                    value={this.state.cartonSize}\r\n                    onChange={this.updateState}\r\n                    placeholder=\"Carton Size\"\r\n                    id=\"cartonSize\"\r\n                    type=\"number\"\r\n                    class=\"validate\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div class=\"input-field col s6\">\r\n                  <textarea\r\n                    value={this.state.description}\r\n                    onChange={this.updateState}\r\n                    placeholder=\"Description\"\r\n                    id=\"description\"\r\n                    class=\"materialize-textarea\"\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button\r\n              className=\"waves-effect waves-light btn-small save\"\r\n              onClick={this.saveCustomer}\r\n            >\r\n              <i class=\"material-icons\"></i>Save\r\n            </button>\r\n            <button\r\n              className=\"waves-effect waves-light btn-small cancel\"\r\n              onClick={() => {\r\n                //this.props.toggleMenu(false)\r\n                this.props.showAddProduct(false);\r\n              }}\r\n            >\r\n              <i class=\"material-icons\"></i>Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchtoProps = dispatch => {\r\n  return {\r\n    createCustomer: data => {\r\n      dispatch(customerMiddleWare.createProduct(data));\r\n    }\r\n  };\r\n};\r\nexport default connect(store => {\r\n  return {\r\n    data: {\r\n      ...store.categoryReducers,\r\n      ...store.productReducers,\r\n      ...store.companyReducers\r\n    }\r\n  };\r\n}, mapDispatchtoProps)(AddProduct);\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AddProduct from './addProduct';\r\nimport Pagination from \"react-js-pagination\";                                       \r\n\r\n// const Product = (this.props)=>{\r\nclass Product extends React.Component {\r\n       constructor(props)\r\n       {\r\n           super(props)\r\n          this.state={\r\n           activePage: 1,\r\n           itemPerPage: 10,\r\n           targetProduct: {\r\n            company: {},\r\n            category: {}\r\n        },\r\n        openProductForm: false\r\n          }\r\n       }\r\n       handlePageChange(pageNumber) {\r\n        console.log(`active page is ${pageNumber}`);\r\n        this.setState({ activePage: pageNumber });\r\n      }\r\n\r\n    render() {\r\n    \r\n        let indexOfLastitem = this.state.activePage * this.state.itemPerPage;\r\n        let indexOfFirstitem = indexOfLastitem - this.state.itemPerPage;\r\n        let renderedproducts = this.props.data.products.slice(\r\n          indexOfFirstitem,\r\n          indexOfLastitem\r\n        );\r\n\r\n        //    let [addingProduct, showAddProduct] = useState(false);\r\n        \r\n\r\n        return <section className=\"app-section\">\r\n            {this.state.openProductForm ? <AddProduct product={this.state.targetProduct} showAddProduct={() => {\r\n                this.setState({\r\n                    targetProduct: {\r\n                        company: {},\r\n                        category: {}\r\n                    },\r\n                    openProductForm: false\r\n                })\r\n            }} /> : null}\r\n            <div className=\"label-head\">\r\n                <img src=\"/images/label-head.png\" />\r\n                <h4>Products</h4>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div class=\"input-field col s3\">\r\n                    <input placeholder=\"Placeholder\" id=\"productID\" type=\"text\" class=\"validate\" />\r\n                    <label className=\"adjusted-label\" for=\"productID\">Search Products</label>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"wd-20\">SR.</th>\r\n                            <th>CODE</th>\r\n                            <th className=\"wd-200\">NAME</th>\r\n                            <th>SUPPLIER</th>\r\n                            <th>COST</th>\r\n                            <th>SHOPKEEPPER PRICE</th>\r\n                            <th>MARGIN</th>\r\n                            <th>CUSTOMER PRICE</th>\r\n                            <th>QTY</th>\r\n                            <th>TIME</th>\r\n                            <th>\r\n                                {/* {this.props.showAddBtn &&   */}\r\n                                <img onClick={() => {\r\n                                    // showAddProduct(true)\r\n                                    this.setState({\r\n                                        targetProduct:{\r\n                                            company: {},\r\n                                            category: {}\r\n                                        },\r\n                                        openProductForm:true\r\n                                    });\r\n                                }} className=\"icon add-item\" src=\"/images/add-icon.png\" />\r\n                                {/* } */}\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {/* TBC, product purchasing should be hanlde seperately, inlist  */}\r\n\r\n                        {this.props.data.products.map((product, i) => {\r\n                            return <tr>\r\n                                <td className=\"wd-20\"><b>{(i + 1)}</b></td>\r\n                                <td>{product.code}</td>\r\n                                <td className=\"wd-200\">{product.name}</td>\r\n                                {/* <td>{product.product.name}</td> */}\r\n                                <td>{product.company.name}</td>\r\n                                <td>{product.cost}</td>\r\n                                <td>{product.shopkeeperPrice}</td>\r\n                                <td>{product.margin}</td>\r\n                                <td>{product.customerPrice}</td>\r\n                                <td>{product.productQty}</td>\r\n                                <td>{product.time}</td>\r\n                                <td>\r\n                                <img title=\"Edit\" onClick={() => {\r\n                                        this.setState({\r\n                                            targetProduct: product,\r\n                                            openProductForm: true\r\n                                        })\r\n                                    }\r\n                                    } className=\"icon pointer\" src=\"/images/table-icons/edit-icon.png\" />\r\n                                    <Link to={'/accountsdetails/' + product.id}>\r\n                                        <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                                    </Link>\r\n                                </td>\r\n                            </tr>\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <center>\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              itemsCountPerPage={renderedproducts.length}\r\n              totalItemsCount={this.props.data.products.length}\r\n              pageRangeDisplayed={renderedproducts.length}\r\n              onChange={pageNumber => this.handlePageChange(pageNumber)}\r\n            />\r\n          </center>\r\n\r\n        </section>\r\n\r\n    }\r\n\r\n}\r\n    export default connect((store) => {\r\n        return {\r\n            data: store.productReducers\r\n        }\r\n    }) (Product);","import history from '../../historyProvider';\r\nimport messages from '../../message';\r\nimport { toast  } from 'react-toastify';\r\n\r\n\r\nexport default {\r\n    /// Needs Customer ID and desired state\r\n    // toggleCompanyState(data) {        \r\n\r\n    //     return (dispatch) => {\r\n\r\n    //         fetch('/api/companies/toggleState', {\r\n    //             method: 'POST',\r\n    //             headers: {\r\n    //                 'Content-Type': 'application/json'\r\n    //             },\r\n    //             body: JSON.stringify(data)\r\n    //         })\r\n    //             .then(resp => {\r\n    //                 return resp.json();\r\n    //             }).then((company) => {\r\n\r\n    //                 if(company._id){\r\n    //                     dispatch({\r\n    //                         type:'COMPANY_STATUS_UPDATED'\r\n    //                     });\r\n    //                     toast.success(messages.company.created);\r\n    //                 }else{\r\n    //                     toast.error(messages.company.error.cannotCreate);\r\n    //                 }\r\n\r\n    //              });\r\n\r\n    //     }\r\n\r\n    // },\r\n    createCompany(data) {\r\n\r\n        return (dispatch) => {\r\n\r\n\r\n            fetch('/api/companies/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((company) => {\r\n\r\n                    if(company._id){\r\n                        dispatch({\r\n                            type: data._id ? 'COMPANY_UPDATED' : 'COMPANY_CREATED',\r\n                            payload:company,\r\n                            model:'companies'\r\n                        });\r\n                        toast.success(messages.company[data._id ? 'updated' : 'created']);\r\n                    }else{\r\n                        toast.error(messages.company.error.cannotCreate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","import { connect, useSelector } from \"react-redux\";\r\nimport React, { useState } from \"react\";\r\n// import './addCustomer.css';\r\nimport middleware from \"../../../store/Middleware/company\";\r\nimport utlities from \"../../../utlities\";\r\nimport { lastDayOfQuarterWithOptions } from \"date-fns/fp\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\n\r\nconst AddCompany = props => {\r\n  let [state, setState] = useState({\r\n    // code:code,\r\n    ...props.company\r\n  });\r\n  console.log(state.code);\r\n\r\n  function updateState(evt) {\r\n    state[evt.target.id] = evt.target.value;\r\n    setState({ ...state });\r\n  }\r\n\r\n  function saveCustomer() {\r\n    state.code = state._id ? state.code : props.data.code;\r\n       // validation check\r\n    if ((state.name === undefined)||(state.name===\"\")) {\r\n      Alert.error(\"Please Enter  Company Name !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.phone === undefined)||(state.phone===\"\")) {\r\n      Alert.error(\"Please Enter  Company Phone Number!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.address === undefined)||(state.address===\"\")) {\r\n      Alert.error(\"Please Enter  Company Address\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else {\r\n      props.createCompany(state);\r\n      Alert.success(\"Successfully ! Campany Created\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    }\r\n  }\r\n\r\n  // setState({\r\n  //     code:code\r\n  // })\r\n\r\n  return (\r\n    <div className=\"add-customer\">\r\n      <div\r\n        class=\"modal-overlay\"\r\n        style={{ \"z-index\": 1002, display: \"block\", opacity: 0.9 }}\r\n      ></div>\r\n      <div id=\"modal1\" class=\"modal modal-small\" style={{ display: \"block\" }}>\r\n        <div class=\"modal-content\">\r\n          <div className=\"sub-head\">Add Company</div>\r\n          <Alert stack={{ limit: 1 }} />\r\n          <input\r\n            className=\"readonly-code\"\r\n            placeholder=\"Company Code\"\r\n            value={state._id ? state.code : props.data.code}\r\n            readOnly\r\n            id=\"code\"\r\n            type=\"text\"\r\n          />\r\n\r\n          <div className=\"modal-body def-modal-body text-center\">\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s12\">\r\n                <input\r\n                  value={state.name}\r\n                  onChange={updateState}\r\n                  placeholder=\"Company Name\"\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"companyName\">Company Name</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s12\">\r\n                <input\r\n                  value={state.phone}\r\n                  onChange={updateState}\r\n                  placeholder=\"Company Phone\"\r\n                  id=\"phone\"\r\n                  type=\"number\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"companyPhone\">Company Phone</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s12\">\r\n                <input\r\n                  value={state.address}\r\n                  onChange={updateState}\r\n                  placeholder=\"Company Address\"\r\n                  id=\"address\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"companyAddress\">Company Address</label> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            className=\"waves-effect waves-light btn-small save\"\r\n            onClick={saveCustomer}\r\n          >\r\n            <i class=\"material-icons\"></i>Save\r\n          </button>\r\n          <button\r\n            className=\"waves-effect waves-light btn-small cancel\"\r\n            onClick={() => {\r\n              //props.toggleMenu(false)\r\n              props.showAddCompany(false);\r\n            }}\r\n          >\r\n            <i class=\"material-icons\"></i>Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchtoProps = dispatch => {\r\n  return {\r\n    createCompany: data => {\r\n      dispatch(middleware.createCompany(data));\r\n    }\r\n  };\r\n};\r\nexport default connect(store => {\r\n  return {\r\n    data: store.companyReducers\r\n  };\r\n}, mapDispatchtoProps)(AddCompany);\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AddCompany from './addCompany';\r\nimport middleware from '../../../store/Middleware/company';\r\nimport Pagination from \"react-js-pagination\";\r\n\r\n// const Company = (this.props) => {\r\nclass Company extends React.Component {\r\n      constructor(props)\r\n      {\r\n          super(props)\r\n  this.state = {\r\n        targetCompany: {},\r\n        openCompanyForm: false,\r\n        activePage: 1,\r\n      itemPerPage: 10\r\n    }\r\n      }\r\n    // let [addingCompany, showAddCompany] = useState(false);\r\n\r\n    toggleStatus = (company) => {\r\n\r\n        company.status = !company.status;\r\n        this.props.toggleState(company);\r\n\r\n    }\r\n    handlePageChange(pageNumber) {\r\n        console.log(`active page is ${pageNumber}`);\r\n        this.setState({ activePage: pageNumber });\r\n      }\r\n    render() {\r\n        let indexOfLastitem = this.state.activePage * this.state.itemPerPage;\r\n    let indexOfFirstitem = indexOfLastitem - this.state.itemPerPage;\r\n    let rendercompanies= this.props.data.companies.slice(\r\n      indexOfFirstitem,\r\n      indexOfLastitem\r\n    );\r\n\r\n        return <section className=\"app-section\">\r\n            {this.state.openCompanyForm ? <AddCompany company = {this.state.targetCompany} showAddCompany={()=>{\r\n                this.setState({\r\n                    targetCompany:{},\r\n                    openCompanyForm:false\r\n                })\r\n            }} /> : null}\r\n            <div className=\"label-head\">\r\n                <img src=\"/images/label-head.png\" />\r\n                <h4>Companies</h4>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div class=\"input-field col s3\">\r\n                    <input placeholder=\"Placeholder\" id=\"first_name\" type=\"text\" class=\"validate\" />\r\n                    <label className=\"adjusted-label\" for=\"first_name\">Search Companies</label>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>SR.</th>\r\n                            <th>CODE</th>\r\n                            <th>NAME</th>\r\n                            <th>PHONE</th>\r\n                            <th className=\"wd-200\">ADDRESS</th>\r\n                            <th>\r\n                                <img onClick={() => {\r\n                                    this.setState({openCompanyForm:true});\r\n                                }} className=\"icon add-item\" src=\"/images/add-icon.png\" />\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {rendercompanies.map((company, i) => {\r\n                            return <tr>\r\n                                <td><b>{(i + 1)}</b></td>\r\n                                <td>{company.code}</td>\r\n                                <td>{company.name}</td>\r\n                                <td>{company.phone}</td>\r\n                                <td className=\"wd-200\">{company.address}</td>\r\n                                <td>\r\n                                    <img title=\"Edit\" onClick={() => {\r\n                                        this.setState({\r\n                                            targetCompany: company,\r\n                                            openCompanyForm: true\r\n                                        })\r\n                                    }\r\n                                    } className=\"icon pointer\" src=\"/images/table-icons/edit-icon.png\" />\r\n                                    <button onClick={this.toggleStatus.bind(null, company)} className={company.status ? \"control-btn\" : \"control-btn disabled-btn\"}>{company.status ? \"Deactivate\" : \"Activate\"}</button></td>\r\n                                {/* <td>\r\n                    <Link to={'/accountsdetails/'+supplier.id}>\r\n                            <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                    </Link>\r\n                     </td> */}\r\n                            </tr>\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <center>\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              itemsCountPerPage={rendercompanies.length}\r\n              totalItemsCount={this.props.data.companies.length}\r\n              pageRangeDisplayed={rendercompanies.length}\r\n              onChange={pageNumber => this.handlePageChange(pageNumber)}\r\n            />\r\n          </center>\r\n\r\n        </section>\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect((store) => {\r\n    return {\r\n        data: store.companyReducers\r\n    }\r\n}, (dispatch) => {\r\n\r\n    return {\r\n        toggleState: (args) => {\r\n\r\n            dispatch(middleware.createCompany(args));\r\n\r\n\r\n        }\r\n    };\r\n\r\n})(Company);","import history from '../../historyProvider';\r\nimport messages from '../../message';\r\nimport { toast  } from 'react-toastify';\r\n\r\n\r\nexport default {\r\n    /// Needs Customer ID and desired state\r\n    toggleCategoryState(data) {        \r\n\r\n        return (dispatch) => {\r\n\r\n            fetch('/api/categories/toggleState', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((company) => {\r\n\r\n                    if(company._id){\r\n                        dispatch({\r\n                            type:'CATEGORY_STATUS_UPDATED'\r\n                        });\r\n                        toast.success(messages.categories.created);\r\n                    }else{\r\n                        toast.error(messages.categories.error.cannotCreate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    },\r\n    createCategory(data) {\r\n\r\n        return (dispatch) => {\r\n\r\n\r\n            fetch('/api/categories/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((company) => {\r\n\r\n                    if(company._id){\r\n                        dispatch({\r\n                            type:data._id ? 'CATEGORY_UPDATED' : 'CATEGORY_CREATED',\r\n                            payload:company,\r\n                            model:'categories'\r\n                        });\r\n                        toast.success(messages.categories[data._id ? 'updated' : 'created']);\r\n                    }else{\r\n                        toast.error(messages.categories.error.cannotCreate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","import { connect } from \"react-redux\";\r\nimport React, { useState } from \"react\";\r\n// import './addCustomer.css';\r\nimport middleware from \"../../../store/Middleware/category\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\nimport utlities from \"../../../utlities\";\r\n\r\nconst AddCategory = props => {\r\n  let [state, setState] = useState({\r\n    ...props.category\r\n    // code:utlities.getID(\"CATEG\",\"code\",props.data.categories)\r\n  });\r\n  console.log(state.code);\r\n\r\n  function updateState(evt) {\r\n    state[evt.target.id] = evt.target.value;\r\n    setState({ ...state });\r\n  }\r\n\r\n  function saveCategory() {\r\n    state.code = state._id ? state.code : props.data.categCode;\r\n\r\n    if (state.name === \"\") {\r\n      Alert.error(\"Please Enter  Catgory!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else {\r\n      Alert.success(\"Successfully!  Catgory created !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n      props.createCategory(state);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"add-category\">\r\n      <div\r\n        class=\"modal-overlay\"\r\n        style={{ \"z-index\": 1002, display: \"block\", opacity: 0.5 }}\r\n      ></div>\r\n      <div id=\"modal1\" class=\"modal modal-small\" style={{ display: \"block\" }}>\r\n        <div class=\"modal-content\">\r\n          <div className=\"sub-head\">Add Catgory</div>\r\n          <Alert stack={{ limit: 1 }} />\r\n          <div className=\"modal-body def-modal-body text-center\">\r\n            <input\r\n              className=\"readonly-code\"\r\n              placeholder=\"Category Code\"\r\n              value={state._id ? state.code : props.data.categCode}\r\n              readOnly\r\n              id=\"code\"\r\n              type=\"text\"\r\n            />\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s12\">\r\n                <input\r\n                  value={state.name}\r\n                  onChange={updateState}\r\n                  placeholder=\"Name\"\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"companyName\">Company Name</label> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            className=\"waves-effect waves-light btn-small save\"\r\n            onClick={saveCategory}\r\n          >\r\n            <i class=\"material-icons\"></i>Save\r\n          </button>\r\n          <button\r\n            className=\"waves-effect waves-light btn-small cancel\"\r\n            onClick={() => {\r\n              //props.toggleMenu(false)\r\n              props.showAddCategory(false);\r\n            }}\r\n          >\r\n            <i class=\"material-icons\"></i>Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchtoProps = dispatch => {\r\n  return {\r\n    createCategory: data => {\r\n      dispatch(middleware.createCategory(data));\r\n    }\r\n  };\r\n};\r\nexport default connect(store => {\r\n  return {\r\n    data: store.categoryReducers\r\n  };\r\n}, mapDispatchtoProps)(AddCategory);\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AddCategory from './addCategory';\r\nimport middleware from '../../../store/Middleware/company';\r\nimport category from \"../../../store/Middleware/category\";\r\nimport Pagination from \"react-js-pagination\";\r\n// const Category = (this.props) => {\r\nclass Category extends React.Component {\r\n\r\n    // let [addingCategory, showAddCategory] = useState(false);\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          activePage: 1,\r\n          itemPerPage: 10,\r\n          targetCategory: {\r\n            name: ''\r\n        },\r\n        openCategoryForm: false\r\n        };\r\n      }\r\n  \r\n\r\n    toggleStatus = (company) => {\r\n\r\n        company.status = !company.status;\r\n        this.props.toggleState(company);\r\n\r\n    }\r\n    handlePageChange(pageNumber) {\r\n        console.log(`active page is ${pageNumber}`);\r\n        this.setState({ activePage: pageNumber });\r\n      }\r\n    \r\n    render = () => {\r\n        let indexOfLastitem = this.state.activePage * this.state.itemPerPage;\r\n        let indexOfFirstitem = indexOfLastitem - this.state.itemPerPage;\r\n        let renderedCategories = this.props.data.categories.slice(\r\n          indexOfFirstitem,\r\n          indexOfLastitem\r\n        );\r\n\r\n        return <section className=\"app-section\">\r\n            {this.state.openCategoryForm ? <AddCategory category={this.state.targetCategory} showAddCategory={()=>{\r\n                this.setState({\r\n                    openCategoryForm:false,\r\n                    targetCategory:{\r\n                        name:\"\"\r\n                    }\r\n                })\r\n            }} /> : null}\r\n            <div className=\"label-head\">\r\n                <img src=\"/images/label-head.png\" />\r\n                <h4>Categories</h4>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div class=\"input-field col s3\">\r\n                    <input placeholder=\"Placeholder\" id=\"first_name\" type=\"text\" class=\"validate\" />\r\n                    <label className=\"adjusted-label\" for=\"first_name\">Search Companies</label>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>SR.</th>\r\n                            <th>CODE</th>\r\n                            <th>NAMEjkjkjk</th>\r\n                            <th>\r\n                                <img onClick={() => {\r\n                                    // showAddCategory(true)\r\n                                    this.setState({\r\n                                        openCategoryForm:true\r\n                                    })\r\n                                }} className=\"icon add-item\" src=\"/images/add-icon.png\" />\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {renderedCategories.map((company, i) => {\r\n                            return <tr>\r\n                                <td><b>{(i + 1)}</b></td>\r\n                                <td>{company.code}</td>\r\n                                <td>{company.name}</td>\r\n                                <td>\r\n                                    <img title=\"Edit\" onClick={() => {\r\n                                        this.setState({\r\n                                            targetCategory: company,\r\n                                            openCategoryForm: true\r\n                                        })\r\n                                    }\r\n                                    } className=\"icon pointer\" src=\"/images/table-icons/edit-icon.png\" />\r\n                                    <button onClick={this.toggleStatus.bind(null, company)} className={company.status ? \"control-btn\" : \"control-btn disabled-btn\"}>Deactivate</button></td>\r\n                                {/* <td>\r\n                    <Link to={'/accountsdetails/'+supplier.id}>\r\n                            <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                    </Link>\r\n                     </td> */}\r\n                            </tr>\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <center>\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              itemsCountPerPage={renderedCategories.length}\r\n              totalItemsCount={this.props.data.categories.length}\r\n              pageRangeDisplayed={renderedCategories.length}\r\n              onChange={pageNumber => this.handlePageChange(pageNumber)}\r\n            />\r\n          </center>\r\n\r\n        </section>\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default connect((store) => {\r\n    return {\r\n        data: store.categoryReducers\r\n    }\r\n}, (dispatch) => {\r\n\r\n    return {\r\n        toggleState: (args) => {\r\n\r\n            dispatch(middleware.toggleCompanyState(args));\r\n\r\n\r\n        }\r\n    };\r\n\r\n})(Category);","// import history from '../../historyProvider';\r\nimport messages from '../../message';\r\nimport { toast  } from 'react-toastify';\r\n\r\n\r\nexport default {\r\n    /// Needs Customer ID and desired state\r\n    toggleAreaState(data) {        \r\n\r\n        return (dispatch) => {\r\n\r\n            fetch('/api/areas/toggleState', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((area) => {\r\n\r\n                    if(area._id){\r\n                        dispatch({\r\n                            type:'AREA_UPDATED',\r\n                            payload:area\r\n                        });\r\n                        toast.success(messages.area.updated);\r\n                    }else{\r\n                        toast.error(messages.area.error.cannotUpdate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    },\r\n    createArea(data) {\r\n\r\n        return (dispatch) => {\r\n\r\n\r\n            fetch('/api/areas/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((area) => {\r\n\r\n                    if(area._id){\r\n                        dispatch({\r\n                            type: data._id ? 'AREA_UPDATED' : 'AREA_CREATED',\r\n                            payload:area,\r\n                            model:'areas'\r\n                        });\r\n                        toast.success(messages.area[data._id ? 'updated' : 'created']);\r\n                    }else{\r\n                        toast.error(messages.area.error.cannotCreate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","import { connect } from \"react-redux\";\r\nimport React, { useState } from \"react\";\r\n// import './addCustomer.css';\r\nimport middleware from \"../../../store/Middleware/area\";\r\nimport utlities from \"../../../utlities\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\n\r\nconst AddArea = props => {\r\n  let [state, setState] = useState({\r\n    code: utlities.getID(\"AREA\", \"code\", props.data.areas),\r\n    ...props.area\r\n  });\r\n  console.log(state.code);\r\n\r\n  function updateState(evt) {\r\n    state[evt.target.id] = evt.target.value;\r\n    setState({ ...state });\r\n  }\r\n\r\n  function saveArea() {\r\n    state.code = props.data.code;\r\n    // validation Area\r\n  \r\n    if (state.name === undefined || state.name === \"\") {\r\n      Alert.error(\"Please Enter  Area !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n    } else {\r\n      Alert.success(\"Successfully  ! Area Created !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 4000\r\n      });\r\n\r\n      props.createArea(state);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"add-area\">\r\n      <div\r\n        class=\"modal-overlay\"\r\n        style={{ \"z-index\": 1002, display: \"block\", opacity: 0.5 }}\r\n      ></div>\r\n      <div id=\"modal1\" class=\"modal modal-small\" style={{ display: \"block\" }}>\r\n        <div class=\"modal-content\">\r\n          <div className=\"sub-head\">Add Area</div>\r\n          <Alert stack={{ limit: 1 }} />\r\n          <div className=\"modal-body def-modal-body text-center\">\r\n            <input\r\n              className=\"readonly-code\"\r\n              placeholder=\"Area Code\"\r\n              value={props.data.code}\r\n              readOnly\r\n              id=\"code\"\r\n              type=\"text\"\r\n            />\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s12\">\r\n                <input\r\n                  value={state.name}\r\n                  onChange={updateState}\r\n                  placeholder=\"Name\"\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"companyName\">Company Name</label> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            className=\"waves-effect waves-light btn-small save\"\r\n            onClick={saveArea}\r\n          >\r\n            <i class=\"material-icons\"></i>Save\r\n          </button>\r\n          <button\r\n            className=\"waves-effect waves-light btn-small cancel\"\r\n            onClick={() => {\r\n              //props.toggleMenu(false)\r\n              props.showAddArea(false);\r\n            }}\r\n          >\r\n            <i class=\"material-icons\"></i>Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchtoProps = dispatch => {\r\n  return {\r\n    createArea: data => {\r\n      dispatch(middleware.createArea(data));\r\n    }\r\n  };\r\n};\r\nexport default connect(store => {\r\n  return {\r\n    data: store.areaReducers\r\n  };\r\n}, mapDispatchtoProps)(AddArea);\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddArea from \"./addArea\";\r\nimport middleware from \"../../../store/Middleware/area\";\r\nimport Pagination from \"react-js-pagination\";\r\n\r\n// const Area = (this.propss) => {\r\nclass Area extends React.Component {\r\n  // let [addingArea, showAddArea] = useState(false);\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activePage: 1,\r\n      itemPerPage: 10\r\n    };\r\n  }\r\n\r\n  state = {\r\n    targetArea: {},\r\n    openAreaForm: false\r\n  };\r\n  handlePageChange(pageNumber) {\r\n    console.log(`active page is ${pageNumber}`);\r\n    this.setState({ activePage: pageNumber });\r\n  }\r\n\r\n  toggleStatus = company => {\r\n    company.status = !company.status;\r\n    this.props.toggleState(company);\r\n  };\r\n  render() {\r\n    // pagination Code\r\n    let indexOfLastitem = this.state.activePage * this.state.itemPerPage;\r\n    let indexOfFirstitem = indexOfLastitem - this.state.itemPerPage;\r\n    let renderedProjects = this.props.data.areas.slice(\r\n      indexOfFirstitem,\r\n      indexOfLastitem\r\n    );\r\n    return (\r\n      <section className=\"app-section\">\r\n        {this.state.openAreaForm ? (\r\n          <AddArea\r\n            area={this.state.targetArea}\r\n            showAddArea={() => {\r\n              this.setState({\r\n                openAreaForm: false\r\n              });\r\n            }}\r\n          />\r\n        ) : null}\r\n        <div className=\"label-head\">\r\n          <img src=\"/images/label-head.png\" />\r\n          <h4>Areas</h4>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div class=\"input-field col s3\">\r\n            <input\r\n              placeholder=\"Placeholder\"\r\n              id=\"first_name\"\r\n              type=\"text\"\r\n              class=\"validate\"\r\n            />\r\n            <label className=\"adjusted-label\" for=\"first_name\">\r\n              Search Areas\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <table>\r\n            <thead>\r\n              <div></div>\r\n              <tr>\r\n                <th>SR.</th>\r\n                <th>CODE</th>\r\n                <th className=\"wd-200\">NAME</th>\r\n                <th className=\"wd-200\">LAST UPDATED</th>\r\n                <th>\r\n                  <img\r\n                    onClick={() => {\r\n                      // showAddArea(true)\r\n                      this.setState({\r\n                        targetArea: {},\r\n                        openAreaForm: true\r\n                      });\r\n                    }}\r\n                    className=\"icon add-item\"\r\n                    src=\"/images/add-icon.png\"\r\n                  />\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {renderedProjects.map((area, i) => {\r\n                return (\r\n                  <tr>\r\n                    <td>\r\n                      <b>{i + 1}</b>\r\n                    </td>\r\n                    <td>{area.code}</td>\r\n                    <td className=\"wd-200\">{area.name}</td>\r\n                    <td className=\"wd-200\">\r\n                      {new Date(area.lastUpdated).toDateString()}\r\n                    </td>\r\n                    <td>\r\n                      <img\r\n                        title=\"Edit\"\r\n                        onClick={() => {\r\n                          this.setState({\r\n                            targetArea: area,\r\n                            openAreaForm: true\r\n                          });\r\n                        }}\r\n                        className=\"icon pointer\"\r\n                        src=\"/images/table-icons/edit-icon.png\"\r\n                      />\r\n                      <button\r\n                        onClick={this.toggleStatus.bind(null, area)}\r\n                        className={\r\n                          area.status\r\n                            ? \"control-btn\"\r\n                            : \"control-btn disabled-btn\"\r\n                        }\r\n                      >\r\n                        {area.status ? \"Activate\" : \"Deactivate\"}\r\n                      </button>\r\n                    </td>\r\n                    {/* <td>\r\n                    <Link to={'/accountsdetails/'+supplier.id}>\r\n                            <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                    </Link>\r\n                     </td> */}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n\r\n          {/* Paggination Code */}\r\n          <center>\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              itemsCountPerPage={renderedProjects.length}\r\n              totalItemsCount={this.props.data.areas.length}\r\n              pageRangeDisplayed={renderedProjects.length}\r\n              onChange={pageNumber => this.handlePageChange(pageNumber)}\r\n            />\r\n          </center>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  store => {\r\n    return {\r\n      data: store.areaReducers\r\n    };\r\n  },\r\n  dispatch => {\r\n    return {\r\n      toggleState: args => {\r\n        dispatch(middleware.toggleAreaState(args));\r\n      }\r\n    };\r\n  }\r\n)(Area);\r\n","import history from '../../historyProvider';\r\nimport messages from '../../message';\r\nimport { toast  } from 'react-toastify';\r\n\r\n\r\nexport default {\r\n    markAttendance(data) {\r\n\r\n        return (dispatch) => {\r\n\r\n\r\n            fetch('/api/attendance/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((attendance) => {\r\n\r\n                    if(attendance._id){\r\n                        dispatch({\r\n                            type:data._id ? 'ATTENDANCE_UPDATED' : 'ATTENDANCE_CREATED',\r\n                            payload:attendance,\r\n                            model:'categories'\r\n                        });\r\n                        toast.success(messages.attendance[data._id ? 'updated' : 'created']);\r\n                    }else{\r\n                        toast.error(messages.attendance.error.cannotCreate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","import TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport React from 'react';\r\n\r\n\r\nexport default function ComboBox(props) {\r\n    return (\r\n      <Autocomplete\r\n      onChange = {props.onChange}\r\n        id=\"combo-box-demo\"\r\n        options={props.data}\r\n        getOptionLabel={option => option[props.property]}\r\n        style={{ width: 300 }}\r\n        renderInput={params => (\r\n          <TextField {...params} label={props.placeholder} variant=\"outlined\" fullWidth />\r\n        )}\r\n      />\r\n    );\r\n  }\r\n  \r\n  // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\n  const top100Films = [\r\n    { title: 'The Shawshank Redemption', year: 1994 },\r\n    { title: 'The Godfather', year: 1972 },\r\n    { title: 'The Godfather: Part II', year: 1974 },\r\n    { title: 'The Dark Knight', year: 2008 },\r\n    { title: '12 Angry Men', year: 1957 },\r\n    { title: \"Schindler's List\", year: 1993 },\r\n    { title: 'Pulp Fiction', year: 1994 },\r\n    { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n    { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n    { title: 'Fight Club', year: 1999 },\r\n    { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n    { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n    { title: 'Forrest Gump', year: 1994 },\r\n    { title: 'Inception', year: 2010 },\r\n    { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n    { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n    { title: 'Goodfellas', year: 1990 },\r\n    { title: 'The Matrix', year: 1999 },\r\n    { title: 'Seven Samurai', year: 1954 },\r\n    { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n    { title: 'City of God', year: 2002 },\r\n    { title: 'Se7en', year: 1995 },\r\n    { title: 'The Silence of the Lambs', year: 1991 },\r\n    { title: \"It's a Wonderful Life\", year: 1946 },\r\n    { title: 'Life Is Beautiful', year: 1997 },\r\n    { title: 'The Usual Suspects', year: 1995 },\r\n    { title: 'Léon: The Professional', year: 1994 },\r\n    { title: 'Spirited Away', year: 2001 },\r\n    { title: 'Saving Private Ryan', year: 1998 },\r\n    { title: 'Once Upon a Time in the West', year: 1968 },\r\n    { title: 'American History X', year: 1998 },\r\n    { title: 'Interstellar', year: 2014 },\r\n    { title: 'Casablanca', year: 1942 },\r\n    { title: 'City Lights', year: 1931 },\r\n    { title: 'Psycho', year: 1960 },\r\n    { title: 'The Green Mile', year: 1999 },\r\n    { title: 'The Intouchables', year: 2011 },\r\n    { title: 'Modern Times', year: 1936 },\r\n    { title: 'Raiders of the Lost Ark', year: 1981 },\r\n    { title: 'Rear Window', year: 1954 },\r\n    { title: 'The Pianist', year: 2002 },\r\n    { title: 'The Departed', year: 2006 },\r\n    { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n    { title: 'Back to the Future', year: 1985 },\r\n    { title: 'Whiplash', year: 2014 },\r\n    { title: 'Gladiator', year: 2000 },\r\n    { title: 'Memento', year: 2000 },\r\n    { title: 'The Prestige', year: 2006 },\r\n    { title: 'The Lion King', year: 1994 },\r\n    { title: 'Apocalypse Now', year: 1979 },\r\n    { title: 'Alien', year: 1979 },\r\n    { title: 'Sunset Boulevard', year: 1950 },\r\n    { title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb', year: 1964 },\r\n    { title: 'The Great Dictator', year: 1940 },\r\n    { title: 'Cinema Paradiso', year: 1988 },\r\n    { title: 'The Lives of Others', year: 2006 },\r\n    { title: 'Grave of the Fireflies', year: 1988 },\r\n    { title: 'Paths of Glory', year: 1957 },\r\n    { title: 'Django Unchained', year: 2012 },\r\n    { title: 'The Shining', year: 1980 },\r\n    { title: 'WALL·E', year: 2008 },\r\n    { title: 'American Beauty', year: 1999 },\r\n    { title: 'The Dark Knight Rises', year: 2012 },\r\n    { title: 'Princess Mononoke', year: 1997 },\r\n    { title: 'Aliens', year: 1986 },\r\n    { title: 'Oldboy', year: 2003 },\r\n    { title: 'Once Upon a Time in America', year: 1984 },\r\n    { title: 'Witness for the Prosecution', year: 1957 },\r\n    { title: 'Das Boot', year: 1981 },\r\n    { title: 'Citizen Kane', year: 1941 },\r\n    { title: 'North by Northwest', year: 1959 },\r\n    { title: 'Vertigo', year: 1958 },\r\n    { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n    { title: 'Reservoir Dogs', year: 1992 },\r\n    { title: 'Braveheart', year: 1995 },\r\n    { title: 'M', year: 1931 },\r\n    { title: 'Requiem for a Dream', year: 2000 },\r\n    { title: 'Amélie', year: 2001 },\r\n    { title: 'A Clockwork Orange', year: 1971 },\r\n    { title: 'Like Stars on Earth', year: 2007 },\r\n    { title: 'Taxi Driver', year: 1976 },\r\n    { title: 'Lawrence of Arabia', year: 1962 },\r\n    { title: 'Double Indemnity', year: 1944 },\r\n    { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n    { title: 'Amadeus', year: 1984 },\r\n    { title: 'To Kill a Mockingbird', year: 1962 },\r\n    { title: 'Toy Story 3', year: 2010 },\r\n    { title: 'Logan', year: 2017 },\r\n    { title: 'Full Metal Jacket', year: 1987 },\r\n    { title: 'Dangal', year: 2016 },\r\n    { title: 'The Sting', year: 1973 },\r\n    { title: '2001: A Space Odyssey', year: 1968 },\r\n    { title: \"Singin' in the Rain\", year: 1952 },\r\n    { title: 'Toy Story', year: 1995 },\r\n    { title: 'Bicycle Thieves', year: 1948 },\r\n    { title: 'The Kid', year: 1921 },\r\n    { title: 'Inglourious Basterds', year: 2009 },\r\n    { title: 'Snatch', year: 2000 },\r\n    { title: '3 Idiots', year: 2009 },\r\n    { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n  ];","import { connect } from \"react-redux\";\r\nimport middleware from '../../store/Middleware/attendance';\r\nimport utilities from '../../utlities';\r\nimport './attendance.css';\r\nimport AutoComplete from '../autocompletion/autocompletion';\r\nimport React from 'react';\r\nimport { responsiveArray } from \"antd/lib/_util/responsiveObserve\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            <Box p={3}>{children}</Box>\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: \"simple-tab-\" + index,\r\n        'aria-controls': \"simple-tabpanel-\" + index,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nclass Attendance extends React.Component {\r\n\r\n    state = {\r\n        searched: [],\r\n        selectedUser:{},\r\n        attendance: [],\r\n        tabNo: 0,\r\n        month: (new Date()).getMonth() - 1\r\n        // attendance: this.props.data.attendanceReducer\r\n    }\r\n\r\n    handleChange = (event, newValue) => {\r\n\r\n        this.setState({\r\n            tabNo: newValue\r\n        });\r\n        // setValue(newValue);\r\n    };\r\n\r\n    fetchUserAttendance = (args) => {\r\n\r\n        fetch('/api/attendance/get', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                // date: newDate.getDate(),\r\n                user: args.selectedUser || this.state.selectedUser._id,\r\n                month: args.month || this.state.month,\r\n                // year: newDate.getFullYear()\r\n            })\r\n        }).then((resp) => resp.json()).then((resp) => {\r\n            this.setState({ searched: resp });\r\n        })\r\n\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n        // window.$(this.refs.attendanceDatePicker).datepicker({\r\n        //     onSelect: (date) => {\r\n\r\n        //         this.fetchUserAttendance({\r\n        //             date: date,\r\n        //             user: this.state.user._id\r\n        //         });\r\n\r\n        //     }\r\n        // });\r\n\r\n    }\r\n\r\n    componentWillUpdate = (newProps, oldProps) => {\r\n\r\n        console.log(20);\r\n        this.state.attendance = newProps.data.attendance;\r\n\r\n    }\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.state.users = props.data.users;\r\n\r\n\r\n        let newDate = new Date();\r\n\r\n        fetch('/api/attendance/get', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                date: newDate.getDate(),\r\n                month: newDate.getMonth(),\r\n                year: newDate.getFullYear()\r\n            })\r\n        }\r\n        ).then((resp) => resp.json()).then((attendance) => {\r\n\r\n            this.setState({\r\n                attendance: attendance\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n    markAttendance = (evt) => {\r\n\r\n        // let userID = evt.target.value;\r\n        let date = new Date();\r\n\r\n        if (this.state.attendance.find((attendance) => {\r\n            return attendance.user == evt.target.value;\r\n        })) {\r\n            return toast.warn(\"ATTENDANCE ALREADY MARKED\");\r\n        }\r\n\r\n        this.props.markAttendance({\r\n            time: date.toLocaleTimeString(),\r\n            user: evt.target.value,\r\n            date: date.getDate(),\r\n            month: date.getMonth(),\r\n            year: date.getFullYear()\r\n        })\r\n\r\n\r\n    }\r\n    updateState = () => {\r\n\r\n\r\n    }\r\n    render() {\r\n\r\n        let date = new Date();\r\n        let daysInMonth = new Date(this.state.month, date.getFullYear(), 0).getDate()\r\n\r\n        let isWorkingDay = this.props.data.store.offdays.indexOf(utilities.time.getDayName(date)) == -1\r\n\r\n        return <section className=\"app-section\">\r\n            {/* <AddSales visible={addingSales} showAddSales={showAddSales} /> */}\r\n            <div className=\"label-head\">\r\n                <img src=\"/images/label-head.png\" />\r\n                <h4>Attendance</h4>\r\n            </div>\r\n\r\n            <AppBar position=\"static\">\r\n                <Tabs value={this.state.tabNo} onChange={this.handleChange} aria-label=\"simple tabs example\">\r\n                    <Tab label=\"TODAY's ATTENDANCE\" {...a11yProps(0)} />\r\n                    <Tab label=\"DETAILED REPORT\" {...a11yProps(1)} />\r\n                    {/* <Tab label=\"Payroll\" {...a11yProps(2)} /> */}\r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            <TabPanel value={this.state.tabNo} index={0}>\r\n\r\n                {isWorkingDay ?\r\n                    <>\r\n                        <div className=\"row\">\r\n\r\n                            <div class=\"input-field col s6\">\r\n\r\n                                <AutoComplete property=\"fullName\"\r\n                                    onChange={(evt, user) => {\r\n                                        user && this.markAttendance({\r\n                                            target: {\r\n                                                id: \"user\",\r\n                                                value: user._id\r\n                                            }\r\n                                        });\r\n                                    }}\r\n                                    data={\r\n                                        this.props.data.users\r\n                                    } placeholder=\"Select Users\" />\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>SR.</th>\r\n                                    <th>NAME</th>\r\n                                    <th>ENTRANCE TIME</th>\r\n                                    <th>STATUS</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n\r\n                                {this.props.data.users.map((user, i) => {\r\n\r\n                                    let attendance = this.state.attendance.find((attendance) => {\r\n                                        return attendance.user == user._id\r\n                                    })\r\n\r\n                                    return <tr>\r\n                                        <td><b>{(i + 1)}</b></td>\r\n                                        <td>{user.fullName}</td>\r\n                                        <td>{(attendance || {}).time}</td>\r\n                                        <td>{((user) => {\r\n\r\n                                            return attendance ? <div className=\"mAttendance_P\">PRESENT</div> : <div className=\"mAttendance_A\">ABSENT</div>\r\n\r\n                                        })(user)}</td>\r\n\r\n                                    </tr>\r\n                                })}\r\n\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </>\r\n                    : <img src=\"/images/holiday-icon.png\" className=\"def-absolute-center\" />}\r\n\r\n            </TabPanel>\r\n\r\n            <TabPanel value={this.state.tabNo} index={1}>\r\n\r\n                <div className=\"row\">\r\n\r\n                    <div class=\"input-field col s3\">\r\n\r\n                        <AutoComplete property=\"fullName\"\r\n                            onChange={(evt, user) => {\r\n                                this.setState({\r\n                                    selectedUser: user\r\n                                });\r\n                                if (this.state.month) {\r\n                                    this.fetchUserAttendance({selectedUser:user});\r\n                                }\r\n                            }}\r\n                            data={\r\n                                this.props.data.users\r\n                            } placeholder=\"Search User\" />\r\n                    </div>\r\n\r\n                    <div class=\"input-field col s6\">\r\n\r\n                        <FormControl className=\"white-back\" style={{ minWidth: 250 }}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Select Month</InputLabel>\r\n                            <Select\r\n\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={this.state.month}\r\n                                onChange={(evt, data) => {\r\n                                    // debugge/r;\r\n                                    this.setState({ month: evt.target.value });\r\n\r\n                                    if (this.state.selectedUser) {\r\n                                        this.fetchUserAttendance({month: evt.target.value});\r\n                                    }\r\n\r\n                                }}\r\n                            >\r\n                                <MenuItem value={0}>Janaury</MenuItem>\r\n                                <MenuItem value={1}>February</MenuItem>\r\n                                <MenuItem value={2}>March</MenuItem>\r\n                                <MenuItem value={3}>April</MenuItem>\r\n                                <MenuItem value={3}>March</MenuItem>\r\n                                <MenuItem value={4}>May</MenuItem>\r\n                                <MenuItem value={5}>June</MenuItem>\r\n                                <MenuItem value={6}>July</MenuItem>\r\n                                <MenuItem value={7}>August</MenuItem>\r\n                                <MenuItem value={8}>September</MenuItem>\r\n                                <MenuItem value={9}>October</MenuItem>\r\n                                <MenuItem value={10}>November</MenuItem>\r\n                                <MenuItem value={11}>December</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            {/* <th>SR.</th> */}\r\n                            <th>DATE</th>\r\n                            <th>ENTRANCE TIME</th>\r\n                            <th>STATUS</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {utilities.getRange(1, daysInMonth).map((date, i) => {\r\n\r\n                            let attendance = this.state.searched.find((attendance) => {\r\n                                return attendance.date == date && attendance.user == this.state.selectedUser._id;\r\n                            })\r\n\r\n                            return <tr>\r\n                                {/* <td><b>{(i + 1)}</b></td> */}\r\n                                <td>{date}</td>\r\n                                <td>{(attendance || {}).time}</td>\r\n                                <td>{(() => {\r\n\r\n                                    return attendance ? <div className=\"mAttendance_P\">PRESENT</div> : <div className=\"mAttendance_A\">ABSENT</div>\r\n\r\n                                })()}</td>\r\n                            </tr>\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n            </TabPanel>\r\n\r\n        </section>\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect((store) => {\r\n    return {\r\n        data: {\r\n            ...store.storeReducer,\r\n            ...store.userReducer,\r\n            ...store.attendanceReducer\r\n        }\r\n    }\r\n}, (dispatch) => {\r\n\r\n    return {\r\n        markAttendance: (data) => {\r\n\r\n            dispatch(middleware.markAttendance(data));\r\n\r\n        }\r\n    }\r\n\r\n})(Attendance);","import messages from \"../../message\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport default {\r\n  updateStore(data) {\r\n    return dispatch => {\r\n      fetch(\"/api/store/update\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n        .then(resp => {\r\n          return resp.json();\r\n        })\r\n        .then(updatedStore => {\r\n          console.log(\"udateSupllier\", updatedStore);\r\n          // if (data._id) {\r\n          dispatch({\r\n            type: data._id ? \"NEW_STORE_CREATED\" : \"STORE_UPDATED\",\r\n            payload: updatedStore\r\n          });\r\n          toast.success(messages.store[data._id ? \"updated\" : \"created\"]);\r\n          // } else {\r\n          //     toast.error(messages.store.error.cannotCreate);\r\n          // }\r\n        });\r\n    };\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport AutoComplete from \"../../autocompletion/autocompletion\";\r\n\r\nimport middleware from \"./../../../store/Middleware/store\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\n\r\n\r\nclass StoreSettings extends React.Component {\r\n  state = {\r\n    offdays: [],\r\n    ...this.props.data.store,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    let that = this;\r\n\r\n    this.offdays = this.props.data.store.offdays;\r\n\r\n    window.$(this.refs.offDays).chips({\r\n      data: (this.props.data.store.offdays || []).map(item => {\r\n        return { tag: item };\r\n      }),\r\n      onChipAdd(chip) {\r\n        that.offdays = this.chipsData.map(chip => {\r\n          return chip.tag;\r\n        });\r\n\r\n        // window.$(that.refs.chipsContainer).append(chip.find('.chip'));\r\n      },\r\n      onChipDelete(chip) {\r\n        that.offdays = this.chipsData.map(chip => {\r\n          return chip.tag;\r\n        });\r\n      },\r\n      autocompleteOptions: {\r\n        chipsData: this.props.data.store.offdays,\r\n        // data: data,\r\n        data: {\r\n          Sunday: null,\r\n          Monday: null,\r\n          Tuesday: null,\r\n          Wednesday: null,\r\n          Thursday: null,\r\n          Friday: null,\r\n          Saturday: null\r\n        },\r\n        limit: Infinity,\r\n        minLength: 1\r\n      }\r\n    });\r\n\r\n    // window.$('.input-field').find('.chip').each((i, item) => {\r\n    //     window.$(this.refs.chipsContainer).append(item);\r\n    // });\r\n  };\r\n\r\n  updateState = evt => {\r\n    evt.target\r\n      ? (this.state[evt.target.id] = evt.target.value)\r\n      : (this.state[evt.name] = evt.data);\r\n    this.setState({ ...this.state });\r\n  };\r\n\r\n  componentDidUpdate = (oldprops, newprops) => {\r\n    \r\n    this.state._id = this.props.data.store._id;\r\n  };\r\n\r\n  saveStore = () => {\r\n    this.state.offdays = this.offdays;\r\n    \r\n    console.log(this.state.name)\r\n    let pattern = /^[a-zA-Z0-9\\-_]+(\\.[a-zA-Z0-9\\-_]+)*@[a-z0-9]+(\\-[a-z0-9]+)*(\\.[a-z0-9]+(\\-[a-z0-9]+)*)*\\.[a-z]{2,4}$/;\r\n\r\n   if((this.state.name===undefined)||(this.state.name===\"\"))\r\n   {\r\n    Alert.error(\"Please Enter  Name !\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 3000,\r\n    });\r\n\r\n   }\r\n   else if((this.state.phone===undefined)||(this.state.phone===\"\"))\r\n   {\r\n\r\n    Alert.error(\"Please Enter  phone Number !\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 3000,\r\n    });\r\n   } else if((this.state.email===undefined)||(this.state.email===\"\"))\r\n   {\r\n\r\n    Alert.error(\"Please Enter  Email Carefully!\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 3000,\r\n    });\r\n   } \r\n\r\n   else if (pattern.test(this.state.email) === false) {\r\n    Alert.error(\"Please Enter Email  Carefully !\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 3000,\r\n    });\r\n  }\r\n   else if((this.state.address===undefined)||(this.state.address===\"\"))\r\n   {\r\n    Alert.error(\"Please Enter  Address !\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 3000,\r\n    });\r\n   }\r\n   else if((this.state.password===undefined)||(this.state.password===\"\"))\r\n   {\r\n    Alert.error(\"Please Enter  Password !\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 3000,\r\n    });\r\n   }\r\n    else if((this.state.startTiming===null)||(this.state.startTiming===\"\"))\r\n   {\r\n\r\n    Alert.error(\"Please Enter  Start Timing !\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 3000,\r\n    });\r\n   }\r\n   else if((this.state.endingTiming===undefined)||(this.state.endingTiming===\"\"))\r\n   {\r\n    Alert.error(\"Change  Ending Timing!\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 3000,\r\n    });\r\n   }\r\n   else if(this.state.offdays.length===0)\r\n   {\r\n\r\n    Alert.error(\"Please Add Off Days!\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 3000,\r\n    });\r\n   }\r\n   \r\n   else{\r\n        console.log(this.state)\r\n\r\n    this.props.saveSettings(this.state);\r\n    Alert.success(\" Successfully ! Offer Created\", {\r\n      position: \"top-right\",\r\n      effect: \"slide\",\r\n      timeout: 4000,\r\n    });\r\n   }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-section\">\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <div className=\"label-head\">\r\n            <img src=\"/images/label-head.png\" />\r\n            <h4>Store Settings</h4>\r\n          </div>\r\n          <Alert stack={{ limit: 1 }} />\r\n\r\n          <div style={{ marginTop: \"55px\" }}>\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s4\">\r\n                <input\r\n                  value={this.state.name}\r\n                  onChange={this.updateState}\r\n                  placeholder=\"Name\"\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierPhone\">Phone</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s4\">\r\n                <input\r\n                  value={this.state.phone}\r\n                  onChange={this.updateState}\r\n                  placeholder=\"Phone\"\r\n                  id=\"phone\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierPhone\">Phone</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s4\">\r\n                <input\r\n                  value={this.state.email}\r\n                  onChange={this.updateState}\r\n                  placeholder=\"Email\"\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierPhone\">Phone</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s4\">\r\n                <input\r\n                  value={this.state.password}\r\n                  onChange={this.updateState}\r\n                  placeholder=\"Password\"\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierPhone\">Phone</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s4\">\r\n                <textarea\r\n                  value={this.state.address}\r\n                  onChange={this.updateState}\r\n                  placeholder=\"Address\"\r\n                  id=\"address\"\r\n                  class=\"white-back materialize-textarea\"\r\n                ></textarea>\r\n                {/* <label for=\"supplierAddress\">Street Address</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s4 white-back\">\r\n                <KeyboardTimePicker\r\n                  margin=\"normal\"\r\n                  id=\"startTiming\"\r\n                  label=\"START TIMING\"\r\n                  value={this.state.startTiming}\r\n                  onChange={value => {\r\n                    this.updateState({ name: \"startTiming\", data: value });\r\n                  }}\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change time\"\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s4\">\r\n                <div class=\"chips\" ref=\"offDays\">\r\n                  <input placeholder=\"Add Offday\" class=\"custom-class\" />\r\n                </div>\r\n\r\n                <div className=\"chipsContainer\" ref=\"chipsContainer\"></div>\r\n              </div>\r\n\r\n              <div class=\"input-field col s4 white-back\">\r\n                <KeyboardTimePicker\r\n                  margin=\"normal\"\r\n                  id=\"endingTiming\"\r\n                  label=\"END TIMING\"\r\n                  value={this.state.endingTiming}\r\n                  onChange={value => {\r\n                    this.updateState({ name: \"endingTiming\", data: value });\r\n                  }}\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change time\"\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* </div> */}\r\n\r\n          <div className=\"app-footer\">\r\n            <button\r\n              className=\"waves-effect waves-light btn-small save\"\r\n              onClick={this.saveStore}\r\n            >\r\n              <i class=\"material-icons\"></i>Save\r\n            </button>\r\n          </div>\r\n        </MuiPickersUtilsProvider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchtoProps = dispatch => {\r\n  return {\r\n    saveSettings: data => {\r\n      dispatch(middleware.updateStore(data));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(store => {\r\n  return {\r\n    data: {\r\n      ...store.storeReducer\r\n    }\r\n  };\r\n}, mapDispatchtoProps)(StoreSettings);\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import AddSales from './addSales';\r\n\r\nconst Sales = props => {\r\n  let getEditData = (data) => {\r\n  localStorage.setItem('_id',data._id)\r\n\r\n  };\r\n\r\n  return (\r\n    <section className=\"app-section\">\r\n      {/* <AddSales visible={addingSales} showAddSales={showAddSales} /> */}\r\n      <div className=\"label-head\">\r\n        <img src=\"/images/label-head.png\" />\r\n        <h4>Sale Orders</h4>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div class=\"input-field col s3\">\r\n          <input\r\n            placeholder=\"Placeholder\"\r\n            id=\"first_name\"\r\n            type=\"text\"\r\n            class=\"validate\"\r\n          />\r\n          <label className=\"adjusted-label\" for=\"first_name\">\r\n            Search Sales\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>SR.</th>\r\n              <th>BIL</th>\r\n              <th className=\"wd-200\">CUSTOMER</th>\r\n              <th>TOTAL</th>\r\n              <th>DISCOUNT</th>\r\n              <th>NET BILL</th>\r\n              <th>SALES DATE</th>\r\n              <th>DELIVERY</th>\r\n              <th>TIME</th>\r\n              <th>\r\n                {\r\n                  <Link to=\"/newsale\">\r\n                    <img\r\n                      // onClick={() => {\r\n                      //   props.history.push(\"/newsale\");\r\n                      // }}\r\n                      className=\"icon add-item\"\r\n                      src=\"/images/add-icon.png\"\r\n                    />\r\n                  </Link>\r\n                }\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {props.data.sales.map((sale, i) => {\r\n              return (\r\n                <tr key={i}>\r\n                  <td>\r\n                    <b>{i + 1}</b>\r\n                  </td>\r\n                  <td>{sale.billNo}</td>\r\n                  <td className=\"wd-200\">\r\n                    {sale.customer.firstName + \" \" + sale.customer.lastName}\r\n                  </td>\r\n                  <td>{sale.total}</td>\r\n                  <td>{sale.discount}</td>\r\n                  <td>{sale.total - sale.discount}</td>\r\n                  <td>{new Date(sale.salesDate).toDateString()}</td>\r\n                  <td>{new Date(sale.deliveryDate).toDateString()}</td>\r\n                  <td>{sale.time}</td>\r\n                  <td>\r\n                    <Link\r\n                      to={\"/newsale/\" + sale._id}\r\n                      onClick={() => getEditData(sale)}\r\n                    >\r\n                      <img\r\n                        title=\"Edit\"\r\n                        className=\"icon pointer\"\r\n                        src=\"/images/table-icons/edit-icon.png\"\r\n                      />\r\n                    </Link>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default connect(store => {\r\n  return {\r\n    data: store.salesReducer\r\n  };\r\n})(Sales);\r\n","import React, {useRef, useState} from 'react';  \r\n// import './addPayment.css'\r\n\r\nconst DeletePrompt = (props) => {\r\n\r\n\r\n    let [payment, setPayment] = useState(0);    \r\n\r\n    return <div className=\"delete-payment\">\r\n        <div class=\"modal-overlay\" style={{'z-index': 1002, 'display':props.visible ? 'block' :'none', opacity: 0.5}}></div>\r\n        <div id=\"modal1\" class=\"modal\" style={{'display':props.visible ? 'block' :'none'}}>\r\n        <div class=\"modal-content\">\r\n            <div className=\"sub-head\">{props.title}</div>\r\n           <div className=\"text-center\"> \r\n           {props.description}\r\n           </div>\r\n        </div>\r\n        <div class=\"modal-footer\">            \r\n            <button className=\"waves-effect waves-light btn-small save\" onClick={()=>{\r\n                props.onYes(payment);\r\n            }}><i class=\"material-icons\"></i>Confirm</button>\r\n            <button className=\"waves-effect waves-light btn-small cancel\" onClick={()=>{\r\n                props.onCancel(false) \r\n            }}><i class=\"material-icons\"></i>Cancel</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n}\r\n\r\nexport default DeletePrompt;","import React, { useRef, useState, useEffect } from 'react';\r\nimport utlities from '../../utlities';\r\nimport './addPayment.css'\r\n\r\nconst PaymentDetails = (props) => {\r\n\r\n\r\n    let [payment, setPayment] = useState({ amount: 0 });\r\n\r\n    useEffect(() => {\r\n        // setPayment({});\r\n    })\r\n\r\n    return <div className=\"add-payment\">\r\n        <div class=\"modal-overlay\" style={{ 'z-index': 1002, 'display': props.visible ? 'block' : 'none', opacity: 0.5 }}></div>\r\n        <div id=\"modal1\" class=\"modal\" style={{ 'display': props.visible ? 'block' : 'none' }}>\r\n            <div class=\"modal-content\">\r\n                <div className=\"sub-head\">Payment Details {props.customer ? \" for \" + props.customer : \"\"}</div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <td>Sr.</td>\r\n                            <td>Date</td>\r\n                            <td>Cash/Cheque</td>\r\n                            <td>Amount</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            props.payments.map((payment, index) => {\r\n\r\n                                return <tr>\r\n                                    <td>{(index + 1)}</td>\r\n                                    <td>{payment.date}</td>\r\n                                    <td>{payment.type}</td>\r\n                                    <td>{payment.amount}</td>\r\n                                </tr>\r\n\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col s8\">\r\n\r\n                        <div class=\"input-field col s12\">\r\n\r\n                            <div className=\"row\">\r\n\r\n                                <div className=\"col s10\">\r\n\r\n                                    <input value={payment.amount} placeholder=\"Amount\" onChange={(evt) => {\r\n                                        setPayment({ type: payment.type || \"\", amount: evt.target.value });\r\n\r\n                                    }} id=\"deliveryDate\" type=\"number\" id=\"paymentAmtBox\" />\r\n\r\n                                </div>\r\n\r\n                                <div className=\"col s2\">\r\n\r\n\r\n                                    <select value={payment.type} className=\"inline wd-70\" onChange={(evt) => {\r\n                                        setPayment({ type: evt.target.value, amount: payment.amount || 0 });\r\n                                    }} id=\"paymentType\">\r\n                                        <option key=\"Type\" value=\"Type\">Type</option>\r\n                                        <option key=\"Cash\" value=\"Cash\">Cash</option>\r\n                                        <option key=\"Cheque\" value=\"Cheque\">Cheque</option>\r\n                                    </select>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"col s4\">\r\n                        <button className={\"waves-effect waves-light btn-small save\" + ((!payment.type || payment.type == \"Type\") ? \" disabled\" : \"\")} onClick={() => {\r\n                            // payment.paymentID = utlities.getID();\r\n                            payment.date = new Date().toDateString();\r\n                            setPayment({ amount: 0, type:\"Type\" });\r\n                            props.onPaymentAdded(payment);\r\n                        }}><i class=\"material-icons\"></i>Add Payment</button>\r\n                        <button className=\"waves-effect waves-light btn-small cancel\" onClick={() => {\r\n                            props.onCancel(false)\r\n                        }}><i class=\"material-icons\"></i>Cancel</button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div >\r\n\r\n}\r\n\r\nexport default PaymentDetails;","import history from \"../../historyProvider\";\r\nimport messages from \"../../message\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport default {\r\n  /// Needs Customer ID and desired state\r\n  deleteSale(data) {\r\n    return dispatch => {\r\n      fetch(\"/api/sales/toggleState\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n        .then(resp => {\r\n          return resp.json();\r\n        })\r\n        .then(company => {\r\n          if (company._id) {\r\n            dispatch({\r\n              type: \"SALE_ORDER_DELETED\"\r\n            });\r\n            toast.success(messages.area.created);\r\n          } else {\r\n            toast.error(messages.area.error.cannotCreate);\r\n          }\r\n        });\r\n    };\r\n  },\r\n  createSale(data) {\r\n    return dispatch => {\r\n      fetch(\"/api/sales/create\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n        .then(resp => {\r\n          return resp.json();\r\n        })\r\n        .then(sale => {\r\n          // console.log(sale);\r\n          if (sale._id) {\r\n            dispatch({\r\n              type: \"SALE_CREATED\",\r\n              payload: sale\r\n            });\r\n            toast.success(messages.sales.saved);\r\n          } else {\r\n            toast.error(messages.sales.error.cannotCreate);\r\n          }\r\n        });\r\n    };\r\n  }\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DeletePrompt from \"../deleteItem/deleteItem\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"./newsale.css\";\r\nimport PaymentDetails from \"../Payment/paymentDetails\";\r\nimport middleware from \"./../../store/Middleware/sales\";\r\nimport AutoComplete from \"../autocompletion/autocompletion\";\r\n\r\n\r\n\r\nimport { FormHelperText } from '@material-ui/core';\r\n// import AddSales from './addSales';\r\n\r\nclass Sales extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      deliveryDate: new Date(),\r\n      salesDate: null,\r\n      deleteDialog: false,\r\n      total: 0,\r\n      discount: 0,\r\n      customer: { id: 0 },\r\n      payments: [],\r\n      area: {},\r\n      bills: [this.putNewOrder()],\r\n      notes: \"\"\r\n    };\r\n\r\n    this.defaultAction = this.deleteItem;\r\n  }\r\n  onProductUpdate = (bill, evt, targetProduct) => {\r\n    // let targetProduct = this.props.data.products.find((product) => {\r\n    //     return product._id == evt.target.value\r\n    // });\r\n\r\n    bill.product = targetProduct;\r\n    bill.uPrice = targetProduct.customerPrice;\r\n    bill.shopkeeperPrice = targetProduct.shopkeeperPrice;\r\n\r\n    this.setState(this.state);\r\n  };\r\n  putNewOrder = () => {\r\n    return {\r\n      product: {\r\n        customerPrice: 0,\r\n        shopkeeperPrice: 0,\r\n        productQty: 0,\r\n        cartonSize: 0,\r\n        productQty: 0\r\n      },\r\n      crtn: 0,\r\n      units: 0,\r\n      fUnit: 0,\r\n      // uPrice: 0,\r\n      // shopkeerPrice: 0,\r\n      total: 0,\r\n      discountPerc: 0,\r\n      unitDisc: 0,\r\n      discountedAmt: 0,\r\n      net: 0,\r\n      deleted: false,\r\n      inProcess: true\r\n      // total: 0\r\n    };\r\n  };\r\n\r\n  // let [state, setState] = useState({area:-1});\r\n\r\n  updateState = evt => {\r\n    console.log(evt);\r\n    this.state[evt.target.id] = evt.target.value;\r\n    this.setState(this.state);\r\n  };\r\n\r\n  updateBill = (bill, name, value) => {\r\n    bill[name] = value;\r\n    // let data = JSON.parse(JSON.stringify(this.state));\r\n    this.setState(this.state);\r\n  };\r\n\r\n  deleteItem = () => {\r\n    if (this.state.selectedBill) {\r\n      this.state.selectedBill.deleted = true;\r\n      this.state.deleteDialog = false;\r\n      this.setState(this.state);\r\n    }\r\n  };\r\n\r\n  restoreItem = () => {\r\n    if (this.state.selectedBill) {\r\n      this.state.selectedBill.deleted = false;\r\n      this.state.deleteDialog = false;\r\n      this.setState(this.state);\r\n    }\r\n  };\r\n\r\n  onPaymentAdded = payment => {\r\n    if (payment) {\r\n      this.state.payments.push(payment);\r\n      this.setState(this.state);\r\n    }\r\n  };\r\n  componentWillUnmount() {\r\n    localStorage.clear();\r\n  }\r\n  componentDidMount = () => {\r\n    // let newState = [];\r\n    let id = localStorage.getItem(\"_id\");\r\n    console.log(this.props.match);\r\n    this.props.data.sales.forEach(sale => {\r\n      // console.log(sale);\r\n      if (sale._id === id) {\r\n        console.log(sale);\r\n        this.setState({\r\n          deliveryDate: sale.deliveryDate,\r\n          salesDate: sale.salesDate,\r\n          total: sale.total,\r\n          discount: sale.discount,\r\n          customer: sale.customer,\r\n          area: sale.area,\r\n          notes: sale.notes\r\n          //   bills: sale.bills\r\n        });\r\n      }\r\n    });\r\n    // console.log(newState);\r\n    window.$(this.refs.salesDatePicker).datepicker({\r\n      onSelect: date => {\r\n        this.setState({ salesDate: date });\r\n\r\n        window.$(this.refs.deliveryDatePicker).datepicker({\r\n          minDate: date\r\n        });\r\n      }\r\n    });\r\n\r\n    window.$(this.refs.deliveryDatePicker).datepicker({});\r\n  };\r\n  saveSale = () => {\r\n    this.state.billNo = this.props.data.saleCode;\r\n    this.props.saveSale(this.state);\r\n    // console.log(this.putNewOrder())\r\n  };\r\n  render() {\r\n    let activeBills = this.state.bills.filter(bill => {\r\n      return !bill.deleted;\r\n    });\r\n\r\n    let totalBill = 0;\r\n    let totalDiscount = 0;\r\n    let totalUnitDiscount = 0;\r\n\r\n    if (activeBills.length) {\r\n      activeBills.forEach(bill => {\r\n        bill.total = Math.round(\r\n          bill.crtn *\r\n            (bill.product.cartonSize || 1) *\r\n            (bill.product.shopkeeperPrice || 0) +\r\n            (bill.units || 0) * (bill.product.shopkeeperPrice || 0)\r\n        );\r\n        bill.discountedAmt = Math.round(bill.total * (bill.discountPerc / 100));\r\n        totalBill += +bill.total;\r\n        totalDiscount += +bill.discountedAmt;\r\n        totalUnitDiscount += +bill.unitDisc;\r\n      });\r\n    } else {\r\n      totalBill = +activeBills[0].total;\r\n      totalDiscount = +activeBills[0].discountedAmt;\r\n      totalUnitDiscount = +activeBills[0].unitDisc;\r\n    }\r\n\r\n    this.state.total = totalBill;\r\n    this.state.discount = totalDiscount + totalUnitDiscount;\r\n\r\n    // let totalBill = activeBills.length > 1 ?  : activeBills[0].total;\r\n\r\n    let totalPayment = 0;\r\n\r\n    this.state.payments.forEach(payment => {\r\n      totalPayment += +payment.amount;\r\n    });\r\n\r\n    return (\r\n      <section className=\"app-section new-sale\">\r\n        <PaymentDetails\r\n          onCancel={() => {\r\n            this.setState({\r\n              addingPayment: false\r\n            });\r\n          }}\r\n          payments={this.state.payments}\r\n          customer={this.state.customer.name}\r\n          visible={this.state.addingPayment}\r\n          onPaymentAdded={this.onPaymentAdded}\r\n        />\r\n\r\n        <DeletePrompt\r\n          onYes={() => {\r\n            this.defaultAction();\r\n          }}\r\n          onCancel={() => {\r\n            this.setState({\r\n              deleteDialog: false\r\n            });\r\n          }}\r\n          title={this.state.title}\r\n          description={this.state.description}\r\n          visible={this.state.deleteDialog}\r\n        />\r\n        {/* <AddSales visible={addingSales} showAddSales={showAddSales} /> */}\r\n        <div className=\"label-head\">\r\n          <img src=\"/images/label-head.png\" />\r\n          <h4>New Sale</h4>\r\n          <h5>\r\n            BILL#: <span>{this.props.data.saleCode}</span>\r\n          </h5>\r\n          <div className=\"billSummary\">\r\n            <div class=\"row\">\r\n              <span className=\"bill-summary col s6\">Total Billed Amount</span>{\" \"}\r\n              <span className=\"total-sum col s4\">{Math.round(totalBill)}</span>{\" \"}\r\n            </div>\r\n            <div class=\"row\">\r\n              <span className=\"bill-summary col s6\">Total Item Discount</span>\r\n              <span className=\"total-sum col s4\">\r\n                {Math.round(totalDiscount)}\r\n              </span>{\" \"}\r\n            </div>\r\n            <div class=\"row\">\r\n              <span className=\"bill-summary col s6\">Total Unit Amount</span>\r\n              <span className=\"total-sum col s4\">\r\n                {Math.round(totalUnitDiscount)}\r\n              </span>{\" \"}\r\n            </div>\r\n            <div class=\"row\">\r\n              <span className=\"bill-summary col s6\">Bill Discount</span>\r\n              <span className=\"total-sum col s4\">\r\n                {Math.round(totalDiscount + totalUnitDiscount)}\r\n              </span>{\" \"}\r\n            </div>\r\n            <div class=\"row gray-back\">\r\n              <span className=\"bill-summary col s6\">Total Payable</span>\r\n              <span className=\"total-sum col s4\">\r\n                {Math.round(totalBill)}\r\n              </span>{\" \"}\r\n            </div>\r\n            <div class=\"row gray-back disabled\">\r\n              <span className=\"bill-summary col s6\">Paid</span>\r\n              <span className=\"total-sum col s4\">\r\n                {Math.round(totalPayment)}\r\n              </span>{\" \"}\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right right-panel\">\r\n            <img\r\n              onClick={() => {\r\n                this.setState({ addingPayment: true });\r\n              }}\r\n              title=\"Add Payment\"\r\n              className=\"icon panel-icon pointer\"\r\n              src=\"/images/panel-icons/payment.png\"\r\n            />\r\n            <img\r\n              onClick={() => {\r\n                this.saveSale();\r\n              }}\r\n              title=\"Save And Continue\"\r\n              className=\"icon panel-icon pointer\"\r\n              src=\"/images/panel-icons/add-icon.png\"\r\n            />\r\n            <img\r\n              title=\"Save\"\r\n              className=\"icon panel-icon pointer\"\r\n              src=\"/images/panel-icons/save.png\"\r\n            />\r\n            <img\r\n              title=\"Print\"\r\n              className=\"icon panel-icon pointer\"\r\n              src=\"/images/panel-icons/print.png\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div class=\"input-field col s3\">\r\n            <AutoComplete\r\n              property=\"name\"\r\n              defaultValue='thsisfd'\r\n              // defaultValue={this.props.data.customers[0]}\r\n              onChange={(evt, area) => {\r\n                area &&\r\n                  this.updateState({\r\n                    target: {\r\n                      id: \"area\",\r\n                      value: area._id\r\n                    }\r\n                  });\r\n              }}\r\n              data={this.props.data.areas}\r\n              placeholder=\"Select Area\"\r\n            />\r\n\r\n            {/* <select onChange={this.updateState} id=\"area\" className=\"inline\">\r\n                        {\r\n                            ([{ name: \"Area\" }]).concat(this.props.data.areas).map((area) => {\r\n                                return <option value={area._id}>{area.name}</option>\r\n                            })\r\n                        }\r\n                    </select> */}\r\n            {/* <label className=\"adjusted-label\" for=\"first_name\">Search Sales</label> */}\r\n          </div>\r\n\r\n          <div class=\"input-field col s3\">\r\n            <AutoComplete\r\n              property=\"firstName\"\r\n              defaultValue={this.props.data.customers[0]}\r\n              onChange={(evt, customer) => {\r\n                customer &&\r\n                  this.updateState({\r\n                    target: {\r\n                      id: \"customer\",\r\n                      value: customer._id\r\n                    }\r\n                  });\r\n              }}\r\n              data={this.props.data.customers.filter(customer => {\r\n                return customer.area._id == this.state.area;\r\n              })}\r\n              placeholder=\"Select Customer\"\r\n            />\r\n\r\n            {/* <select onChange={this.updateState} id=\"customer\" className=\"inline\">\r\n                        {\r\n                            ([{ firstName: \"Customer\", lastName: \"\" }]).concat(this.props.data.customers.filter((customer) => {\r\n                                return customer.area._id == this.state.area;\r\n                            })).map((customer) => {\r\n                                return <option value={customer._id}>{customer.firstName + ' ' + customer.lastName}</option>\r\n                            })\r\n                        }\r\n                    </select> */}\r\n            {/* <label className=\"adjusted-label\" for=\"first_name\">Search Sales</label> */}\r\n          </div>\r\n\r\n          <div class=\"input-field col s3\">\r\n            <input\r\n              onChange={this.updateState}\r\n              placeholder=\"Sales Date\"\r\n              className=\"datepicker\"\r\n              id=\"salesDate\"\r\n              ref=\"salesDatePicker\"\r\n              type=\"text\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div class=\"input-field col s3\">\r\n            <input\r\n              className={!this.state.salesDate ? \"disabled\" : \"\"}\r\n              onChange={this.updateState}\r\n              placeholder=\"Delievry Date\"\r\n              id=\"deliveryDate\"\r\n              type=\"text\"\r\n              id=\"deliveryDate\"\r\n              ref=\"deliveryDatePicker\"\r\n            />\r\n          </div>\r\n\r\n          <div class=\"input-field col s3\">\r\n            <textarea\r\n              value={this.state.notes}\r\n              onChange={this.updateState}\r\n              placeholder=\"Notes\"\r\n              id=\"notes\"\r\n              class=\"white materialize-textarea\"\r\n            ></textarea>\r\n            {/* <label for=\"supplierAddress\">Street Address</label> */}\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <table className=\"sales-table\">\r\n            <thead className=\"sales-thead\">\r\n              <tr>\r\n                <th className=\"auto-width\">SR.</th>\r\n                <th className=\"wd-50\">STOCK</th>\r\n                <th style={{ width: \"255px\" }}>PRODUCT</th>\r\n                <th className=\"wd-70\">CRTN</th>\r\n                <th className=\"wd-70\">UNITS</th>\r\n                <th className=\"wd-70\">F.UNIT</th>\r\n                <th className=\"wd-70\">UNIT PRICE</th>\r\n                <th className=\"wd-70\">SHOPKEEPER PRICE</th>\r\n                <th className=\"wd-70\">TOTAL</th>\r\n                <th>% DISCOUNT</th>\r\n                <th>Rs.</th>\r\n                <th>Unit Disc.</th>\r\n                <th>Net</th>\r\n                {/* <th>\r\n                  { <img onClick={() => {\r\n                                this.props.history.push('/newsale');\r\n                            }} className=\"icon add-item\" src=\"/images/add-icon.png\" />}\r\n              </th> */}\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"auto-td sales-tbody\">\r\n              {/* product:'',\r\n                        crtn:0,\r\n                        units:0,\r\n                        fUnit:0,\r\n                        uPrice:0,\r\n                        shopkeerPrice:0,\r\n                        total:0,\r\n                        discountPerc:0,\r\n                        unitDisc:0 */}\r\n              {this.state.bills.map((bill, i) => {\r\n                //qty = 50\r\n                //carton size = 12\r\n                //target 4:2\r\n                // TBC, if crtns entered avaiable r greater than qty, reset the unit DIscoutn field\r\n\r\n                let cartons = (\r\n                  bill.product.productQty / bill.product.cartonSize\r\n                )\r\n                  .toString()\r\n                  .split(\".\")[0];\r\n\r\n                cartons.toString() != \"NaN\"\r\n                  ? (cartons =\r\n                      cartons +\r\n                      \":\" +\r\n                      (bill.product.productQty -\r\n                        bill.product.cartonSize * cartons))\r\n                  : (cartons = \":\");\r\n\r\n                return (\r\n                  <tr className={bill.deleted ? \"deleted-row\" : \"\"}>\r\n                    <td>\r\n                      <b>{i + 1}</b>\r\n                    </td>\r\n                    <td\r\n                      className={\r\n                        \"wd-50 f-n\" +\r\n                        (cartons.toString() == \":\" ? \" unvisible\" : \"\")\r\n                      }\r\n                    >\r\n                      {\" \"}\r\n                      <span className=\"stock-indicator\">{cartons}</span>\r\n                    </td>\r\n\r\n                    <td>\r\n                      <AutoComplete\r\n                        property=\"name\"\r\n                        onChange={(evt, product) => {\r\n                          product && this.onProductUpdate(bill, evt, product);\r\n                        }}\r\n                        data={this.props.data.products.filter(product => {\r\n                          return (\r\n                            this.state.bills.filter(iBill => {\r\n                              return (\r\n                                bill != iBill && iBill.product.id == product.id\r\n                              );\r\n                            }).length == 0\r\n                          );\r\n                        })}\r\n                        placeholder=\"Select Product\"\r\n                      />\r\n                    </td>\r\n\r\n                    {/* <td className=\"wd-200\">\r\n                                    <select onChange={(evt) => {\r\n\r\n                                        this.onProductUpdate(bill, evt, i);\r\n\r\n                                    }} id=\"saleProductSelector\" className=\"inline\">\r\n                                        {\r\n                                            (this.props.data.products.filter((product) => {\r\n                                                return this.state.bills.filter((iBill) => { return bill != iBill && iBill.product.id == product.id }).length == 0\r\n                                            }).map((product) => {\r\n                                                return <option value={product._id}>{product.name}</option>\r\n                                            })\r\n                                        }\r\n                                    </select>\r\n                                </td> */}\r\n                    <td>\r\n                      {\r\n                        <input\r\n                          placeholder=\"crtn\"\r\n                          onChange={evt => {\r\n                            //Check if cartons are greater than the avaiable in stock\r\n                            let cartons = +(\r\n                              bill.product.productQty / bill.product.cartonSize\r\n                            )\r\n                              .toString()\r\n                              .split(\".\")[0];\r\n\r\n                            if (+evt.target.value > cartons) {\r\n                              bill.unitDisc = 0;\r\n                              this.updateBill(bill, evt.target.id, cartons);\r\n                            } else {\r\n                              this.updateBill(\r\n                                bill,\r\n                                evt.target.id,\r\n                                evt.target.value\r\n                              );\r\n                            }\r\n\r\n                            //this.updateBill(bill, evt.target.id, evt.target.value)\r\n                          }}\r\n                          className=\"input-60\"\r\n                          type=\"number\"\r\n                          id=\"crtn\"\r\n                          value={bill.crtn}\r\n                        />\r\n                      }\r\n                    </td>\r\n\r\n                    <td>\r\n                      {\r\n                        <input\r\n                          placeholder=\"Units\"\r\n                          onChange={evt => {\r\n                            let cartons = +(\r\n                              bill.product.productQty / bill.product.cartonSize\r\n                            )\r\n                              .toString()\r\n                              .split(\".\")[0];\r\n\r\n                            let totalQty = bill.product.productQty;\r\n\r\n                            let stockDemanded =\r\n                              bill.crtn * bill.product.cartonSize +\r\n                              +evt.target.value;\r\n\r\n                            if (stockDemanded > bill.product.productQty) {\r\n                              let unitsAvailable =\r\n                                bill.product.productQty - stockDemanded;\r\n\r\n                              if (unitsAvailable > 0) {\r\n                                this.updateBill(\r\n                                  bill,\r\n                                  evt.target.id,\r\n                                  evt.target.value\r\n                                );\r\n                              } else {\r\n                                let issueAvaiableStock =\r\n                                  evt.target.value -\r\n                                  (stockDemanded - bill.product.productQty);\r\n                                bill.unitDisc = 0;\r\n                                this.updateBill(\r\n                                  bill,\r\n                                  evt.target.id,\r\n                                  issueAvaiableStock\r\n                                );\r\n                              }\r\n                            } else {\r\n                              this.updateBill(\r\n                                bill,\r\n                                evt.target.id,\r\n                                evt.target.value\r\n                              );\r\n                            }\r\n                          }}\r\n                          className=\"input-60\"\r\n                          type=\"number\"\r\n                          id=\"units\"\r\n                          value={bill.units}\r\n                        />\r\n                      }\r\n                    </td>\r\n\r\n                    <td>\r\n                      {\r\n                        <input\r\n                          placeholder=\"Funits\"\r\n                          className=\"input-60\"\r\n                          type=\"number\"\r\n                          value={bill.fUnit}\r\n                        />\r\n                      }\r\n                    </td>\r\n\r\n                    {/* Will be updated on selecting product */}\r\n                    <td>\r\n                      <input\r\n                        placeholder=\"UPrice\"\r\n                        className=\"input-60\"\r\n                        disabled\r\n                        type=\"number\"\r\n                        value={bill.product.customerPrice}\r\n                      />\r\n                    </td>\r\n\r\n                    {/* Will be updated on selecting product */}\r\n                    <td>\r\n                      <input\r\n                        className=\"input-60\"\r\n                        disabled\r\n                        type=\"text\"\r\n                        readonly\r\n                        value={bill.product.shopkeeperPrice}\r\n                      />\r\n                    </td>\r\n\r\n                    {/* Will be updated on selecting product */}\r\n                    <td>\r\n                      <input\r\n                        className=\"input-80\"\r\n                        disabled\r\n                        type=\"text\"\r\n                        readonly\r\n                        value={(bill => {\r\n                          return bill.total;\r\n                        })(bill)}\r\n                      />\r\n                    </td>\r\n\r\n                    {/* Will be updated on selecting product */}\r\n                    <td>\r\n                      {\r\n                        <input\r\n                          onInput={evt => {\r\n                            this.updateBill(\r\n                              bill,\r\n                              evt.target.id,\r\n                              evt.target.value\r\n                            );\r\n                          }}\r\n                          className=\"input-60\"\r\n                          id=\"discountPerc\"\r\n                          type=\"number\"\r\n                          value={bill.discountPerc}\r\n                        />\r\n                      }\r\n                    </td>\r\n                    <td>\r\n                      {\r\n                        <input\r\n                          disabled\r\n                          className=\"input-80\"\r\n                          type=\"number\"\r\n                          value={(bill => {\r\n                            return bill.discountedAmt;\r\n                          })(bill)}\r\n                        />\r\n                      }\r\n                    </td>\r\n                    {/* <td>{\"discounted amount here\"}</td> */}\r\n\r\n                    {/* Will be updated on selecting product */}\r\n                    <td>\r\n                      <input\r\n                        id=\"unitDisc\"\r\n                        onInput={evt => {\r\n                          this.updateBill(\r\n                            bill,\r\n                            evt.target.id,\r\n                            evt.target.value\r\n                          );\r\n                        }}\r\n                        className=\"input-80\"\r\n                        onKeyDown={evt => {\r\n                          if (evt.key == \"Enter\") {\r\n                            if (!bill.product._id) {\r\n                              toast.error(\"PLEASE SELECT A PRODUCT\");\r\n                              return;\r\n                            }\r\n\r\n                            let previousOrder = this.state.bills[\r\n                              this.state.bills.length - 1\r\n                            ];\r\n                            previousOrder.inProcess = false;\r\n\r\n                            this.state.bills.push(this.putNewOrder());\r\n\r\n                            this.setState(this.state);\r\n                          }\r\n                        }}\r\n                        type=\"number\"\r\n                        value={bill.unitDisc}\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      <input\r\n                        className=\"input-80\"\r\n                        type=\"number\"\r\n                        disabled\r\n                        value={bill.total - bill.discountedAmt - bill.unitDisc}\r\n                      />\r\n                    </td>\r\n                    <td>\r\n                      {bill.inProcess ? (\r\n                        <i\r\n                          class=\"material-icons dp48 green pointer\"\r\n                          onClick={() => {\r\n                            let tBill = this.state.bills[\r\n                              this.state.bills.length - 1\r\n                            ];\r\n                            tBill &&\r\n                              (this.state.bills[\r\n                                this.state.bills.length - 1\r\n                              ] = this.putNewOrder());\r\n\r\n                            this.setState(this.state.bills);\r\n                          }}\r\n                        >\r\n                          done_all\r\n                        </i>\r\n                      ) : (\r\n                        <i\r\n                          class=\"material-icons dp48 pink pointer\"\r\n                          onClick={() => {\r\n                            if (bill.deleted) {\r\n                              this.defaultAction = this.restoreItem;\r\n\r\n                              this.setState({\r\n                                description:\r\n                                  \"Are you sure, you want to restore this item?\",\r\n                                title: \"Restore Item\",\r\n                                selectedBill: bill,\r\n                                deleteDialog: true\r\n                              });\r\n                            } else {\r\n                              this.defaultAction = this.deleteItem;\r\n\r\n                              this.setState({\r\n                                description:\r\n                                  \"Are you sure, you want to delete this item?\",\r\n                                title: \"Delete Current Item\",\r\n                                selectedBill: bill,\r\n                                deleteDialog: true\r\n                              });\r\n                            }\r\n                          }}\r\n                        >\r\n                          {\" \"}\r\n                          {bill.deleted ? \"refresh\" : \"delete_forever\"}\r\n                        </i>\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  store => {\r\n    console.log(\"store\", store);\r\n\r\n    return {\r\n      data: {\r\n        ...store.salesReducer,\r\n        ...store.areaReducers,\r\n        ...store.customerReducer,\r\n        ...store.productReducers\r\n      }\r\n    };\r\n  },\r\n  dispatch => {\r\n    return {\r\n      saveSale: data => {\r\n        dispatch(middleware.createSale(data));\r\n      }\r\n    };\r\n  }\r\n)(Sales);\r\n","import history from '../../historyProvider';\r\nimport messages from '../../message';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nexport default {\r\n    /// Needs Customer ID and desired state\r\n    fetchSalaries(userID) {\r\n\r\n        return fetch('/api/users/salary/get?id=' + userID, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n\r\n            // body: JSON.stringify(data)\r\n        })\r\n            .then(resp => {\r\n                return resp.json();\r\n            })\r\n\r\n    },\r\ncreateSalary(data) {\r\n\r\n    return (dispatch) => {\r\n\r\n        fetch('/api/users/salary/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(resp => {\r\n                return resp.json();\r\n            }).then((salary) => {\r\n\r\n                if (salary._id) {\r\n                    dispatch({\r\n                        type: 'SALARY_SAVED'\r\n                    });\r\n                    toast.success(messages.users.salaryCreated);\r\n                } else {\r\n                    toast.error(messages.users.error.cannotCreateSalary);\r\n                }\r\n\r\n            });\r\n\r\n    }\r\n\r\n\r\n},\r\ntoggleUserState(data) {\r\n\r\n    return (dispatch) => {\r\n\r\n        fetch('/api/users/toggleState', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(resp => {\r\n                return resp.json();\r\n            }).then((customer) => {\r\n\r\n                if (customer._id) {\r\n                    dispatch({\r\n                        type: 'USER_STATUS_UPDATED'\r\n                    });\r\n                    toast.success(messages.users.created);\r\n                } else {\r\n                    toast.error(messages.users.error.cannotCreate);\r\n                }\r\n\r\n            });\r\n\r\n    }\r\n\r\n},\r\ncreateUser(data) {\r\n\r\n    return (dispatch) => {\r\n\r\n\r\n        fetch('/api/users/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(resp => {\r\n                return resp.json();\r\n            }).then((user) => {\r\n\r\n                if (user._id) {\r\n                    dispatch({\r\n                        type: data._id ? 'USER_UPDATED' : 'USER_CREATED',\r\n                        payload: user,\r\n                        model: 'users'\r\n                    });\r\n                    toast.success(messages.users[data._id ? 'updated' : 'created']);\r\n                } else {\r\n                    toast.error(messages.users.error.cannotCreate);\r\n                }\r\n\r\n            });\r\n\r\n    }\r\n\r\n}\r\n\r\n}","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport utlities from \"../../../utlities\";\r\nimport middleware from \"../../../store/Middleware/users\";\r\nimport Currency from \"react-currency-formatter\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      <Box p={3}>{children}</Box>\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\n// import './addSupplier.css';\r\n\r\nconst AddUser = props => {\r\n  let [state, setState] = useState({\r\n    ...props.user\r\n    // code:utlities.getID(\"USER\",\"code\",props.data.users)\r\n  });\r\n  console.log(\"PropsUser\", {\r\n    ...props.user\r\n  },state);\r\n\r\n  let areaBox = React.createRef();\r\n  let chipsContainer = React.createRef();\r\n\r\n  let [record, setRecord] = useState({\r\n    records: []\r\n  });\r\n\r\n  function updateState(evt) {\r\n    state[evt.target.id] = evt.target.value;\r\n    setState({ ...state });\r\n  }\r\n\r\n  let user = [];\r\n\r\n  const classes = useStyles();\r\n\r\n  let currentAreas = [];\r\n\r\n  let data = {\r\n    Apple: null,\r\n    Microsoft: null,\r\n    Google: null\r\n  };\r\n\r\n  function transformAreasToChipsData(list) {\r\n    let obj = {};\r\n\r\n    list.forEach(item => {\r\n      obj[item.name] = null;\r\n    });\r\n\r\n    return obj;\r\n  }\r\n  const monthDropDown = React.useRef();\r\n\r\n  useEffect(() => {\r\n    // props.user.areas.forEach((area)=>{\r\n\r\n    //     window.$('<div class=\"chip\">'+area+'</div>').appendTo(chipsContainer.current);\r\n\r\n    // });\r\n\r\n    window.$(monthDropDown.current).dropdown();\r\n  });\r\n\r\n  const [value, setValue] = React.useState(0);\r\n  // const [salary, setSalary] = React.useState(0);\r\n\r\n  const [paymentType, setPaymentType] = React.useState(\"regularpay\");\r\n  const [selectedMonth, setSelectedMonth] = React.useState(\r\n    utlities.time.getMonthName()\r\n  );\r\n\r\n  const handleChange = (event, newValue) => {\r\n    if (newValue == 1) {\r\n      props.fetchSalaries(props.user._id).then(records => {\r\n        setRecord({\r\n          records: records\r\n        });\r\n      });\r\n    }\r\n\r\n    setValue(newValue);\r\n  };\r\n\r\n  fetchAttendance();\r\n\r\n  function fetchAttendance(args) {\r\n    fetch(\"/api/attendance/get\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        // date: newDate.getDate(),\r\n        user: props.user._id,\r\n        month: utlities.time.getMonthFromName(selectedMonth)\r\n        // year: newDate.getFullYear()\r\n      })\r\n    })\r\n      .then(resp => resp.json())\r\n      .then(attendanceDays => {\r\n        let days = utlities.time.getMonthDays(selectedMonth);\r\n        let leaves = days - attendanceDays.length;\r\n        let perDaySalary = props.user.salary / days;\r\n\r\n        let payableSalary = perDaySalary * attendanceDays.length;\r\n\r\n        setState({\r\n          amount: Math.round(payableSalary),\r\n          offdays: leaves\r\n        });\r\n\r\n        console.log(20);\r\n        // this.setState({ searched: resp });\r\n      });\r\n  }\r\n\r\n  function saveSalary() {\r\n    // state.areas = currentAreas;\r\n    // console.log(state);\r\n    // state.code = state._id ? state.code : props.data.userCode;\r\n    // state.type = paymentType;\r\n    // state.user = props.user._id\r\n    // state.month = selectedMonth;\r\n    props.createSalary({\r\n      type: paymentType,\r\n      user: props.user._id,\r\n      month: selectedMonth,\r\n      amount: state.amount\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"add-user\">\r\n      <div\r\n        class=\"modal-overlay\"\r\n        style={{ \"z-index\": 1002, display: \"block\", opacity: 0.5 }}\r\n      ></div>\r\n      <div\r\n        id=\"modal1\"\r\n        class=\"modal\"\r\n        style={{ display: \"block\", height: \"405px\" }}\r\n      >\r\n        <div class=\"modal-content\">\r\n          <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n              <Tabs\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"simple tabs example\"\r\n              >\r\n                <Tab label=\"ADD NEW\" {...a11yProps(0)} />\r\n                <Tab label=\"PREVIOUS SALARIES\" {...a11yProps(1)} />\r\n                <Tab label=\"Payroll\" {...a11yProps(2)} />\r\n              </Tabs>\r\n            </AppBar>\r\n\r\n            <TabPanel value={value} index={0}>\r\n              <div className=\"row\">\r\n                <div class=\"input-field col s6\">\r\n                  <FormControl\r\n                    component=\"fieldset\"\r\n                    className={classes.formControl}\r\n                  >\r\n                    <FormLabel component=\"legend\">Payment Type</FormLabel>\r\n                    <RadioGroup\r\n                      aria-label=\"paymentType\"\r\n                      name=\"paymentType\"\r\n                      value={paymentType}\r\n                      onChange={evt => {\r\n                        setPaymentType(evt.target.value);\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        value=\"prepay\"\r\n                        control={<Radio />}\r\n                        label=\"PRE-PAY\"\r\n                      />\r\n                      <FormControlLabel\r\n                        value=\"regularpay\"\r\n                        control={<Radio />}\r\n                        label=\"REGULAR PAY\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </div>\r\n\r\n                <div class=\"input-field col s6\">\r\n                  <input\r\n                    value={state.amount}\r\n                    onChange={updateState}\r\n                    placeholder=\"Amount\"\r\n                    id=\"amount\"\r\n                    type=\"number\"\r\n                    class=\"validate\"\r\n                  />\r\n                  <input\r\n                    readOnly\r\n                    value={state.offdays}\r\n                    onChange={evt => {\r\n                      let days = utlities.time.getMonthDays(\r\n                        utlities.time.getMonthName()\r\n                      );\r\n                      let perDaySalary = props.user.salary / days;\r\n                      let payableSalary =\r\n                        perDaySalary * (days - evt.target.value);\r\n\r\n                      setState({\r\n                        amount: Math.round(payableSalary)\r\n                      });\r\n                    }}\r\n                    placeholder=\"Off Days\"\r\n                    id=\"offdays\"\r\n                    type=\"number\"\r\n                    class=\"validate\"\r\n                  />\r\n                  <a\r\n                    class=\"dropdown-trigger btn\"\r\n                    ref={monthDropDown}\r\n                    href=\"#\"\r\n                    data-target=\"dropdown1\"\r\n                  >\r\n                    {selectedMonth}\r\n                  </a>\r\n\r\n                  <ul\r\n                    title=\"Select Month\"\r\n                    onClick={evt => {\r\n                      setSelectedMonth(evt.target.innerText);\r\n                    }}\r\n                    id=\"dropdown1\"\r\n                    class=\"dropdown-content\"\r\n                  >\r\n                    <li>\r\n                      <a href=\"#!\">JANUARY</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">FEBRUARY</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">MARCH</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">APRIL</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">MAY</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">JUNE</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">JULY</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">AUGUST</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">SEPTEMBER</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">OCTOBER</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">NOVEMBER</a>\r\n                    </li>\r\n                    <li>\r\n                      <a href=\"#!\">DECEMBER</a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                  <table className=\"center-black text-black\" border=\"1\">\r\n                    <tr>\r\n                      <th>TOTAL SALARY</th>\r\n                      <td className=\"center-table\">\r\n                        <Currency quantity={props.user.salary} currency=\"PKR\" />{\" \"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>TOTAL OFFDAYS</th>\r\n                      <td className=\"center-table\">{state.offdays}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>PAYABLE SALARY</th>\r\n                      <td className=\"border-top center-table\">\r\n                        <Currency quantity={state.amount} currency=\"PKR\" />\r\n                      </td>\r\n                    </tr>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </TabPanel>\r\n\r\n            <TabPanel value={value} index={1}>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>SR.</th>\r\n                    <th>Date</th>\r\n                    <th>Type</th>\r\n                    <th>Month</th>\r\n                    <th>Amount</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {record.records.map((company, i) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>\r\n                          <b>{i + 1}</b>\r\n                        </td>\r\n                        <td>{new Date(company.date).toDateString()}</td>\r\n                        <td>{company.type}</td>\r\n                        <td>{company.month}</td>\r\n                        <td>{company.amount}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </TabPanel>\r\n\r\n            <TabPanel value={value} index={2}>\r\n              <div className=\"row\">\r\n                <div class=\"input-field col s6\">\r\n                  <input\r\n                    value={state.salary}\r\n                    onChange={updateState}\r\n                    placeholder=\"Salary\"\r\n                    id=\"salary\"\r\n                    type=\"number\"\r\n                    class=\"validate\"\r\n                  />\r\n                  <a\r\n                    className=\"btn\"\r\n                    onClick={() => {\r\n                      props.updateUser({\r\n                        _id: props.user._id,\r\n                        salary: state.salary\r\n                      });\r\n                    }}\r\n                  >\r\n                    Update\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </TabPanel>\r\n          </div>\r\n        </div>\r\n        {value == 0 ? (\r\n          <div class=\"modal-footer absolute-bottom\">\r\n            <button\r\n              className=\"waves-effect waves-light btn-small save\"\r\n              onClick={saveSalary}\r\n            >\r\n              <i class=\"material-icons\"></i>Issue Salary\r\n            </button>\r\n            <button\r\n              className=\"waves-effect waves-light btn-small cancel\"\r\n              onClick={() => {\r\n                //props.toggleMenu(false)\r\n                props.showAddUser(false);\r\n              }}\r\n            >\r\n              <i class=\"material-icons\"></i>Cancel\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchtoProps = dispatch => {\r\n  return {\r\n    fetchSalaries: userID => {\r\n      return middleware.fetchSalaries(userID);\r\n    },\r\n    updateUser: data => {\r\n      dispatch(middleware.createUser(data));\r\n    },\r\n    createSalary: data => {\r\n      dispatch(middleware.createSalary(data));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(store => {\r\n  return {\r\n    data: { ...store.userReducer, ...store.areaReducers }\r\n  };\r\n}, mapDispatchtoProps)(AddUser);\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AddUser from './addSalary';\r\n\r\n// const User = (this.props) => {\r\nclass Salary extends React.Component {\r\n\r\n\r\n    state = {\r\n        targetUser: { areas: [] },\r\n        openUserForm: false\r\n    }\r\n\r\n    // let [addingUser, showAddUser] = useState(false);\r\n\r\n    render = () => {\r\n\r\n        let uIndex = this.props.data.users.indexOf(this.state.targetUser);\r\n\r\n        uIndex == -1 && (\r\n            this.state.targetUser = this.props.data.users.find((user) => {\r\n                return user._id == this.state.targetUser._id;\r\n            }) || {\r\n                areas: []\r\n            }\r\n        );\r\n\r\n        return <section className=\"app-section\">\r\n            {this.state.openUserForm ? <AddUser user={this.state.targetUser} showAddUser={() => {\r\n                this.setState({\r\n                    openUserForm: false,\r\n                })\r\n            }} /> : null}\r\n            <div className=\"label-head\">\r\n                <img src=\"/images/label-head.png\" />\r\n                <h4>Salary</h4>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div class=\"input-field col s3\">\r\n                    <input placeholder=\"Placeholder\" id=\"first_name\" type=\"text\" class=\"validate\" />\r\n                    <label className=\"adjusted-label\" for=\"first_name\">Search Users</label>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>SR.</th>\r\n                            <th>EMPLOYEE CODE</th>\r\n                            <th className=\"wd-200\">FULL NAME</th>\r\n                            <th className=\"wd-200\">EMAIL</th>\r\n                            <th>CONTACT</th>\r\n                            <th>ADDRESS</th>\r\n                            <th>DATE</th>\r\n                            <th>\r\n                                <img onClick={() => {\r\n                                    this.setState({\r\n                                        targetUser: {\r\n                                            areas: []\r\n                                        },\r\n                                        openUserForm: true,\r\n                                    })\r\n                                }} className=\"icon add-item\" src=\"/images/add-icon.png\" />\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {this.props.data.users.map((user, i) => {\r\n                            return <tr>\r\n                                <td><b>{(i + 1)}</b></td>\r\n                                <td>{user.code}</td>\r\n                                <td className=\"wd-200\">{user.fullName}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>{user.phone}</td>\r\n                                <td>{user.areas.map((area) => {\r\n                                    return area.name\r\n                                }).join(',')}</td>\r\n                                <td>{user.date}</td>\r\n                                <td>\r\n                                    {/* <img title=\"Edit\" onClick={() => {\r\n                                        this.setState({\r\n                                            targetUser: user,\r\n                                            openUserForm: true\r\n                                        })\r\n                                    }\r\n                                    } className=\"icon pointer\" src=\"/images/table-icons/edit-icon.png\" /> */}\r\n\r\n                                    <img title=\"Show Salary Details\" className=\"pointer\" onClick={() => {\r\n                                        this.setState({\r\n                                            targetUser: user,\r\n                                            openUserForm: true\r\n                                        })\r\n                                    }\r\n                                    } className=\"icon pointer\" src=\"/images/table-icons/detail-icon.png\" />\r\n\r\n                                    {/* <Link to={'/accountsdetails/' + user.id}>\r\n                                        <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                                    </Link> */}\r\n                                </td>\r\n                            </tr>\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n\r\n        </section>\r\n\r\n    }\r\n\r\n}\r\nexport default connect((store) => {\r\n    return {\r\n        data: store.userReducer\r\n    }\r\n})(Salary);","import history from '../../historyProvider';\r\nimport messages from '../../message';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nexport default {\r\n    /// Needs Customer ID and desired state\r\n    fetchExpenses(userID) {\r\n\r\n        return fetch('/api/expenses/get' + userID, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n\r\n            // body: JSON.stringify(data)\r\n        })\r\n            .then(resp => {\r\n                return resp.json();\r\n            })\r\n\r\n    },\r\n    saveExpense(data) {\r\n\r\n        return (dispatch) => {\r\n\r\n            fetch('/api/expenses/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((expense) => {\r\n\r\n                    if (expense._id) {\r\n                        dispatch({\r\n                            type: 'EXPENSE_CREATED',\r\n                            payload:expense\r\n                        });\r\n                        toast.success(messages.expenses.created);\r\n                    } else {\r\n                        toast.error(messages.expenses.error.cannotCreate);\r\n                    }\r\n\r\n                });\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n}","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport utlities from '../../utlities';\r\nimport middleware from '../../store/Middleware/expenses';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n// import Tabs from '@material-ui/core/Tabs';\r\n// import Tab from '@material-ui/core/Tab';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import Box from '@material-ui/core/Box';\r\n\r\n// import Radio from '@material-ui/core/Radio';\r\n// import RadioGroup from '@material-ui/core/RadioGroup';\r\n// import FormHelperText from '@material-ui/core/FormHelperText';\r\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\r\n// import FormControl from '@material-ui/core/FormControl';\r\n// import FormLabel from '@material-ui/core/FormLabel';\r\n\r\n// function TabPanel(props) {\r\n//     const { children, value, index, ...other } = props;\r\n\r\n//     return (\r\n//         <Typography\r\n//             component=\"div\"\r\n//             role=\"tabpanel\"\r\n//             hidden={value !== index}\r\n//             id={`simple-tabpanel-${index}`}\r\n//             aria-labelledby={`simple-tab-${index}`}\r\n//             {...other}\r\n//         >\r\n//             <Box p={3}>{children}</Box>\r\n//         </Typography>\r\n//     );\r\n// }\r\n\r\n// TabPanel.propTypes = {\r\n//     children: PropTypes.node,\r\n//     index: PropTypes.any.isRequired,\r\n//     value: PropTypes.any.isRequired,\r\n// };\r\n\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\n// import './addSupplier.css';\r\n\r\nconst AddUser = (props) => {\r\n\r\n    let [state, setState] = useState({});\r\n\r\n    function updateState(evt) {\r\n\r\n        state[evt.target.id] = evt.target.value;\r\n        setState({ ...state });\r\n\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const deliveryDatePicker = useRef();\r\n\r\n    useEffect(()=>{\r\n        \r\n        window.$(deliveryDatePicker.current).datepicker({\r\n            minDate: new Date() \r\n        });\r\n\r\n    })\r\n\r\n    function saveExpense() {\r\n\r\n        state.code = props.data.expCode;\r\n        props.createExpense(state);\r\n    }\r\n\r\n    return <div className=\"add-user\">\r\n        <div class=\"modal-overlay\" style={{ 'z-index': 1002, 'display': 'block', opacity: 0.5 }}></div>\r\n        <div id=\"modal1\" class=\"modal modal-small\" style={{ 'display': 'block', 'height': '405px' }}>\r\n            <div class=\"modal-content\">\r\n\r\n                <div className=\"def-modal-body modal-body\">\r\n\r\n                <input className=\"readonly-code\" placeholder=\"Customer Code\" value={props.data.expCode} readOnly id=\"code\" type=\"text\" />\r\n\r\n\r\n                    <div className=\"sub-head\">Add Expense</div>\r\n\r\n                    <div className={classes.root}>\r\n\r\n                        <div className=\"row\">\r\n\r\n                            <div class=\"input-field col s12\">\r\n\r\n\r\n                                <input value={state.amount} onChange={updateState} placeholder=\"Amount\" id=\"amount\" type=\"number\" class=\"validate\" />\r\n\r\n\r\n                            </div>\r\n\r\n                        </div>           \r\n\r\n                        <div className=\"row\">\r\n\r\n                            <div class=\"input-field col s12 text-center\">\r\n\r\n                                <input onChange={updateState} placeholder=\"Date\" id=\"date\" type=\"text\" id=\"deliveryDate\" ref={deliveryDatePicker} />\r\n                            </div>\r\n                        </div>\r\n\r\n                                     <div class=\"input-field col s12\">\r\n                            <textarea onChange={updateState} placeholder=\"Notes\" id=\"notes\" class=\"white materialize-textarea\"></textarea>\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div class=\"modal-footer absolute-bottom\">\r\n                <button className=\"waves-effect waves-light btn-small save\" onClick={saveExpense}><i class=\"material-icons\"></i>Save Expense</button>\r\n                <button className=\"waves-effect waves-light btn-small cancel\" onClick={() => {\r\n                    //props.toggleMenu(false) \r\n                    props.showAddUser(false)\r\n                }}><i class=\"material-icons\"></i>Cancel</button>\r\n            </div>\r\n        </div >\r\n    </div >\r\n\r\n};\r\n\r\nconst mapDispatchtoProps = (dispatch) => {\r\n    return {\r\n        createExpense: (data) => {\r\n            dispatch(middleware.saveExpense(data));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect((store) => {\r\n    return {\r\n        data: { ...store.expensesReducer }\r\n    }\r\n}, mapDispatchtoProps)(AddUser);","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AddExpense from './addExpenses';\r\n\r\n// const User = (this.props) => {\r\nclass Expenses extends React.Component {\r\n\r\n\r\n    state = {\r\n        targetUser: { areas: [] },\r\n        openUserForm: false\r\n    }\r\n\r\n    // let [addingUser, showAddUser] = useState(false);\r\n\r\n    render = () => {\r\n\r\n        // let uIndex = this.props.data.users.indexOf(this.state.targetUser);\r\n\r\n        // uIndex == -1 && (\r\n        //     this.state.targetUser = this.props.data.users.find((user) => {\r\n        //         return user._id == this.state.targetUser._id;\r\n        //     }) || {\r\n        //         areas: []\r\n        //     }\r\n        // );\r\n\r\n        return <section className=\"app-section\">\r\n            {this.state.openUserForm ? <AddExpense user={this.state.targetUser} showAddUser={() => {\r\n                this.setState({\r\n                    openUserForm: false,\r\n                })\r\n            }} /> : null}\r\n            <div className=\"label-head\">\r\n                <img src=\"/images/label-head.png\" />\r\n                <h4>Expenses</h4>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div class=\"input-field col s3\">\r\n                    <input placeholder=\"Placeholder\" id=\"first_name\" type=\"text\" class=\"validate\" />\r\n                    <label className=\"adjusted-label\" for=\"first_name\">Search Users</label>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>SR.</th>\r\n                            <th>EXPENSE CODE</th>\r\n                            <th>AMOUNT</th>\r\n                            <th>DATE</th>\r\n                            <th className=\"wd-200\">NOTES</th>\r\n                            <th>\r\n                                {<img onClick={() => {\r\n                                    this.setState({\r\n                                        targetUser: {                                          \r\n                                        },\r\n                                        openUserForm: true\r\n                                    });\r\n                                }} className=\"icon add-item\" src=\"/images/add-icon.png\" />}\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {this.props.data.expenses.map((user, i) => {\r\n                            return <tr>\r\n                                <td><b>{(i + 1)}</b></td>\r\n                                <td>{user.code}</td>\r\n                                <td>{user.amount}</td>\r\n                                <td>{new Date(user.date).toDateString()}</td>\r\n                                <td className=\"wd-200\">{user.notes}</td>\r\n                            </tr>\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n\r\n        </section>\r\n\r\n    }\r\n\r\n}\r\nexport default connect((store) => {\r\n    return {\r\n        data: store.expensesReducer\r\n    }\r\n})(Expenses);","import React, {useRef, useState} from 'react';  \r\nimport './addPayment.css'\r\n\r\nconst AddPayment = (props) => {\r\n\r\n\r\n    let [payment, setPayment] = useState(0);    \r\n\r\n    return <div className=\"payment-adder\">\r\n        <div class=\"modal-overlay\" style={{'z-index': 1002, 'display':props.visible ? 'block' :'none', opacity: 0.5}}></div>\r\n        <div id=\"modal1\" class=\"modal\" style={{'display':props.visible ? 'block' :'none'}}>\r\n        <div class=\"modal-content\">\r\n            <div className=\"sub-head\">Add Payment</div>\r\n           <div className=\"text-center\">\r\n\r\n            <select className=\"inline\">\r\n                <option>Cash</option>\r\n                <option>Cheque</option>\r\n            </select>\r\n            \r\n            <input value={payment} onChange={(evt)=>{\r\n                setPayment(evt.target.value);\r\n            }} type=\"number\"/>\r\n\r\n           {/* <a ref={paymentSelector} onClick={toggleMenu} class='dropdown-trigger btn' data-target='paymentOptions'>Drop Me!</a>\r\n           <ul id=\"paymentOptions\" class='dropdown-content'>         \r\n            <li><a href=\"#!\"><i class=\"material-icons\">view_module</i>Cash</a></li>\r\n            <li><a href=\"#!\"><i class=\"material-icons\">cloud</i>Cheque</a></li>\r\n        </ul> */}\r\n                \r\n           </div>\r\n        </div>\r\n        <div class=\"modal-footer\">            \r\n            <button className=\"waves-effect waves-light btn-small save\" onClick={()=>{\r\n                props.onPaymentAdded(payment);\r\n            }}><i class=\"material-icons\"></i>Save</button>\r\n            <button className=\"waves-effect waves-light btn-small cancel\" onClick={()=>{\r\n                props.toggleMenu(false) \r\n            }}><i class=\"material-icons\"></i>Cancel</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n}\r\n\r\nexport default AddPayment;","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AddPayment from '../addPayment/addPayment';\r\n\r\nconst SupplierDetails = (props) => {\r\n\r\n    // let payment = 0;\r\n    let [addingPayment, setPayment] = useState(false);\r\n\r\n    const toggleMenu = (open) => {\r\n        console.log(props.match.params)\r\n        // console.log(\"A\");\r\n        setPayment(open);\r\n\r\n    }\r\n\r\n    const onPaymentAdded = (paymentAmount) => {\r\n\r\n        props.addPaymentToSupplier({\r\n            supplierID: props.match.params.id,\r\n            totalPayable: 7500,\r\n            amountPaid: paymentAmount,\r\n            date: new Date()\r\n        });\r\n\r\n        setPayment(false);\r\n\r\n\r\n    }\r\n\r\n    return <section className=\"app-section\">\r\n       {addingPayment && <AddPayment visible={addingPayment} toggleMenu={toggleMenu} onPaymentAdded={onPaymentAdded} /> }\r\n        <div className=\"label-head\">\r\n            <img src=\"/images/label-head.png\" />\r\n            <h4>Account Details</h4>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div class=\"input-field col s3\">\r\n                {/* <input placeholder=\"Placeholder\" id=\"supplierSearch\" type=\"text\" class=\"validate\" />\r\n                <label className=\"adjusted-label\" for=\"supplierSearch\">Search Payment</label> */}\r\n            </div>\r\n        </div>\r\n\r\n        <div>\r\n\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"wd-200\">TOTAL PAYABLE</th>\r\n                        <th className=\"wd-200\">AMOUNT PAID</th>\r\n                        <th className=\"wd-200\">BALANCE</th>\r\n                        <th className=\"wd-200\"></th>\r\n                        <th>\r\n                            <img onClick={() => {\r\n                                toggleMenu(true)\r\n                            }} className=\"icon add-item\" src=\"/images/add-icon.png\" />\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                    {props.data.supplierAccounts.map((supplierAcc, i) => {\r\n\r\n                        return <tr>\r\n                            <td className=\"wd-200\">{supplierAcc.totalPayable}</td>\r\n                            <td className=\"wd-200\">{supplierAcc.amountPaid}</td>\r\n                            <td className=\"wd-200\">{supplierAcc.totalPayable - supplierAcc.amountPaid}</td>\r\n                            {/* <td className=\"wd-200\">{new Date(supplierAcc.date).toDateString()}</td> */}\r\n                            <td className=\"wd-200\"></td>\r\n                        </tr>;\r\n\r\n                    })}\r\n\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n\r\n    </section>\r\n\r\n\r\n}\r\n\r\nexport default connect((store) => {\r\n    return {\r\n        data: store.dataReducers\r\n    }\r\n}, (dispatch) => {\r\n    return {\r\n        addPaymentToSupplier(args) {\r\n            dispatch({\r\n                type: 'PAY_TO_SUPPLIER',\r\n                payload: args\r\n            })\r\n        }\r\n    }\r\n})(SupplierDetails);\r\n\r\n// fetch the supplier array filter the the suppler with paramms id ","import history from '../../historyProvider';\r\nimport messages from '../../message';\r\nimport { toast  } from 'react-toastify';\r\n\r\n\r\nexport default {\r\n    /// Needs Customer ID and desired state\r\n    toggleCustomerState(data) {        \r\n\r\n        return (dispatch) => {\r\n\r\n            fetch('/api/customers/toggleState', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((customer) => {\r\n\r\n                    if(customer._id){\r\n                        dispatch({\r\n                            type:'CUSTOMER_STATUS_UPDATED'\r\n                        });\r\n                        toast.success(messages.customers.customerCreated);\r\n                    }else{\r\n                        toast.error(messages.customers.error.cannotCreate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    },\r\n    createCustomer(data) {\r\n\r\n        return (dispatch) => {\r\n\r\n\r\n            fetch('/api/customers/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(resp => {\r\n                    return resp.json();\r\n                }).then((customer) => {\r\n\r\n                    if(customer._id){\r\n                        dispatch({\r\n                            type: data._id ? 'CUSTOMER_UPDATED' : 'CUSTOMER_CREATED',\r\n                            payload:customer,\r\n                            model:'customers'\r\n                        });\r\n                        toast.success(messages.customers[data._id ? 'updated' : 'created']);\r\n                    }else{\r\n                        toast.error(messages.customers.error.cannotCreate);\r\n                    }\r\n\r\n                 });\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddSupplier from \"./addSupplier\";\r\nimport AutoComplete from \"../autocompletion/autocompletion\";\r\nimport customers from \"../../store/Middleware/customers\";\r\nimport Pagination from \"react-js-pagination\";\r\n// const Supplier = (props)=>{\r\nclass Customersledgers extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      activePage: 1,\r\n      itemPerPage: 10,\r\n      customer: { id: 0 },\r\n      customers: [],\r\n      area: {}\r\n    };\r\n  }\r\n\r\n  updateState = evt => {\r\n    debugger;\r\n    console.log(evt);\r\n    this.state[evt.target.id] = evt.target.value;\r\n    // this.setState(this.state);\r\n    console.log(\"area\", this.state.area);\r\n    let filterdCustomer = this.state.customers.filter(customer => {\r\n      if (evt.target.id === \"area\") {\r\n        return customer.area._id == evt.target.value;\r\n      } else if (evt.target.id === \"customer\") {\r\n        return customer.firstName == evt.target.value;\r\n      } else {\r\n        return customer;\r\n      }\r\n    });\r\n\r\n    console.log(\"fl\", filterdCustomer);\r\n    if (evt.target.value) {\r\n      this.setState({ customers: filterdCustomer });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      customers: this.props.data.customers\r\n    });\r\n  }\r\n  handlePageChange(pageNumber) {\r\n    console.log(`active page is ${pageNumber}`);\r\n    this.setState({ activePage: pageNumber });\r\n  }\r\n\r\n  render() {\r\n    let indexOfLastitem = this.state.activePage * this.state.itemPerPage;\r\n    let indexOfFirstitem = indexOfLastitem - this.state.itemPerPage;\r\n    let renderedCustomer =this.state.customers.slice(\r\n      indexOfFirstitem,\r\n      indexOfLastitem\r\n    );\r\n    return (\r\n      <section className=\"app-section\">\r\n        <div className=\"row\">\r\n          <div class=\"input-field col s5\">\r\n            <AutoComplete\r\n              property=\"name\"\r\n              defaultValue=\"thsisfd\"\r\n              defaultValue={this.props.data.customers[0]}\r\n              onChange={(evt, area) => {\r\n                area &&\r\n                  this.updateState({\r\n                    target: {\r\n                      id: \"area\",\r\n                      value: area._id\r\n                    }\r\n                  });\r\n              }}\r\n              data={this.props.data.areas}\r\n              placeholder=\"Select Area\"\r\n            />\r\n          </div>\r\n\r\n          <div class=\"input-field col s5\">\r\n            <AutoComplete\r\n              property=\"firstName\"\r\n              defaultValue={this.props.data.customers[0]}\r\n              onChange={(evt, customer) => {\r\n                customer &&\r\n                  this.updateState({\r\n                    target: {\r\n                      id: \"customer\",\r\n                      value: customer.firstName\r\n                    }\r\n                  });\r\n              }}\r\n              data={this.state.customers.filter(customer => {\r\n                return customer.area._id == this.state.area;\r\n              })}\r\n              placeholder=\"Select Customer\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"label-head\">\r\n          <img src=\"/images/label-head.png\" />\r\n          <h4>Suppliers</h4>\r\n        </div>\r\n\r\n        <div>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>SR.</th>\r\n                <th>CODE</th>\r\n                <th>FULL NAME</th>\r\n                <th>COMPANY</th>\r\n                <th className=\"wd-200\">PHONE</th>\r\n                <th className=\"wd-200\">ADDRESS</th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {renderedCustomer.map((supplier, i) => {\r\n                return (\r\n                  <tr>\r\n                    <td>\r\n                      <b>{i + 1}</b>\r\n                    </td>\r\n                    <td>{supplier.code}</td>\r\n                    <td>\r\n                      {supplier.firstName + \" \" + (supplier.lastName || \"\")}\r\n                    </td>\r\n                    <td>{supplier.company.name}</td>\r\n                    <td className=\"wd-200\">{supplier.phone}</td>\r\n                    <td className=\"wd-200\">{supplier.address}</td>\r\n                    <td>\r\n                      <Link to={\"/accountsdetails/\" + supplier.id}>\r\n                        <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                      </Link>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <center>\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              itemsCountPerPage={renderedCustomer.length}\r\n              totalItemsCount={this.state.customers.length}\r\n              pageRangeDisplayed={renderedCustomer.length}\r\n              onChange={pageNumber => this.handlePageChange(pageNumber)}\r\n            />\r\n          </center>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default connect(store => {\r\n  return {\r\n    data: {\r\n      ...store.customerReducer\r\n    }\r\n  };\r\n})(Customersledgers);\r\n","import { connect, useSelector } from \"react-redux\";\r\nimport React, { useState } from \"react\";\r\nimport \"./addCustomer.css\";\r\nimport customerMiddleWare from \"../../store/Middleware/customers\";\r\nimport utlities from \"../../utlities\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\n\r\nconst AddCustomer = props => {\r\n  const { code } = useSelector(state => {\r\n    return {\r\n      code: state.customerReducer.code\r\n    };\r\n  });\r\n\r\n  let [state, setState] = useState({\r\n    code: code,\r\n    ...props.customer\r\n  });\r\n\r\n  function updateState(evt) {\r\n    state[evt.target.id] = evt.target.value;\r\n    setState({ ...state });\r\n  }\r\n\r\n  function saveCustomer() {\r\n    // TBC add validation here\r\n  console.log(Object.keys(state.area))\r\n    let pattern = /^[a-zA-Z0-9\\-_]+(\\.[a-zA-Z0-9\\-_]+)*@[a-z0-9]+(\\-[a-z0-9]+)*(\\.[a-z0-9]+(\\-[a-z0-9]+)*)*\\.[a-z]{2,4}$/;\r\n       console.log(\"state.firstName\",state.firstName)\r\n    // Validation check\r\n    if ((state.firstName === undefined)||(state.firstName===\"\")) {\r\n      Alert.error(\"Please Enter Customer Name !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.lastName === undefined)||(state.lastName===\"\")) {\r\n      Alert.error(\"Please Enter Customer Last  Name!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((Object.keys(state.area).length === 0)||(state.area===\"Select Area\")) {\r\n      Alert.error(\"Please Select Customer Area!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n      \r\n    } \r\n   \r\n       \r\n    \r\n    else if ((state.email === undefined)||(state.email===\"\")) {\r\n      Alert.error(\"Please Enter Customer Email Carefully!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if (pattern.test(state.email) === false) {\r\n      Alert.error(\"Please  Enter Customer Email Carefully!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.gender === undefined)||(state.gender===\"Gender\")) {\r\n      Alert.error(\"Please Select Customer Gender!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.zip === undefined)||(state.zip===\"\")) {\r\n      Alert.error(\"Please Enter Customer  Zip Code!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.province === undefined)||(state.province===\"Province\")) {\r\n      Alert.error(\"Please select Customer Province!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.address === undefined)||(state.address===\"\")) {\r\n      Alert.error(\"Please Enter  Customer  Address!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.city === undefined)||(state.city===\"\")) {\r\n      Alert.error(\"Please Enter Customer City Name!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.comments === undefined)||(state.comments===\"\")) {\r\n      Alert.error(\"Please Enter  Comments!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.phone === undefined)||(state.phone===\"\")) {\r\n      Alert.error(\"Please Enter Customer  Phone Number!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if (Object.keys(state.company).length === 0) {\r\n      Alert.error(\"Please  select  Company! \", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else {\r\n      Alert.success(\"Succefully ! You Have Add Customer!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n      console.log(\"Add customer\", state);\r\n\r\n      props.createCustomer(state);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"add-customer\">\r\n      <div\r\n        class=\"modal-overlay\"\r\n        style={{ \"z-index\": 1002, display: \"block\", opacity: 0.5 }}\r\n      ></div>\r\n      <div\r\n        id=\"modal1\"\r\n        class=\"modal full-max-height\"\r\n        style={{ display: \"block\" }}\r\n      >\r\n        <div class=\"modal-content\">\r\n          <div className=\"sub-head\">Add Customer</div>\r\n\r\n          <div className=\"modal-body\">\r\n            <Alert stack={{ limit: 1 }} />\r\n            <input\r\n              className=\"readonly-code\"\r\n              placeholder=\"Customer Code\"\r\n              value={code}\r\n              readOnly\r\n              id=\"code\"\r\n              type=\"text\"\r\n            />\r\n\r\n            <div className=\"row\">\r\n              {/* TBC, render area name here */}\r\n              <div class=\"input-field col s6\">\r\n                <select\r\n                  value={state.area._id}\r\n                  onChange={updateState}\r\n                  id=\"area\"\r\n                  className=\"inline\"\r\n                >\r\n                  {[{ name: \"Select Area\" }]\r\n                    .concat(props.data.areas)\r\n                    .map(area => {\r\n                      return <option value={area._id}>{area.name}</option>;\r\n                    })}\r\n                </select>\r\n                {/* <select onChange={updateState} id=\"location\" className=\"inline\">\r\n                                <option>320GB</option>\r\n                                <option>160GB</option>\r\n                            </select> */}\r\n                {/* <input placeholder=\"Placeholder\" id=\"companyName\" type=\"text\" class=\"validate\" />\r\n                        <label className=\"default-input\" for=\"companyName\">Company Name</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.phone}\r\n                  onChange={updateState}\r\n                  placeholder=\"Phone\"\r\n                  id=\"phone\"\r\n                  type=\"number\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierPhone\">Phone</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.firstName}\r\n                  onChange={updateState}\r\n                  placeholder=\"First Name\"\r\n                  id=\"firstName\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierfName\">First Name</label> */}\r\n              </div>\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.lastName}\r\n                  onChange={updateState}\r\n                  placeholder=\"Last Name\"\r\n                  id=\"lastName\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierlName\">Last Name</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.email}\r\n                  onChange={updateState}\r\n                  placeholder=\"Email\"\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierEmail\">Email</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <select\r\n                  value={state.gender}\r\n                  onChange={updateState}\r\n                  className=\"inline\"\r\n                  id=\"gender\"\r\n                >\r\n                  <option>Gender</option>\r\n                  <option value=\"Male\">Male</option>\r\n                  <option value=\"Female\">Female</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.zip}\r\n                  onChange={updateState}\r\n                  placeholder=\"Zip\"\r\n                  id=\"zip\"\r\n                  type=\"number\"\r\n                  class=\"validate\"\r\n                  maxlength=\"11\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierZip\">Zip</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <select\r\n                  value={state.province}\r\n                  onChange={updateState}\r\n                  className=\"inline\"\r\n                  id=\"province\"\r\n                >\r\n                  <option value=\"Province\">Province</option>\r\n                  <option value=\"Punjab\">Punjab</option>\r\n                  <option value=\"Sindh\">Sindh</option>\r\n                  <option value=\"Balochistan\">Balochistan</option>\r\n                  <option value=\"KPK\">KPK</option>\r\n                  <option value=\"Gilgit Baltistan\">Gilgit Baltistan</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <textarea\r\n                  value={state.address}\r\n                  onChange={updateState}\r\n                  placeholder=\"Address\"\r\n                  id=\"address\"\r\n                  class=\"materialize-textarea\"\r\n                ></textarea>\r\n                {/* <label for=\"supplierAddress\">Street Address</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.city}\r\n                  onChange={updateState}\r\n                  placeholder=\"City\"\r\n                  id=\"city\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n                {/* <label className=\"default-input\" for=\"supplierAgency\">Agency Name</label> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <textarea\r\n                  value={state.comments}\r\n                  onChange={updateState}\r\n                  placeholder=\"Comments\"\r\n                  id=\"comments\"\r\n                  class=\"materialize-textarea\"\r\n                ></textarea>\r\n                {/* <label for=\"supplierComments\">Comments</label> */}\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <select\r\n                  value={state.company._id}\r\n                  onChange={updateState}\r\n                  id=\"company\"\r\n                  className=\"inline\"\r\n                >\r\n                  {[{ name: \"Select Company\" }]\r\n                    .concat(props.data.companies)\r\n                    .map(company => {\r\n                      return (\r\n                        <option value={company._id}>{company.name}</option>\r\n                      );\r\n                    })}\r\n                </select>\r\n                {/* <input  onChange={updateState} placeholder=\"Company\" id=\"company\" type=\"text\" class=\"validate\" /> */}\r\n                {/* <label className=\"default-input\" for=\"supplierAgency\">Agency Name</label> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            className=\"waves-effect waves-light btn-small save\"\r\n            onClick={saveCustomer}\r\n          >\r\n            <i class=\"material-icons\"></i>Save\r\n          </button>\r\n          <button\r\n            className=\"waves-effect waves-light btn-small cancel\"\r\n            onClick={() => {\r\n              //props.toggleMenu(false)\r\n              props.showAddCustomer(false);\r\n            }}\r\n          >\r\n            <i class=\"material-icons\"></i>Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchtoProps = dispatch => {\r\n  return {\r\n    createCustomer: data => {\r\n      dispatch(customerMiddleWare.createCustomer(data));\r\n    }\r\n  };\r\n};\r\nexport default connect(store => {\r\n  return {\r\n    data: {\r\n      ...store.customerReducer,\r\n      ...store.companyReducers,\r\n      ...store.areaReducers\r\n    }\r\n  };\r\n}, mapDispatchtoProps)(AddCustomer);\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AddCustomer from './addCustomer';\r\nimport Pagination from \"react-js-pagination\";\r\n\r\n// const Customer = (props)=>{\r\n\r\nclass Customer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          activePage: 1,\r\n          itemPerPage: 10\r\n        };\r\n      }\r\n    \r\n\r\nstate = {\r\n    openCustomerForm:false\r\n    // addingCustomer:false,\r\n    // editingCustomer:false\r\n}\r\n\r\n    //    let [addingCustomer, showAddCustomer] = useState(false);\r\n\r\n    //    let [editingCustomer, showEditCustomer] = useState(false);\r\n    handlePageChange(pageNumber) {\r\n        console.log(`active page is ${pageNumber}`);\r\n        this.setState({ activePage: pageNumber });\r\n      }\r\n    render() {\r\n\r\n        let indexOfLastitem = this.state.activePage * this.state.itemPerPage;\r\n        let indexOfFirstitem = indexOfLastitem - this.state.itemPerPage;\r\n        let renderedcustomers = this.props.data.customers.slice(\r\n          indexOfFirstitem,\r\n          indexOfLastitem\r\n        );\r\n        return <section className=\"app-section\">\r\n            {this.state.openCustomerForm && <AddCustomer customer={this.state.targetCustomer} showAddCustomer={(flag)=>{\r\n                this.setState({\r\n                   openCustomerForm:false\r\n                });\r\n            }} />\r\n        }\r\n            <div className=\"label-head\">\r\n                <img src=\"/images/label-head.png\" />\r\n                <h4>Customers</h4>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div class=\"input-field col s3\">\r\n                    <input placeholder=\"Placeholder\" id=\"first_name\" type=\"text\" class=\"validate\" />\r\n                    <label className=\"adjusted-label\" for=\"first_name\">Search Customers</label>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>SR.</th>\r\n                            <th>CODE</th>\r\n                            <th>AREA</th>\r\n                            <th>FULL NAME</th>\r\n                            <th>COMPANY</th>\r\n                            <th className=\"wd-200\">PHONE</th>\r\n                            <th className=\"wd-200\">ADDRESS</th>\r\n                            <th>\r\n                                {this.props.showAddBtn && <img onClick={() => {\r\n                                    this.setState({\r\n                                        targetCustomer:{\r\n                                            company:{},\r\n                                            area:{}\r\n                                        },\r\n                                        openCustomerForm:true\r\n                                    });\r\n                                }} className=\"icon add-item\" src=\"/images/add-icon.png\" />}\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {renderedcustomers.map((customer, i) => {\r\n                            return <tr>\r\n                                <td><b>{(i + 1)}</b></td>\r\n                                <td>{customer.code}</td>\r\n                                <td>{customer.area.name}</td>\r\n                                <td>{customer.firstName + ' ' + (customer.lastName || '')}</td>\r\n                                <td>{customer.company.name}</td>\r\n                                <td className=\"wd-200\">{customer.phone}</td>\r\n                                <td className=\"wd-200\">{customer.address}</td>\r\n                                <td>\r\n                                    <img title=\"Edit\" onClick={()=>{\r\n                                        this.setState({\r\n                                            targetCustomer:customer,\r\n                                            openCustomerForm:true\r\n                                        })\r\n                                    }\r\n                                    } className=\"icon pointer\" src=\"/images/table-icons/edit-icon.png\" />\r\n                                    <Link to={'/accountsdetails/' + customer.id}>\r\n                                        <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                                    </Link>\r\n                                </td>\r\n                            </tr>\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n                {/* Paggination Code */}\r\n          <center>\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              itemsCountPerPage={renderedcustomers.length} \r\n              totalItemsCount={this.props.data.customers.length}\r\n              pageRangeDisplayed={renderedcustomers.length}\r\n              onChange={pageNumber => this.handlePageChange(pageNumber)}\r\n            />\r\n          </center>\r\n            </div>\r\n\r\n\r\n        </section>\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect((store) => {\r\n    return {\r\n        data: store.customerReducer\r\n    }\r\n})(Customer);","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport utlities from \"../../../utlities\";\r\nimport middleware from \"../../../store/Middleware/users\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\n\r\n// import './addSupplier.css';\r\n\r\nconst AddUser = props => {\r\n  let [state, setState] = useState({\r\n    ...props.user\r\n    // code:utlities.getID(\"USER\",\"code\",props.data.users)\r\n  });\r\n\r\n  let areaBox = React.createRef();\r\n  let chipsContainer = React.createRef();\r\n\r\n  function updateState(evt) {\r\n    state[evt.target.id] = evt.target.value;\r\n    setState(state);\r\n  }\r\n\r\n  let user = [];\r\n\r\n  function findAllocatedAreas(user, allocatedAreas) {\r\n    // let data = {};\r\n    // allocatedAreas.forEach((area) => {\r\n    //     data[area.name] = user.areas.indexOf(area.name) != -1 ? true : null;\r\n    // })\r\n    // return data;\r\n  }\r\n\r\n  let currentAreas = [];\r\n\r\n  let data = {\r\n    Apple: null,\r\n    Microsoft: null,\r\n    Google: null\r\n  };\r\n\r\n  function transformAreasToChipsData(list) {\r\n    let obj = {};\r\n\r\n    list.forEach(item => {\r\n      obj[item.name] = null;\r\n    });\r\n\r\n    return obj;\r\n  }\r\n\r\n  useEffect(() => {\r\n    // props.user.areas.forEach((area)=>{\r\n\r\n    //     window.$('<div class=\"chip\">'+area+'</div>').appendTo(chipsContainer.current);\r\n\r\n    // });\r\n\r\n    let areas = props.data.areas;\r\n\r\n    window.$(areaBox.current).chips({\r\n      data: props.user.areas.map(item => {\r\n        return { tag: item.name };\r\n      }),\r\n      onChipAdd(chip) {\r\n        currentAreas = this.chipsData.map(chip => {\r\n          return areas.find(area => {\r\n            return chip.tag == area.name;\r\n          })._id;\r\n        });\r\n\r\n        window.$(chipsContainer.current).append(chip.find(\".chip\"));\r\n      },\r\n      onChipDelete(chip) {\r\n        currentAreas = this.chipsData.map(chip => {\r\n          return areas.find(area => {\r\n            return chip.tag == area.name;\r\n          })._id;\r\n        });\r\n      },\r\n      autocompleteOptions: {\r\n        chipsData: props.user.areas,\r\n        // data: data,\r\n        data: transformAreasToChipsData(props.data.areas),\r\n        limit: Infinity,\r\n        minLength: 1\r\n      }\r\n    });\r\n\r\n    window\r\n      .$(\".input-field\")\r\n      .find(\".chip\")\r\n      .each((i, item) => {\r\n        window.$(chipsContainer.current).append(item);\r\n      });\r\n  });\r\n\r\n  function saveUser(e) {\r\n    e.preventDefault();\r\n\r\n    state.areas = currentAreas;\r\n\r\n    state.code = state._id ? state.code : props.data.userCode;\r\n    let pattern = /^[a-zA-Z0-9\\-_]+(\\.[a-zA-Z0-9\\-_]+)*@[a-z0-9]+(\\-[a-z0-9]+)*(\\.[a-z0-9]+(\\-[a-z0-9]+)*)*\\.[a-z]{2,4}$/;\r\n\r\n    // Validation check\r\n    if ((state.fullName === undefined)||(state.fullName === \"\")) {\r\n      Alert.error(\"Please Enter User Name !\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if (state.areas.length === 0) {\r\n      Alert.error(\"Please  Add  User Area!\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if ((state.email === undefined)||(state.email===\"\")) {\r\n      Alert.error(\"Please Enter  User Email Carefully\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else if (pattern.test(state.email) === false) {\r\n      Alert.error(\r\n        \"Please Enter  User Email Carefully  \",\r\n        {\r\n          position: \"top-right\",\r\n          effect: \"slide\",\r\n          timeout: 3000\r\n        }\r\n      );\r\n    } else if ((state.phone === undefined)||(state.phone===\"\")) {\r\n      Alert.error(\"Please Enter  User Phone Number\", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n    } else {\r\n      console.log(\"user\",state);\r\n      Alert.success(\"Succefully ! User Created \", {\r\n        position: \"top-right\",\r\n        effect: \"slide\",\r\n        timeout: 3000\r\n      });\r\n      props.createUser(state);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"add-user\">\r\n      <div\r\n        class=\"modal-overlay\"\r\n        style={{ \"z-index\": 1002, display: \"block\", opacity: 0.5 }}\r\n      ></div>\r\n      <div id=\"modal1\" class=\"modal\" style={{ display: \"block\" }}>\r\n        <div class=\"modal-content\">\r\n          <div className=\"sub-head\">Add User</div>\r\n\r\n          <div className=\"modal-body\">\r\n            <Alert stack={{ limit: 1 }} />\r\n\r\n            <input\r\n              className=\"readonly-code\"\r\n              id=\"code\"\r\n              readOnly\r\n              value={state._id ? state.code : props.data.userCode}\r\n              type=\"text\"\r\n            />\r\n            <div className=\"row\">\r\n              {/* TBC, render companies name here */}\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.fullName}\r\n                  onChange={updateState}\r\n                  placeholder=\"Full Name\"\r\n                  id=\"fullName\"\r\n                  type=\"text\"\r\n                  class=\"validate\"\r\n                />\r\n              </div>\r\n\r\n              <div class=\"input-field col s6\">\r\n                <div class=\"chips\" ref={areaBox}>\r\n                  <input placeholder=\"Add Area\" class=\"custom-class\" />\r\n                </div>\r\n\r\n                <div className=\"chipsContainer\" ref={chipsContainer}></div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.email}\r\n                  onChange={updateState}\r\n                  placeholder=\"Email\"\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  class=\"validate\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div class=\"input-field col s6\">\r\n                <input\r\n                  value={state.phone}\r\n                  onChange={updateState}\r\n                  placeholder=\"Phone\"\r\n                  id=\"phone\"\r\n                  type=\"number\"\r\n                  class=\"validate\"\r\n                />\r\n              </div>\r\n            </div>\r\n            {/* \r\n                    <div className=\"row\">\r\n\r\n                        <div class=\"input-field col s6\">\r\n                            <select onChange={updateState} className=\"inline\" id=\"supplierProvince\">\r\n                                <option>Punjab</option>\r\n                                <option>Sindh</option>\r\n                                <option>Balochistan</option>\r\n                                <option>KPK</option>\r\n                                <option>Gilgit Baltistan</option>\r\n                            </select>\r\n                        </div>\r\n                    </div> */}\r\n\r\n            <div className=\"row\">\r\n              {/* <div class=\"input-field col s6\">\r\n                            <textarea onChange={updateState} placeholder=\"Address\" id=\"supplierAddress\" class=\"materialize-textarea\"></textarea>\r\n                            {/* <label for=\"supplierAddress\">Street Address</label> \r\n                    </div> */}\r\n\r\n              {/* <div class=\"input-field col s6\">\r\n                            <input onChange={updateState} placeholder=\"Agency\" id=\"supplierAgency\" type=\"text\" class=\"validate\" />\r\n                            {/* <label className=\"default-input\" for=\"supplierAgency\">Agency Name</label>\r\n                </div> */}\r\n            </div>\r\n\r\n            {/* <div className=\"row\">\r\n\r\n                <div class=\"input-field col s6\">\r\n                    <textarea onChange={updateState} id=\"supplierComments\" class=\"materialize-textarea\"></textarea>\r\n                    <label for=\"supplierComments\">Comments</label>\r\n                </div>\r\n\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            className=\"waves-effect waves-light btn-small save\"\r\n            onClick={saveUser}\r\n          >\r\n            <i class=\"material-icons\"></i>Save\r\n          </button>\r\n          <button\r\n            className=\"waves-effect waves-light btn-small cancel\"\r\n            onClick={() => {\r\n              //props.toggleMenu(false)\r\n              props.showAddUser(false);\r\n            }}\r\n          >\r\n            <i class=\"material-icons\"></i>Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchtoProps = dispatch => {\r\n  return {\r\n    createUser: data => {\r\n      dispatch(middleware.createUser(data));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(store => {\r\n  return {\r\n    data: { ...store.userReducer, ...store.areaReducers }\r\n  };\r\n}, mapDispatchtoProps)(AddUser);\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AddUser from './addUser';\r\nimport Pagination from \"react-js-pagination\";\r\n\r\n// const User = (this.props) => {\r\nclass User extends React.Component {\r\n constructor( props)\r\n {\r\n    super(props);\r\n    this.state = {\r\n        targetUser: { areas: [] },\r\n      activePage: 1,\r\n      itemPerPage: 10\r\n    };\r\n\r\n }\r\n\r\n    state = {\r\n        // targetUser: { areas: [] },\r\n        openUserForm: false\r\n    }\r\n\r\n    // let [addingUser, showAddUser] = useState(false);\r\n    handlePageChange(pageNumber) {\r\n        console.log(`active page is ${pageNumber}`);\r\n        this.setState({ activePage: pageNumber });\r\n      }\r\n\r\n    render = () => {\r\n\r\n        let indexOfLastitem = this.state.activePage * this.state.itemPerPage;\r\n    let indexOfFirstitem = indexOfLastitem - this.state.itemPerPage;\r\n    let rendereduser= this.props.data.users.slice(\r\n      indexOfFirstitem,\r\n      indexOfLastitem\r\n    );\r\n        let uIndex = this.props.data.users.indexOf(this.state.targetUser);\r\n\r\n        uIndex == -1 && (\r\n            this.state.targetUser = this.props.data.users.find((user) => {\r\n                return user._id == this.state.targetUser._id;\r\n            }) || {\r\n                areas: []\r\n            }\r\n        );\r\n\r\n        return <section className=\"app-section\">\r\n            {this.state.openUserForm ? <AddUser user={this.state.targetUser} showAddUser={() => {\r\n                this.setState({\r\n                    openUserForm: false,\r\n                })\r\n            }} /> : null}\r\n            <div className=\"label-head\">\r\n                <img src=\"/images/label-head.png\" />\r\n                <h4>Users</h4>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div class=\"input-field col s3\">\r\n                    <input placeholder=\"Placeholder\" id=\"first_name\" type=\"text\" class=\"validate\" />\r\n                    <label className=\"adjusted-label\" for=\"first_name\">Search Users</label>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>SR.</th>\r\n                            <th>EMPLOYEE CODE</th>\r\n                            <th className=\"wd-200\">FULL NAME</th>\r\n                            <th className=\"wd-200\">EMAIL</th>\r\n                            <th>CONTACT</th>\r\n                            <th>ADDRESS</th>\r\n                            <th>DATE</th>\r\n                            <th>\r\n                                <img onClick={() => {\r\n                                    this.setState({\r\n                                        targetUser: {\r\n                                            areas: []\r\n                                        },\r\n                                        openUserForm: true,\r\n                                    })\r\n                                }} className=\"icon add-item\" src=\"/images/add-icon.png\" />\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {rendereduser.map((user, i) => {\r\n                            return <tr>\r\n                                <td><b>{(i + 1)}</b></td>\r\n                                <td>{user.code}</td>\r\n                                <td className=\"wd-200\">{user.fullName}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>{user.phone}</td>\r\n                                <td>{user.areas.map((area)=>{\r\n                                    return area.name\r\n                                }).join(',')}</td>    \r\n                                <td>{user.date}</td>\r\n                                <td>\r\n                                    <img title=\"Edit\" onClick={() => {\r\n                                        this.setState({\r\n                                            targetUser: user,\r\n                                            openUserForm: true\r\n                                        })\r\n                                    }\r\n                                    } className=\"icon pointer\" src=\"/images/table-icons/edit-icon.png\" />\r\n                                    {/* <Link to={'/accountsdetails/' + user.id}>\r\n                                        <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                                    </Link> */}\r\n                                </td>\r\n                            </tr>\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n                <center>\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              itemsCountPerPage={rendereduser.length}\r\n              totalItemsCount={this.props.data.users.length}\r\n              pageRangeDisplayed={rendereduser.length}\r\n              onChange={pageNumber => this.handlePageChange(pageNumber)}\r\n            />\r\n          </center>\r\n            </div>\r\n\r\n\r\n        </section>\r\n\r\n    }\r\n\r\n}\r\nexport default connect((store) => {\r\n    return {\r\n        data: store.userReducer\r\n    }\r\n})(User);","// import history from '../../historyProvider';\r\nimport messages from \"../../message\";\r\nimport { toast } from \"react-toastify\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport default {\r\n  /// Needs Customer ID and desired state\r\n  deleteSale(data) {\r\n    return dispatch => {\r\n      fetch(\"/api/purchases/delete\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n        .then(resp => {\r\n          return resp.json();\r\n        })\r\n        .then(company => {\r\n          if (company._id) {\r\n            dispatch({\r\n              type: \"PURCHASE_ORDER_DELETED\"\r\n            });\r\n            toast.success(messages.purchase.created);\r\n          } else {\r\n            toast.error(messages.purchase.error.cannotCreate);\r\n          }\r\n        });\r\n    };\r\n  },\r\n  createSale(data) {\r\n    return dispatch => {\r\n      fetch(\"/api/purchases/create\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n        .then(resp => {\r\n          return resp.json();\r\n        })\r\n        .then(sale => {\r\n          if (sale._id) {\r\n            dispatch({\r\n              type: \"PURCHASE_CREATED\",\r\n              payload: sale\r\n            });\r\n            toast.success(messages.sales.saved);\r\n          } else {\r\n            toast.error(messages.sales.error.cannotCreate);\r\n          }\r\n        });\r\n    };\r\n  }\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport DeletePrompt from '../deleteItem/deleteItem';\r\nimport { toast } from \"react-toastify\";\r\nimport './newPurchases.css';\r\nimport PaymentDetails from '../Payment/paymentDetails';\r\nimport middleware from '../../store/Middleware/purchases';\r\nimport AutoComplete from '../autocompletion/autocompletion';\r\n\r\n// import AddSales from './addSales';\r\n\r\nclass Purchases extends React.Component {\r\n\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        this.state = {\r\n            deliveryDate: new Date(),\r\n            // salesDate: null,\r\n            deleteDialog: false,\r\n            total: 0,\r\n            discount: 0,\r\n            // customer: { id: 0 },\r\n            payments: [],\r\n            area: {},\r\n            bills: [\r\n                this.putNewOrder()\r\n            ]\r\n        }\r\n\r\n        this.defaultAction = this.deleteItem;\r\n\r\n\r\n    }\r\n    onProductUpdate = (bill, evt, targetProduct) => {\r\n\r\n        // let targetProduct = this.props.data.products.find((product) => {\r\n        //     return product._id == evt.target.value\r\n        // });\r\n\r\n        bill.product = targetProduct;\r\n        bill.uPrice = targetProduct.customerPrice;\r\n        bill.shopkeeperPrice = targetProduct.shopkeeperPrice;\r\n\r\n        this.setState(this.state);\r\n\r\n    }\r\n\r\n\r\n\r\n    putNewOrder = () => {\r\n\r\n        return {\r\n            product: { customerPrice: 0, shopkeeperPrice: 0, productQty: 0, cartonSize: 0, productQty: 0 },\r\n            crtn: 0,\r\n            units: 0,\r\n            fUnit: 0,\r\n            // uPrice: 0,\r\n            // shopkeerPrice: 0,\r\n            total: 0,\r\n            discountPerc: 0,\r\n            unitDisc: 0,\r\n            discountedAmt: 0,\r\n            net: 0,\r\n            deleted: false,\r\n            inProcess: true,\r\n            // total: 0\r\n        }\r\n\r\n    }\r\n\r\n    // let [state, setState] = useState({area:-1});\r\n\r\n    updateState = (evt) => {\r\n\r\n        this.state[evt.target.id] = evt.target.value;\r\n        this.setState(this.state);\r\n\r\n    }\r\n\r\n    updateBill = (bill, name, value) => {\r\n\r\n        bill[name] = value;\r\n        // let data = JSON.parse(JSON.stringify(this.state));\r\n        this.setState(this.state);\r\n\r\n    }\r\n\r\n    deleteItem = () => {\r\n        if (this.state.selectedBill) {\r\n            this.state.selectedBill.deleted = true;\r\n            this.state.deleteDialog = false;\r\n            this.setState(this.state)\r\n        };\r\n    }\r\n\r\n    restoreItem = () => {\r\n        if (this.state.selectedBill) {\r\n            this.state.selectedBill.deleted = false;\r\n            this.state.deleteDialog = false;\r\n            this.setState(this.state)\r\n        };\r\n    }\r\n\r\n    onPaymentAdded = (payment) => {\r\n\r\n        if (payment) {\r\n            this.state.payments.push(payment);\r\n            this.setState(this.state);\r\n        }\r\n\r\n    }\r\n    componentDidMount = () => {\r\n\r\n        // window.$(this.refs.salesDatePicker).datepicker({\r\n        //     onSelect: (date) => {\r\n\r\n        //         this.setState({ salesDate: date });\r\n\r\n\r\n        //         window.$(this.refs.deliveryDatePicker).datepicker({\r\n        //             minDate: date \r\n        //         });\r\n\r\n        //     }\r\n        // });\r\n\r\n\r\n        window.$(this.refs.deliveryDatePicker).datepicker({\r\n        });\r\n\r\n    }\r\n\r\n    savePurchase = () => { \r\n\r\n        this.state.billNo = this.props.data.purchaseCode;\r\n        this.props.savePurchase(this.state);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let activeBills = this.state.bills.filter((bill) => {\r\n            return !bill.deleted;\r\n        });\r\n\r\n        let totalBill = 0;\r\n        let totalDiscount = 0;\r\n        let totalUnitDiscount = 0;\r\n\r\n        if (activeBills.length) {\r\n\r\n            activeBills.forEach((bill) => {\r\n                bill.total = Math.round(bill.crtn * (bill.product.cartonSize || 1) * ((bill.product.shopkeeperPrice || 0)) + ((bill.units || 0) * (bill.product.shopkeeperPrice || 0)))\r\n                bill.discountedAmt = Math.round(bill.total * (bill.discountPerc / 100));\r\n                totalBill += +bill.total;\r\n                totalDiscount += +bill.discountedAmt;\r\n                totalUnitDiscount += +bill.unitDisc;\r\n            });\r\n\r\n        } else {\r\n\r\n            totalBill = +activeBills[0].total;\r\n            totalDiscount = +activeBills[0].discountedAmt;\r\n            totalUnitDiscount = +activeBills[0].unitDisc;\r\n\r\n        }\r\n\r\n        this.state.total = totalBill;\r\n        this.state.discount = totalDiscount + totalUnitDiscount;\r\n\r\n        // let totalBill = activeBills.length > 1 ?  : activeBills[0].total;\r\n\r\n        let totalPayment = 0;\r\n\r\n        this.state.payments.forEach((payment) => {\r\n            totalPayment += +payment.amount;\r\n        });\r\n\r\n        return <section className=\"app-section new-sale\">\r\n\r\n            <PaymentDetails onCancel={() => {\r\n\r\n                this.setState({\r\n                    addingPayment: false\r\n                });\r\n\r\n            }} payments={this.state.payments} customer={\"Store\"} visible={this.state.addingPayment} onPaymentAdded={this.onPaymentAdded} />\r\n\r\n            <DeletePrompt onYes={() => {\r\n\r\n                this.defaultAction();\r\n\r\n\r\n            }} onCancel={() => {\r\n\r\n                this.setState({\r\n                    deleteDialog: false\r\n                });\r\n\r\n            }} title={this.state.title} description={this.state.description} visible={this.state.deleteDialog} />\r\n            {/* <AddSales visible={addingSales} showAddSales={showAddSales} /> */}\r\n            <div className=\"label-head\">\r\n                <img src=\"/images/label-head.png\" />\r\n                <h4>New Purchases</h4>\r\n                <h5>BILL#: <span>{this.props.data.purchaseCode}</span></h5>\r\n                <div className=\"billSummary\">\r\n                    <div class=\"row\"><span className=\"bill-summary col s6\">Total Billed Amount</span> <span className=\"total-sum col s4\">{Math.round(totalBill)}</span> </div>\r\n                    <div class=\"row\"><span className=\"bill-summary col s6\">Total Item Discount</span><span className=\"total-sum col s4\">{Math.round(totalDiscount)}</span> </div>\r\n                    <div class=\"row\"><span className=\"bill-summary col s6\">Total Unit Amount</span><span className=\"total-sum col s4\">{Math.round(totalUnitDiscount)}</span> </div>\r\n                    <div class=\"row\"><span className=\"bill-summary col s6\">Bill Discount</span><span className=\"total-sum col s4\">{Math.round(totalDiscount + totalUnitDiscount)}</span> </div>\r\n                    <div class=\"row gray-back\"><span className=\"bill-summary col s6\">Total Payable</span><span className=\"total-sum col s4\">{Math.round(totalBill)}</span> </div>\r\n                    <div class=\"row gray-back disabled\"><span className=\"bill-summary col s6\">Paid</span><span className=\"total-sum col s4\">{Math.round(totalPayment)}</span> </div>\r\n\r\n                </div>\r\n                <div className=\"text-right right-panel\">\r\n\r\n                    <img onClick={() => { this.setState({ addingPayment: true }) }} title=\"Add Payment\" className=\"icon panel-icon pointer\" src=\"/images/panel-icons/payment.png\" />\r\n                    <img onClick={() => {\r\n\r\n                        // this.props.saveSale(this.state);\r\n                        this.savePurchase();\r\n\r\n                    }} title=\"Save And Continue\" className=\"icon panel-icon pointer\" src=\"/images/panel-icons/add-icon.png\" />\r\n                    <img title=\"Save\" className=\"icon panel-icon pointer\" src=\"/images/panel-icons/save.png\" />\r\n                    <img title=\"Print\" className=\"icon panel-icon pointer\" src=\"/images/panel-icons/print.png\" />\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n\r\n                <div class=\"input-field col s3\">\r\n\r\n                    <AutoComplete property=\"firstName\"\r\n                        onChange={(evt, supplier) => {\r\n                            supplier && this.updateState({\r\n                                target: {\r\n                                    id: \"supplier\",\r\n                                    value: supplier._id\r\n                                }\r\n                            });\r\n                        }}\r\n                        data={\r\n                            this.props.data.suppliers\r\n                        } placeholder=\"Select Supplier\" />\r\n\r\n                    {/* <select onChange={this.updateState} id=\"area\" className=\"inline\">\r\n                        {\r\n                            ([{ name: \"Area\" }]).concat(this.props.data.areas).map((area) => {\r\n                                return <option value={area._id}>{area.name}</option>\r\n                            })\r\n                        }\r\n                    </select> */}\r\n                    {/* <label className=\"adjusted-label\" for=\"first_name\">Search Sales</label> */}\r\n                </div>\r\n\r\n                <div class=\"input-field col s3\">\r\n                    <input onChange={this.updateState} placeholder=\"Delievry Date\" id=\"deliveryDate\" type=\"text\" id=\"deliveryDate\" ref=\"deliveryDatePicker\" />\r\n                </div>\r\n\r\n                {/* <div class=\"input-field col s3\">\r\n                    <input onChange={this.updateState} placeholder=\"Sales Date\" className=\"datepicker\" id=\"salesDate\" ref=\"salesDatePicker\" type=\"text\" />\r\n                </div> */}\r\n\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n\r\n\r\n\r\n                <div class=\"input-field col s3\">\r\n                    <textarea onChange={this.updateState} placeholder=\"Notes\" id=\"notes\" class=\"white materialize-textarea\"></textarea>\r\n                    {/* <label for=\"supplierAddress\">Street Address</label> */}\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <table className=\"sales-table\">\r\n                    <thead className=\"sales-thead\">\r\n                        <tr>\r\n                            <th className=\"auto-width\">SR.</th>\r\n                            <th className=\"wd-50\">STOCK</th>\r\n                            <th style={{ width: '255px' }}>PRODUCT</th>\r\n                            <th className=\"wd-70\">CRTN</th>\r\n                            <th className=\"wd-70\">UNITS</th>\r\n                            <th className=\"wd-70\">F.UNIT</th>\r\n                            <th className=\"wd-70\">Cost</th>\r\n                            <th className=\"wd-70\">SHOPKEEPER PRICE</th>\r\n                            <th className=\"wd-70\">TOTAL</th>\r\n                            <th>% DISCOUNT</th>\r\n                            <th>Rs.</th>\r\n                            <th>Unit Disc.</th>\r\n                            <th>Net</th>\r\n                            {/* <th>\r\n                  { <img onClick={() => {\r\n                                this.props.history.push('/newsale');\r\n                            }} className=\"icon add-item\" src=\"/images/add-icon.png\" />}\r\n              </th> */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"auto-td sales-tbody\">\r\n                        {/* product:'',\r\n                        crtn:0,\r\n                        units:0,\r\n                        fUnit:0,\r\n                        uPrice:0,\r\n                        shopkeerPrice:0,\r\n                        total:0,\r\n                        discountPerc:0,\r\n                        unitDisc:0 */}\r\n                        {this.state.bills.map((bill, i) => {\r\n\r\n                            //qty = 50\r\n                            //carton size = 12               \r\n                            //target 4:2\r\n                            // TBC, if crtns entered avaiable r greater than qty, reset the unit DIscoutn field \r\n\r\n                            let cartons = (bill.product.productQty / bill.product.cartonSize).toString().split('.')[0];\r\n\r\n\r\n                            (cartons.toString() != \"NaN\") ? (cartons = cartons + \":\" + (bill.product.productQty - (bill.product.cartonSize * cartons))) : (cartons = \":\");\r\n\r\n                            return <tr className={bill.deleted ? \"deleted-row\" : \"\"}>\r\n                                <td><b>{(i + 1)}</b></td>\r\n                                <td className={\"wd-50 f-n\" + (cartons.toString() == \":\" ? \" unvisible\" : \"\")}> <span className=\"stock-indicator\">{cartons}</span></td>\r\n\r\n                                <td>\r\n                                    <AutoComplete property=\"name\"\r\n                                        onChange={(evt, product) => {\r\n                                            product && this.onProductUpdate(bill, evt, product);\r\n                                        }}\r\n                                        data={\r\n                                            this.props.data.products.filter((product) => {\r\n                                                return this.state.bills.filter((iBill) => { return bill != iBill && iBill.product.id == product.id }).length == 0\r\n                                            })\r\n                                        } placeholder=\"Select Product\" />\r\n                                </td>\r\n\r\n                                {/* <td className=\"wd-200\">\r\n                                    <select onChange={(evt) => {\r\n\r\n                                        this.onProductUpdate(bill, evt, i);\r\n\r\n                                    }} id=\"saleProductSelector\" className=\"inline\">\r\n                                        {\r\n                                            (this.props.data.products.filter((product) => {\r\n                                                return this.state.bills.filter((iBill) => { return bill != iBill && iBill.product.id == product.id }).length == 0\r\n                                            }).map((product) => {\r\n                                                return <option value={product._id}>{product.name}</option>\r\n                                            })\r\n                                        }\r\n                                    </select>\r\n                                </td> */}\r\n                                <td>{<input placeholder=\"crtn\" onChange={(evt) => {\r\n\r\n                                    //Check if cartons are greater than the avaiable in stock\r\n                                    let cartons = +((bill.product.productQty / bill.product.cartonSize).toString().split('.')[0]);\r\n\r\n                                    if ((+evt.target.value) > cartons) {\r\n                                        bill.unitDisc = 0;\r\n                                        this.updateBill(bill, evt.target.id, cartons)\r\n\r\n                                    } else {\r\n                                        this.updateBill(bill, evt.target.id, evt.target.value);\r\n\r\n                                    }\r\n\r\n                                    //this.updateBill(bill, evt.target.id, evt.target.value)\r\n                                }} className=\"input-60\" type=\"number\" id=\"crtn\" value={bill.crtn} />}</td>\r\n\r\n                                <td>{<input placeholder=\"Units\" onChange={(evt) => {\r\n\r\n                                    let cartons = +((bill.product.productQty / bill.product.cartonSize).toString().split('.')[0]);\r\n\r\n                                    let totalQty = bill.product.productQty;\r\n\r\n                                    let stockDemanded = ((bill.crtn * bill.product.cartonSize) + +evt.target.value);\r\n\r\n                                    if (stockDemanded > bill.product.productQty) {\r\n\r\n                                        let unitsAvailable = bill.product.productQty - stockDemanded;\r\n\r\n                                        if (unitsAvailable > 0) {\r\n                                            this.updateBill(bill, evt.target.id, evt.target.value);\r\n                                        } else {\r\n\r\n                                            let issueAvaiableStock = evt.target.value - (stockDemanded - bill.product.productQty);\r\n                                            bill.unitDisc = 0;\r\n                                            this.updateBill(bill, evt.target.id, issueAvaiableStock);\r\n\r\n                                        }\r\n\r\n                                    } else {\r\n                                        this.updateBill(bill, evt.target.id, evt.target.value);\r\n                                    }\r\n\r\n                                }} className=\"input-60\" type=\"number\" id=\"units\" value={bill.units} />}</td>\r\n\r\n                                <td>{<input placeholder=\"Funits\" className=\"input-60\" type=\"number\" value={bill.fUnit} />}</td>\r\n\r\n                                {/* Will be updated on selecting product */}\r\n                                <td><input onInput={(evt) => {\r\n                                    this.updateBill(bill, evt.target.id, evt.target.value)\r\n                                }} placeholder=\"0\" id=\"cost\" className=\"input-60\" type=\"number\" value={bill.cost} /></td>\r\n\r\n                                {/* Will be updated on selecting product */}\r\n                                <td><input className=\"input-60\" disabled type=\"text\" readonly value={bill.product.shopkeeperPrice} /></td>\r\n\r\n                                {/* Will be updated on selecting product */}\r\n                                <td><input className=\"input-80\" disabled type=\"text\" readonly value={((bill) => {\r\n                                    return bill.total;\r\n                                })(bill)} /></td>\r\n\r\n                                {/* Will be updated on selecting product */}\r\n                                <td>{<input onInput={(evt) => {\r\n                                    this.updateBill(bill, evt.target.id, evt.target.value)\r\n                                }} className=\"input-60\" id=\"discountPerc\" type=\"number\" value={bill.discountPerc} />}</td>\r\n                                <td>{<input disabled className=\"input-80\" type=\"number\" value={((bill) => {\r\n\r\n\r\n                                    return bill.discountedAmt;\r\n\r\n                                })(bill)} />}</td>\r\n                                {/* <td>{\"discounted amount here\"}</td> */}\r\n\r\n                                {/* Will be updated on selecting product */}\r\n                                <td><input id=\"unitDisc\" onInput={(evt) => {\r\n                                    this.updateBill(bill, evt.target.id, evt.target.value)\r\n                                }} className=\"input-80\" onKeyDown={(evt) => {\r\n\r\n                                    if (evt.key == \"Enter\") {\r\n\r\n                                        if (!bill.product._id) {\r\n                                            toast.error('PLEASE SELECT A PRODUCT');\r\n                                            return;\r\n                                        }\r\n\r\n                                        let previousOrder = this.state.bills[this.state.bills.length - 1];\r\n                                        previousOrder.inProcess = false;\r\n\r\n                                        this.state.bills.push(this.putNewOrder());\r\n\r\n                                        this.setState(this.state);\r\n                                    }\r\n\r\n\r\n                                }} type=\"number\" value={bill.unitDisc} /></td>\r\n                                <td><input className=\"input-80\" type=\"number\" disabled value={bill.total - bill.discountedAmt - bill.unitDisc} /></td>\r\n                                <td>{bill.inProcess ? <i class=\"material-icons dp48 green pointer\" onClick={() => {\r\n\r\n                                    let tBill = this.state.bills[this.state.bills.length - 1];\r\n                                    tBill && (this.state.bills[this.state.bills.length - 1] = this.putNewOrder());\r\n\r\n                                    this.setState(this.state.bills);\r\n\r\n                                }}>done_all</i> : <i class=\"material-icons dp48 pink pointer\" onClick={() => {\r\n\r\n                                    if (bill.deleted) {\r\n\r\n                                        this.defaultAction = this.restoreItem;\r\n\r\n                                        this.setState({\r\n                                            description: \"Are you sure, you want to restore this item?\",\r\n                                            title: \"Restore Item\",\r\n                                            selectedBill: bill,\r\n                                            deleteDialog: true\r\n                                        });\r\n                                    } else {\r\n\r\n                                        this.defaultAction = this.deleteItem;\r\n\r\n                                        this.setState({\r\n                                            description: \"Are you sure, you want to delete this item?\",\r\n                                            title: \"Delete Current Item\",\r\n                                            selectedBill: bill,\r\n                                            deleteDialog: true\r\n                                        });\r\n                                    }\r\n\r\n                                }}> {bill.deleted ? \"refresh\" : \"delete_forever\"}</i>}</td>\r\n\r\n                            </tr>\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n\r\n        </section>\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default connect((store) => {\r\n    return {\r\n        data: {\r\n            ...store.purchaseReducer,\r\n            ...store.supplierReducer,\r\n            ...store.customerReducer,\r\n            ...store.productReducers\r\n        }\r\n    }\r\n}, (dispatch) => {\r\n\r\n    return {\r\n        savePurchase: (data) => {\r\n\r\n            dispatch(middleware.createSale(data));\r\n\r\n        }\r\n    }\r\n\r\n})(Purchases);","import { connect } from \"react-redux\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// import AddSales from './addSales';\r\n\r\nconst Purchases = (props) => {\r\n\r\n    let [addingSales, showAddSales] = useState(false);\r\n\r\n    return <section className=\"app-section\">\r\n        {/* <AddSales visible={addingSales} showAddSales={showAddSales} /> */}\r\n        <div className=\"label-head\">\r\n            <img src=\"/images/label-head.png\" />\r\n            <h4>Purchase Orders</h4>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div class=\"input-field col s3\">\r\n                <input placeholder=\"Placeholder\" id=\"first_name\" type=\"text\" class=\"validate\" />\r\n                <label className=\"adjusted-label\" for=\"first_name\">Search Purchases</label>\r\n            </div>\r\n        </div>\r\n\r\n        <div>\r\n\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>SR.</th>\r\n                        <th>BIL</th>\r\n                        <th className=\"wd-200\">Supplier</th>\r\n                        <th>TOTAL</th>\r\n                        <th>DISCOUNT</th>\r\n                        <th>NET BILL</th>\r\n                        <th>SALES DATE</th>\r\n                        <th>DELIVERY</th>\r\n                        <th>TIME</th>\r\n                        <th>\r\n                            {<img onClick={() => {\r\n                                props.history.push('/newpurchase');\r\n                            }} className=\"icon add-item\" src=\"/images/add-icon.png\" />}\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                    {props.data.purchases.map((purchase, i) => {\r\n                        console.log('pur',purchase)\r\n                        return <tr>\r\n                            <td><b>{(i + 1)}</b></td>\r\n                            <td>{purchase.billNo}</td>\r\n                            <td className=\"wd-200\">{purchase.supplier.firstName + ' ' + purchase.supplier.lastName}</td>\r\n                            <td>{purchase.total}</td>\r\n                            <td>{purchase.discount}</td>\r\n                            <td>{purchase.total - purchase.discount}</td>\r\n                            <td>{new Date(purchase.salesDate).toDateString()}</td>\r\n                            <td>{new Date(purchase.deliveryDate).toDateString()}</td>\r\n                            <td>{purchase.time}</td>\r\n                            <td>\r\n                                <Link to={'/details/' + purchase.id}>\r\n                                    <img className=\"icon\" src=\"/images/details-icon.png\" />\r\n                                </Link>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n\r\n    </section>\r\n\r\n}\r\n\r\n\r\nexport default connect((store) => {\r\n    return {\r\n        data: store.purchaseReducer\r\n    }\r\n})(Purchases);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Recovery extends React.Component{\r\n\r\n    render(){   \r\n\r\n        return <div>\r\n        <h1>This is connect</h1>\r\n    </div>;\r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect((store)=>{\r\n\r\n    return {}\r\n\r\n})(Recovery);","import React from \"react\";\r\nimport Dashboard from \"./dasboard/dashboard\";\r\nimport Login from \"./loginForm/loginform\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  withRouter,\r\n  Redirect,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Supplier from \"./accounts/supplier\";\r\nimport Product from \"./settings/products/product\";\r\nimport CompanySettings from \"./settings/companies/companySettings\";\r\n\r\nimport CategorySettings from \"./settings/categories/categories\";\r\nimport AreaSettings from \"./settings/areas/areas\";\r\n\r\nimport Attendance from \"./attendance/attendance\";\r\nimport Store from \"./settings/store/settings\";\r\n\r\nimport Sales from \"./sales/sales\";\r\nimport NewSale from \"./sales/newSale\";\r\n\r\nimport Salary from \"./settings/salary/salary\";\r\n\r\nimport Expenses from \"./expenses/expenses\";\r\n\r\nimport SupplierDetails from \"./accounts/supplierDetails\";\r\nimport SupplierSettings from \"./accounts/supplier\";\r\nimport Customersledgers from \"./accounts/customersledgers\";\r\nimport CustomerSettings from \"./settings/customers\";\r\nimport UserSettings from \"./settings/users/users\";\r\n\r\nimport NewPurchase from \"./purchases/newPurchases\";\r\nimport Purchase from \"./purchases/purchases\";\r\n\r\nimport Header from \"./navbar/navbar\";\r\n\r\nimport Recovery from \"./recovery/recovery\";\r\n\r\nclass Main extends React.Component {\r\n  render() {\r\n    let getitemALL = JSON.parse(localStorage.getItem(\"persist:root\"));\r\n   \r\n\r\n    return (\r\n      <>\r\n        {Object.keys(JSON.parse(getitemALL.loginReducers).loggedInUser).length != 0 ? <Redirect to=\"/dashboard\" /> : <Redirect to=\"/login\" />}\r\n        {this.props.loggedInUser ? <Header/> : <Redirect to=\"/login\" />}\r\n\r\n\r\n        {/* {this.props.children} */}\r\n        <Route path=\"/dashboard\" component={Dashboard} />\r\n\r\n        <Route path=\"/login\" component={Login} />\r\n\r\n        {/* <Route path='/accounts' component={Login}/> */}\r\n        <Route path=\"/accounts/suppliers\" component={Supplier} />\r\n        <Route path=\"/accounts/customersledgers\" component={Customersledgers} />\r\n\r\n        <Route path=\"/accountsdetails/:id\" component={SupplierDetails} />\r\n\r\n        <Route path=\"/attendance\" component={Attendance} />\r\n\r\n        <Route path=\"/sales\" component={Sales} />\r\n        <Route path=\"/newsale\" component={NewSale} />\r\n\r\n        <Route path=\"/recovery\" component={Recovery} />\r\n\r\n        <Route path=\"/newpurchase\" component={NewPurchase} />\r\n        <Route path=\"/purchases\" component={Purchase} />\r\n\r\n        <Route path=\"/expenses\" component={Expenses} />\r\n\r\n        <Route path=\"/reporting\" component={Login} />\r\n\r\n        <Route path=\"/salary\" component={Salary} />\r\n\r\n        <Route path=\"/settings/store\" component={Store} />\r\n\r\n        <Route path=\"/settings\" component={Login} />\r\n        <Route path=\"/settings/companies\" component={CompanySettings} />\r\n        <Route path=\"/settings/categories\" component={CategorySettings} />\r\n        <Route\r\n          path=\"/settings/customers\"\r\n          render={() => {\r\n            return <CustomerSettings showAddBtn={true} />;\r\n          }}\r\n        />\r\n\r\n        <Route\r\n          path=\"/settings/products\"\r\n          render={() => {\r\n            return <Product />;\r\n          }}\r\n        />\r\n\r\n        <Route path=\"/settings/users\" component={UserSettings} />\r\n        <Route path=\"/settings/areas\" component={AreaSettings} />\r\n\r\n        <Route\r\n          path=\"/settings/suppliers\"\r\n          render={() => {\r\n            return <SupplierSettings showAddBtn={true}></SupplierSettings>;\r\n          }}\r\n        />\r\n\r\n        {this.props.menuReducers.loadedMenu.length ? (\r\n          <div className=\"menu-container flex\">\r\n            {this.props.menuReducers.loadedMenu.map(item => {\r\n              return (\r\n                <Link to={item.link}>\r\n                  <div className=\"menuitem\">\r\n                    <img src={\"/\" + item.icon} />\r\n                    <div className=\"label\">{item.name}</div>\r\n                    {/* {item} */}\r\n                  </div>\r\n                </Link>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : null}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(store => {\r\n  return {\r\n    menuReducers: store.dropdownReducers,\r\n    ...store.loginReducers\r\n  };\r\n})(withRouter(Main));\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Main from './component/Maincomponent'\r\nimport { Provider } from 'react-redux';\r\nimport { Router } from 'react-router-dom'\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { store, persistor } from \"./store/store\";\r\n// import Header from './component/navbar/navbar';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport history from './historyProvider';\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass App extends Component {\r\n  render = () => {\r\n    return <div>\r\n      <Provider store={store}>\r\n        <Router history={history}>\r\n          <Main>\r\n          </Main>\r\n          {/* <PersistGate persistor={persistor}> */}\r\n          {/* <Main /> */}\r\n\r\n          {/* </PersistGate> */}\r\n      </Router>\r\n      </Provider>\r\n      <ToastContainer />\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// const theme = createMuiTheme({\r\n//     palette: {\r\n//       secondary: {\r\n//           main:'#ffa500'\r\n//         }\r\n//       },\r\n//       primary: {\r\n//         main: '#00254a'\r\n//       }\r\n//     }    \r\n//   )\r\n  \r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}